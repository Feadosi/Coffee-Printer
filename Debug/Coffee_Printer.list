
Coffee_Printer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005be8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08005d78  08005d78  00015d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fa8  08005fa8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005fa8  08005fa8  00015fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fb0  08005fb0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fb0  08005fb0  00015fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fb4  08005fb4  00015fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000209c  20000070  08006028  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000210c  08006028  0002210c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c4f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002733  00000000  00000000  00032cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00035428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  00036460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d69  00000000  00000000  000373a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d3b  00000000  00000000  0005a109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d06ac  00000000  00000000  0006ce44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013d4f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004be8  00000000  00000000  0013d540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d60 	.word	0x08005d60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005d60 	.word	0x08005d60

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <StepMotorInit>:
uint8_t c=0;

//******************FUNCTIONS************************
//------------------------------------------------------------------------------------------
void StepMotorInit()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 8000578:	2201      	movs	r2, #1
 800057a:	2104      	movs	r1, #4
 800057c:	480d      	ldr	r0, [pc, #52]	; (80005b4 <StepMotorInit+0x40>)
 800057e:	f001 fa9d 	bl	8001abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2108      	movs	r1, #8
 8000586:	480b      	ldr	r0, [pc, #44]	; (80005b4 <StepMotorInit+0x40>)
 8000588:	f001 fa98 	bl	8001abc <HAL_GPIO_WritePin>

	HAL_TIM_Base_Start_IT(&htim2);
 800058c:	480a      	ldr	r0, [pc, #40]	; (80005b8 <StepMotorInit+0x44>)
 800058e:	f002 fd11 	bl	8002fb4 <HAL_TIM_Base_Start_IT>
	StartingPoint();
 8000592:	f000 f813 	bl	80005bc <StartingPoint>
	HAL_TIM_Base_Stop_IT(&htim2);
 8000596:	4808      	ldr	r0, [pc, #32]	; (80005b8 <StepMotorInit+0x44>)
 8000598:	f002 fd60 	bl	800305c <HAL_TIM_Base_Stop_IT>

	HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2104      	movs	r1, #4
 80005a0:	4804      	ldr	r0, [pc, #16]	; (80005b4 <StepMotorInit+0x40>)
 80005a2:	f001 fa8b 	bl	8001abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2108      	movs	r1, #8
 80005aa:	4802      	ldr	r0, [pc, #8]	; (80005b4 <StepMotorInit+0x40>)
 80005ac:	f001 fa86 	bl	8001abc <HAL_GPIO_WritePin>
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	48000800 	.word	0x48000800
 80005b8:	20000090 	.word	0x20000090

080005bc <StartingPoint>:
//------------------------------------------------------------------------------------------
void StartingPoint()
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	c=0;
 80005c0:	4b20      	ldr	r3, [pc, #128]	; (8000644 <StartingPoint+0x88>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		if(HAL_GPIO_ReadPin(LIMIT_SWITCH_VECTOR_PORT, LIMIT_SWITCH_VECTOR_PIN) == GPIO_PIN_RESET)
 80005c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ce:	f001 fa5d 	bl	8001a8c <HAL_GPIO_ReadPin>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d105      	bne.n	80005e4 <StartingPoint+0x28>
		{
			StepMotorVector(1, MOVE_FROM_CENTER, SPEED_DELAY_FOR_VECTOR);
 80005d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005dc:	2101      	movs	r1, #1
 80005de:	2001      	movs	r0, #1
 80005e0:	f000 f8aa 	bl	8000738 <StepMotorVector>
		}
		if(HAL_GPIO_ReadPin(LIMIT_SWITCH_UPDOWN_PORT, LIMIT_SWITCH_UPDOWN_PIN) == GPIO_PIN_RESET)
 80005e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ec:	f001 fa4e 	bl	8001a8c <HAL_GPIO_ReadPin>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d10a      	bne.n	800060c <StartingPoint+0x50>
		{
			StepMotorUpDown(1, UP, SPEED_DELAY_FOR_UP_DOWN);
 80005f6:	22c8      	movs	r2, #200	; 0xc8
 80005f8:	2101      	movs	r1, #1
 80005fa:	2001      	movs	r0, #1
 80005fc:	f000 f8da 	bl	80007b4 <StepMotorUpDown>
			c++;
 8000600:	4b10      	ldr	r3, [pc, #64]	; (8000644 <StartingPoint+0x88>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	b2da      	uxtb	r2, r3
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <StartingPoint+0x88>)
 800060a:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(LIMIT_SWITCH_VECTOR_PORT, LIMIT_SWITCH_VECTOR_PIN) == GPIO_PIN_SET && HAL_GPIO_ReadPin(LIMIT_SWITCH_UPDOWN_PORT, LIMIT_SWITCH_UPDOWN_PIN) == GPIO_PIN_SET)
 800060c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f001 fa3a 	bl	8001a8c <HAL_GPIO_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	2b01      	cmp	r3, #1
 800061c:	d1d3      	bne.n	80005c6 <StartingPoint+0xa>
 800061e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000626:	f001 fa31 	bl	8001a8c <HAL_GPIO_ReadPin>
 800062a:	4603      	mov	r3, r0
 800062c:	2b01      	cmp	r3, #1
 800062e:	d000      	beq.n	8000632 <StartingPoint+0x76>
		if(HAL_GPIO_ReadPin(LIMIT_SWITCH_VECTOR_PORT, LIMIT_SWITCH_VECTOR_PIN) == GPIO_PIN_RESET)
 8000630:	e7c9      	b.n	80005c6 <StartingPoint+0xa>
		{
			break;
 8000632:	bf00      	nop
		}
	}
	printf("C = %d\n", c);
 8000634:	4b03      	ldr	r3, [pc, #12]	; (8000644 <StartingPoint+0x88>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	4803      	ldr	r0, [pc, #12]	; (8000648 <StartingPoint+0x8c>)
 800063c:	f004 fb8c 	bl	8004d58 <iprintf>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	2000008c 	.word	0x2000008c
 8000648:	08005d78 	.word	0x08005d78

0800064c <Pump>:
//------------------------------------------------------------------------------------------
void Pump(uint8_t state)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	if(state == ENABLE_PUMP)
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d106      	bne.n	800066a <Pump+0x1e>
	{
		HAL_GPIO_WritePin(PUMP_PORT, PUMP_PIN, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000662:	4808      	ldr	r0, [pc, #32]	; (8000684 <Pump+0x38>)
 8000664:	f001 fa2a 	bl	8001abc <HAL_GPIO_WritePin>
	}
	else if(state == DISABLE_PUMP)
	{
		HAL_GPIO_WritePin(PUMP_PORT, PUMP_PIN, GPIO_PIN_RESET);
	}
}
 8000668:	e008      	b.n	800067c <Pump+0x30>
	else if(state == DISABLE_PUMP)
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d105      	bne.n	800067c <Pump+0x30>
		HAL_GPIO_WritePin(PUMP_PORT, PUMP_PIN, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000676:	4803      	ldr	r0, [pc, #12]	; (8000684 <Pump+0x38>)
 8000678:	f001 fa20 	bl	8001abc <HAL_GPIO_WritePin>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	48000800 	.word	0x48000800

08000688 <MicroDelay>:
//------------------------------------------------------------------------------------------
void MicroDelay(uint16_t delay)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim7, 0);
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MicroDelay+0x30>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim7) < delay);
 800069a:	bf00      	nop
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MicroDelay+0x30>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d3f9      	bcc.n	800069c <MicroDelay+0x14>
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	200000dc 	.word	0x200000dc

080006bc <StepMotorRotation>:
//------------------------------------------------------------------------------------------
void StepMotorRotation(uint32_t steps, uint8_t direction, uint16_t delay)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	460b      	mov	r3, r1
 80006c6:	70fb      	strb	r3, [r7, #3]
 80006c8:	4613      	mov	r3, r2
 80006ca:	803b      	strh	r3, [r7, #0]
	uint32_t k;
	if (direction == 0)
 80006cc:	78fb      	ldrb	r3, [r7, #3]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d106      	bne.n	80006e0 <StepMotorRotation+0x24>
		HAL_GPIO_WritePin(DIR_PORT_AN, DIR_PIN_AN, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006d8:	4815      	ldr	r0, [pc, #84]	; (8000730 <StepMotorRotation+0x74>)
 80006da:	f001 f9ef 	bl	8001abc <HAL_GPIO_WritePin>
 80006de:	e005      	b.n	80006ec <StepMotorRotation+0x30>
	else
		HAL_GPIO_WritePin(DIR_PORT_AN, DIR_PIN_AN, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e6:	4812      	ldr	r0, [pc, #72]	; (8000730 <StepMotorRotation+0x74>)
 80006e8:	f001 f9e8 	bl	8001abc <HAL_GPIO_WritePin>

	for(k = 0; k < steps; k++)
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	e014      	b.n	800071c <StepMotorRotation+0x60>
	{
		HAL_GPIO_WritePin(STEP_PORT_AN, STEP_PIN_AN, GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2140      	movs	r1, #64	; 0x40
 80006f6:	480f      	ldr	r0, [pc, #60]	; (8000734 <StepMotorRotation+0x78>)
 80006f8:	f001 f9e0 	bl	8001abc <HAL_GPIO_WritePin>
		MicroDelay(delay);
 80006fc:	883b      	ldrh	r3, [r7, #0]
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ffc2 	bl	8000688 <MicroDelay>
		HAL_GPIO_WritePin(STEP_PORT_AN, STEP_PIN_AN, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2140      	movs	r1, #64	; 0x40
 8000708:	480a      	ldr	r0, [pc, #40]	; (8000734 <StepMotorRotation+0x78>)
 800070a:	f001 f9d7 	bl	8001abc <HAL_GPIO_WritePin>
		MicroDelay(delay);
 800070e:	883b      	ldrh	r3, [r7, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ffb9 	bl	8000688 <MicroDelay>
	for(k = 0; k < steps; k++)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	3301      	adds	r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fa      	ldr	r2, [r7, #12]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	429a      	cmp	r2, r3
 8000722:	d3e6      	bcc.n	80006f2 <StepMotorRotation+0x36>
	}
}
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	48000400 	.word	0x48000400
 8000734:	48000800 	.word	0x48000800

08000738 <StepMotorVector>:
//------------------------------------------------------------------------------------------
void StepMotorVector(uint32_t steps, uint8_t direction, uint16_t delay)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	460b      	mov	r3, r1
 8000742:	70fb      	strb	r3, [r7, #3]
 8000744:	4613      	mov	r3, r2
 8000746:	803b      	strh	r3, [r7, #0]
	uint32_t k;
	if (direction == 0)
 8000748:	78fb      	ldrb	r3, [r7, #3]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d106      	bne.n	800075c <StepMotorVector+0x24>
		HAL_GPIO_WritePin(DIR_PORT_RV, DIR_PIN_RV, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000754:	4816      	ldr	r0, [pc, #88]	; (80007b0 <StepMotorVector+0x78>)
 8000756:	f001 f9b1 	bl	8001abc <HAL_GPIO_WritePin>
 800075a:	e005      	b.n	8000768 <StepMotorVector+0x30>
	else
		HAL_GPIO_WritePin(DIR_PORT_RV, DIR_PIN_RV, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000762:	4813      	ldr	r0, [pc, #76]	; (80007b0 <StepMotorVector+0x78>)
 8000764:	f001 f9aa 	bl	8001abc <HAL_GPIO_WritePin>

	for(k = 0; k < steps; k++)
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	e016      	b.n	800079c <StepMotorVector+0x64>
	{
		HAL_GPIO_WritePin(STEP_PORT_RV, STEP_PIN_RV, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000774:	480e      	ldr	r0, [pc, #56]	; (80007b0 <StepMotorVector+0x78>)
 8000776:	f001 f9a1 	bl	8001abc <HAL_GPIO_WritePin>
		MicroDelay(delay);
 800077a:	883b      	ldrh	r3, [r7, #0]
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff83 	bl	8000688 <MicroDelay>
		HAL_GPIO_WritePin(STEP_PORT_RV, STEP_PIN_RV, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000788:	4809      	ldr	r0, [pc, #36]	; (80007b0 <StepMotorVector+0x78>)
 800078a:	f001 f997 	bl	8001abc <HAL_GPIO_WritePin>
		MicroDelay(delay);
 800078e:	883b      	ldrh	r3, [r7, #0]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff79 	bl	8000688 <MicroDelay>
	for(k = 0; k < steps; k++)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	3301      	adds	r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d3e4      	bcc.n	800076e <StepMotorVector+0x36>
	}
}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	48000800 	.word	0x48000800

080007b4 <StepMotorUpDown>:
//------------------------------------------------------------------------------------------
void StepMotorUpDown(uint32_t steps, uint8_t direction, uint16_t delay)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	70fb      	strb	r3, [r7, #3]
 80007c0:	4613      	mov	r3, r2
 80007c2:	803b      	strh	r3, [r7, #0]
	uint32_t k;
	if (direction == 0)
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d105      	bne.n	80007d6 <StepMotorUpDown+0x22>
		HAL_GPIO_WritePin(DIR_PORT_UD, DIR_PIN_UD, GPIO_PIN_SET);
 80007ca:	2201      	movs	r2, #1
 80007cc:	2102      	movs	r1, #2
 80007ce:	4815      	ldr	r0, [pc, #84]	; (8000824 <StepMotorUpDown+0x70>)
 80007d0:	f001 f974 	bl	8001abc <HAL_GPIO_WritePin>
 80007d4:	e004      	b.n	80007e0 <StepMotorUpDown+0x2c>
	else
		HAL_GPIO_WritePin(DIR_PORT_UD, DIR_PIN_UD, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2102      	movs	r1, #2
 80007da:	4812      	ldr	r0, [pc, #72]	; (8000824 <StepMotorUpDown+0x70>)
 80007dc:	f001 f96e 	bl	8001abc <HAL_GPIO_WritePin>

	//steps = steps / 5;
	for(k = 0; k < steps; k++)
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	e014      	b.n	8000810 <StepMotorUpDown+0x5c>
	{
		HAL_GPIO_WritePin(STEP_PORT_UD, STEP_PIN_UD, GPIO_PIN_SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	2101      	movs	r1, #1
 80007ea:	480e      	ldr	r0, [pc, #56]	; (8000824 <StepMotorUpDown+0x70>)
 80007ec:	f001 f966 	bl	8001abc <HAL_GPIO_WritePin>
		MicroDelay(delay);
 80007f0:	883b      	ldrh	r3, [r7, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff48 	bl	8000688 <MicroDelay>
    	HAL_GPIO_WritePin(STEP_PORT_UD, STEP_PIN_UD, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2101      	movs	r1, #1
 80007fc:	4809      	ldr	r0, [pc, #36]	; (8000824 <StepMotorUpDown+0x70>)
 80007fe:	f001 f95d 	bl	8001abc <HAL_GPIO_WritePin>
    	MicroDelay(delay);
 8000802:	883b      	ldrh	r3, [r7, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff3f 	bl	8000688 <MicroDelay>
	for(k = 0; k < steps; k++)
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	3301      	adds	r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	429a      	cmp	r2, r3
 8000816:	d3e6      	bcc.n	80007e6 <StepMotorUpDown+0x32>
	}
}
 8000818:	bf00      	nop
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	48000400 	.word	0x48000400

08000828 <ConvertStepsAndCommand>:
//------------------------------------------------------------------------------------------
void ConvertStepsAndCommand(uint8_t *data, uint16_t *steps, uint8_t *command)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
    *command = (data[0] & MASK_FOR_COMMAND)>>4;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	091b      	lsrs	r3, r3, #4
 800083a:	b2da      	uxtb	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	701a      	strb	r2, [r3, #0]
    *steps = ((data[0] & MASK_FOR_STEPS)<<8) | data[1];
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	021b      	lsls	r3, r3, #8
 8000846:	b21b      	sxth	r3, r3
 8000848:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800084c:	b21a      	sxth	r2, r3
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	3301      	adds	r3, #1
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b21b      	sxth	r3, r3
 8000856:	4313      	orrs	r3, r2
 8000858:	b21b      	sxth	r3, r3
 800085a:	b29a      	uxth	r2, r3
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	801a      	strh	r2, [r3, #0]
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <CommandHandler>:
//------------------------------------------------------------------------------------------
void CommandHandler(uint16_t steps, uint8_t command)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	460a      	mov	r2, r1
 8000876:	80fb      	strh	r3, [r7, #6]
 8000878:	4613      	mov	r3, r2
 800087a:	717b      	strb	r3, [r7, #5]
	switch (command) {
 800087c:	797b      	ldrb	r3, [r7, #5]
 800087e:	2b0f      	cmp	r3, #15
 8000880:	f200 8084 	bhi.w	800098c <CommandHandler+0x120>
 8000884:	a201      	add	r2, pc, #4	; (adr r2, 800088c <CommandHandler+0x20>)
 8000886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088a:	bf00      	nop
 800088c:	08000959 	.word	0x08000959
 8000890:	0800098d 	.word	0x0800098d
 8000894:	0800098d 	.word	0x0800098d
 8000898:	080008ed 	.word	0x080008ed
 800089c:	0800098d 	.word	0x0800098d
 80008a0:	08000917 	.word	0x08000917
 80008a4:	0800092d 	.word	0x0800092d
 80008a8:	0800098d 	.word	0x0800098d
 80008ac:	0800098d 	.word	0x0800098d
 80008b0:	08000943 	.word	0x08000943
 80008b4:	08000901 	.word	0x08000901
 80008b8:	0800098d 	.word	0x0800098d
 80008bc:	080008d9 	.word	0x080008d9
 80008c0:	0800098d 	.word	0x0800098d
 80008c4:	0800098d 	.word	0x0800098d
 80008c8:	080008cd 	.word	0x080008cd
	case CMD_MOVE_TO_STARTING_POINT:
		StartingPoint();
 80008cc:	f7ff fe76 	bl	80005bc <StartingPoint>
		printf("Case CMD_MOVE_TO_STARTING_POINT!!! \n");
 80008d0:	4830      	ldr	r0, [pc, #192]	; (8000994 <CommandHandler+0x128>)
 80008d2:	f004 fac7 	bl	8004e64 <puts>
	  break;
 80008d6:	e059      	b.n	800098c <CommandHandler+0x120>
	case CMD_UP_THE_NEEDLE:
		printf("Case CMD_UP_THE_NEEDLE!!! \n");
 80008d8:	482f      	ldr	r0, [pc, #188]	; (8000998 <CommandHandler+0x12c>)
 80008da:	f004 fac3 	bl	8004e64 <puts>
		StepMotorUpDown(steps, UP, SPEED_DELAY_FOR_UP_DOWN);
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	22c8      	movs	r2, #200	; 0xc8
 80008e2:	2101      	movs	r1, #1
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff65 	bl	80007b4 <StepMotorUpDown>
	  break;
 80008ea:	e04f      	b.n	800098c <CommandHandler+0x120>
	case CMD_DOWN_THE_NEEDLE:
		printf("Case CMD_DOWN_THE_NEEDLE!!! \n");
 80008ec:	482b      	ldr	r0, [pc, #172]	; (800099c <CommandHandler+0x130>)
 80008ee:	f004 fab9 	bl	8004e64 <puts>
		StepMotorUpDown(steps, DOWN, SPEED_DELAY_FOR_UP_DOWN);
 80008f2:	88fb      	ldrh	r3, [r7, #6]
 80008f4:	22c8      	movs	r2, #200	; 0xc8
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff5b 	bl	80007b4 <StepMotorUpDown>
	  break;
 80008fe:	e045      	b.n	800098c <CommandHandler+0x120>
	case CMD_ROTATION_CLOCKWISE:
		printf("Case CMD_ROTATION_CLOCKWISE!!! \n");
 8000900:	4827      	ldr	r0, [pc, #156]	; (80009a0 <CommandHandler+0x134>)
 8000902:	f004 faaf 	bl	8004e64 <puts>
		StepMotorRotation(steps, ROTATION_CLOCKWISE, SPEED_DELAY_FOR_ROTATION);
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fed4 	bl	80006bc <StepMotorRotation>
	  break;
 8000914:	e03a      	b.n	800098c <CommandHandler+0x120>
	case CMD_ROTATION_ANTICLOCKWISE:
		printf("Case CMD_ROTATION_ANTICLOCKWISE!!! \n");
 8000916:	4823      	ldr	r0, [pc, #140]	; (80009a4 <CommandHandler+0x138>)
 8000918:	f004 faa4 	bl	8004e64 <puts>
		StepMotorRotation(steps, ROTATION_ANTICLOCKWISE, SPEED_DELAY_FOR_ROTATION);
 800091c:	88fb      	ldrh	r3, [r7, #6]
 800091e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000922:	2101      	movs	r1, #1
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fec9 	bl	80006bc <StepMotorRotation>
	  break;
 800092a:	e02f      	b.n	800098c <CommandHandler+0x120>
	case CMD_MOVE_TO_CENTER:
		printf("Case CMD_MOVE_TO_CENTER!!! \n");
 800092c:	481e      	ldr	r0, [pc, #120]	; (80009a8 <CommandHandler+0x13c>)
 800092e:	f004 fa99 	bl	8004e64 <puts>
		StepMotorVector(steps, MOVE_TO_CENTER, SPEED_DELAY_FOR_VECTOR);
 8000932:	88fb      	ldrh	r3, [r7, #6]
 8000934:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fefc 	bl	8000738 <StepMotorVector>
	  break;
 8000940:	e024      	b.n	800098c <CommandHandler+0x120>
	case CMD_MOVE_FROM_CENTER:
		printf("Case CMD_MOVE_FROM_CENTER!!! \n");
 8000942:	481a      	ldr	r0, [pc, #104]	; (80009ac <CommandHandler+0x140>)
 8000944:	f004 fa8e 	bl	8004e64 <puts>
		StepMotorVector(steps, MOVE_FROM_CENTER, SPEED_DELAY_FOR_VECTOR);
 8000948:	88fb      	ldrh	r3, [r7, #6]
 800094a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800094e:	2101      	movs	r1, #1
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fef1 	bl	8000738 <StepMotorVector>
	  break;
 8000956:	e019      	b.n	800098c <CommandHandler+0x120>
	case CMD_END_PROGRAMM:
		HAL_TIM_Base_Stop_IT(&htim2);
 8000958:	4815      	ldr	r0, [pc, #84]	; (80009b0 <CommandHandler+0x144>)
 800095a:	f002 fb7f 	bl	800305c <HAL_TIM_Base_Stop_IT>
		cnt = 0;
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <CommandHandler+0x148>)
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
		accessFlag = 0;
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <CommandHandler+0x14c>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 800096a:	2201      	movs	r2, #1
 800096c:	2104      	movs	r1, #4
 800096e:	4813      	ldr	r0, [pc, #76]	; (80009bc <CommandHandler+0x150>)
 8000970:	f001 f8a4 	bl	8001abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	2108      	movs	r1, #8
 8000978:	4810      	ldr	r0, [pc, #64]	; (80009bc <CommandHandler+0x150>)
 800097a:	f001 f89f 	bl	8001abc <HAL_GPIO_WritePin>
		memset(Package_Data, 0, sizeof(Package_Data));
 800097e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000982:	2100      	movs	r1, #0
 8000984:	480e      	ldr	r0, [pc, #56]	; (80009c0 <CommandHandler+0x154>)
 8000986:	f004 f9df 	bl	8004d48 <memset>
	  break;
 800098a:	bf00      	nop
	}
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	08005d80 	.word	0x08005d80
 8000998:	08005da4 	.word	0x08005da4
 800099c:	08005dc0 	.word	0x08005dc0
 80009a0:	08005de0 	.word	0x08005de0
 80009a4:	08005e00 	.word	0x08005e00
 80009a8:	08005e24 	.word	0x08005e24
 80009ac:	08005e40 	.word	0x08005e40
 80009b0:	20000090 	.word	0x20000090
 80009b4:	200020ec 	.word	0x200020ec
 80009b8:	200020f0 	.word	0x200020f0
 80009bc:	48000800 	.word	0x48000800
 80009c0:	200001ac 	.word	0x200001ac

080009c4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009d0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d013      	beq.n	8000a04 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80009dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009e0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80009e4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d00b      	beq.n	8000a04 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80009ec:	e000      	b.n	80009f0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80009ee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80009f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d0f9      	beq.n	80009ee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80009fa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	b2d2      	uxtb	r2, r2
 8000a02:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000a04:	687b      	ldr	r3, [r7, #4]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <_write>:
uint8_t Package_Data[4000][2]={0};
uint32_t cnt = 0;
uint8_t accessFlag = 0;
/*-----------------------------For debug------------------------------------*/
int _write(int file, uint8_t *ptr, int len)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b086      	sub	sp, #24
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	e009      	b.n	8000a38 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	60ba      	str	r2, [r7, #8]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ffc9 	bl	80009c4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	3301      	adds	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	dbf1      	blt.n	8000a24 <_write+0x12>
	}
	return len;
 8000a40:	687b      	ldr	r3, [r7, #4]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a52:	f000 fc9c 	bl	800138e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a56:	f000 f8a1 	bl	8000b9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a5a:	f000 f9a3 	bl	8000da4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a5e:	f000 f971 	bl	8000d44 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8000a62:	f000 f939 	bl	8000cd8 <MX_TIM7_Init>
  MX_TIM2_Init();
 8000a66:	f000 f8e9 	bl	8000c3c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000a6a:	4b41      	ldr	r3, [pc, #260]	; (8000b70 <main+0x124>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b3f      	ldr	r3, [pc, #252]	; (8000b70 <main+0x124>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f042 0220 	orr.w	r2, r2, #32
 8000a78:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_TC);
 8000a7a:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <main+0x124>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b3b      	ldr	r3, [pc, #236]	; (8000b70 <main+0x124>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a88:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start(&htim7);
 8000a8a:	483a      	ldr	r0, [pc, #232]	; (8000b74 <main+0x128>)
 8000a8c:	f002 fa46 	bl	8002f1c <HAL_TIM_Base_Start>
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, Package_Data[cnt], 2);
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <main+0x12c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	4a39      	ldr	r2, [pc, #228]	; (8000b7c <main+0x130>)
 8000a98:	4413      	add	r3, r2
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4834      	ldr	r0, [pc, #208]	; (8000b70 <main+0x124>)
 8000aa0:	f004 f8cd 	bl	8004c3e <HAL_UARTEx_ReceiveToIdle_IT>
  StepMotorInit();
 8000aa4:	f7ff fd66 	bl	8000574 <StepMotorInit>
  StepMotorRotation(STEPS_MOTOR_FULL_ROTATE, ROTATION_CLOCKWISE, SPEED_DELAY_FOR_ROTATION);
 8000aa8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000aac:	2100      	movs	r1, #0
 8000aae:	f241 1078 	movw	r0, #4472	; 0x1178
 8000ab2:	f7ff fe03 	bl	80006bc <StepMotorRotation>
  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2108      	movs	r1, #8
 8000aba:	4831      	ldr	r0, [pc, #196]	; (8000b80 <main+0x134>)
 8000abc:	f000 fffe 	bl	8001abc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2104      	movs	r1, #4
 8000ac4:	482e      	ldr	r0, [pc, #184]	; (8000b80 <main+0x134>)
 8000ac6:	f000 fff9 	bl	8001abc <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if(HAL_GPIO_ReadPin(FLUID_LEVEL_PORT, FLUID_LEVEL_PIN) == GPIO_PIN_SET)
 8000aca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ace:	482d      	ldr	r0, [pc, #180]	; (8000b84 <main+0x138>)
 8000ad0:	f000 ffdc 	bl	8001a8c <HAL_GPIO_ReadPin>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d105      	bne.n	8000ae6 <main+0x9a>
		{
			HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	2108      	movs	r1, #8
 8000ade:	4828      	ldr	r0, [pc, #160]	; (8000b80 <main+0x134>)
 8000ae0:	f000 ffec 	bl	8001abc <HAL_GPIO_WritePin>
 8000ae4:	e004      	b.n	8000af0 <main+0xa4>
		}
		else
		{
			HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2108      	movs	r1, #8
 8000aea:	4825      	ldr	r0, [pc, #148]	; (8000b80 <main+0x134>)
 8000aec:	f000 ffe6 	bl	8001abc <HAL_GPIO_WritePin>
		}

	  if(accessFlag == 1)
 8000af0:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <main+0x13c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d1e8      	bne.n	8000aca <main+0x7e>
	  {
		  printf("Start of printing!!!\n");
 8000af8:	4824      	ldr	r0, [pc, #144]	; (8000b8c <main+0x140>)
 8000afa:	f004 f9b3 	bl	8004e64 <puts>
		  HAL_TIM_Base_Start_IT(&htim2);
 8000afe:	4824      	ldr	r0, [pc, #144]	; (8000b90 <main+0x144>)
 8000b00:	f002 fa58 	bl	8002fb4 <HAL_TIM_Base_Start_IT>

		  Pump(ENABLE_PUMP);
 8000b04:	2001      	movs	r0, #1
 8000b06:	f7ff fda1 	bl	800064c <Pump>
		  for(i = 0; i <= cnt; i++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	e018      	b.n	8000b42 <main+0xf6>
		  {
			  ConvertStepsAndCommand(Package_Data[i], &steps, &command);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4a19      	ldr	r2, [pc, #100]	; (8000b7c <main+0x130>)
 8000b16:	4413      	add	r3, r2
 8000b18:	1cfa      	adds	r2, r7, #3
 8000b1a:	4639      	mov	r1, r7
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fe83 	bl	8000828 <ConvertStepsAndCommand>
			  printf("command = %x, steps = %d\n", command, steps);
 8000b22:	78fb      	ldrb	r3, [r7, #3]
 8000b24:	4619      	mov	r1, r3
 8000b26:	883b      	ldrh	r3, [r7, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	481a      	ldr	r0, [pc, #104]	; (8000b94 <main+0x148>)
 8000b2c:	f004 f914 	bl	8004d58 <iprintf>
			  CommandHandler(steps, command);
 8000b30:	883b      	ldrh	r3, [r7, #0]
 8000b32:	78fa      	ldrb	r2, [r7, #3]
 8000b34:	4611      	mov	r1, r2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fe98 	bl	800086c <CommandHandler>
		  for(i = 0; i <= cnt; i++)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <main+0x12c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d9e1      	bls.n	8000b10 <main+0xc4>
		  }
		  Pump(DISABLE_PUMP);
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f7ff fd7d 	bl	800064c <Pump>

		  printf("Ready to receive!!!\n\n");
 8000b52:	4811      	ldr	r0, [pc, #68]	; (8000b98 <main+0x14c>)
 8000b54:	f004 f986 	bl	8004e64 <puts>
		  HAL_UARTEx_ReceiveToIdle_IT(&huart1, Package_Data[cnt], 2);
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <main+0x12c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <main+0x130>)
 8000b60:	4413      	add	r3, r2
 8000b62:	2202      	movs	r2, #2
 8000b64:	4619      	mov	r1, r3
 8000b66:	4802      	ldr	r0, [pc, #8]	; (8000b70 <main+0x124>)
 8000b68:	f004 f869 	bl	8004c3e <HAL_UARTEx_ReceiveToIdle_IT>
		if(HAL_GPIO_ReadPin(FLUID_LEVEL_PORT, FLUID_LEVEL_PIN) == GPIO_PIN_SET)
 8000b6c:	e7ad      	b.n	8000aca <main+0x7e>
 8000b6e:	bf00      	nop
 8000b70:	20000128 	.word	0x20000128
 8000b74:	200000dc 	.word	0x200000dc
 8000b78:	200020ec 	.word	0x200020ec
 8000b7c:	200001ac 	.word	0x200001ac
 8000b80:	48000800 	.word	0x48000800
 8000b84:	48000400 	.word	0x48000400
 8000b88:	200020f0 	.word	0x200020f0
 8000b8c:	08005e60 	.word	0x08005e60
 8000b90:	20000090 	.word	0x20000090
 8000b94:	08005e78 	.word	0x08005e78
 8000b98:	08005e94 	.word	0x08005e94

08000b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b096      	sub	sp, #88	; 0x58
 8000ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	2244      	movs	r2, #68	; 0x44
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f004 f8cc 	bl	8004d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bbe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bc2:	f000 ffbb 	bl	8001b3c <HAL_PWREx_ControlVoltageScaling>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bcc:	f000 fa1c 	bl	8001008 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bde:	2303      	movs	r3, #3
 8000be0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000be2:	2301      	movs	r3, #1
 8000be4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000be6:	2314      	movs	r3, #20
 8000be8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bea:	2307      	movs	r3, #7
 8000bec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 fff4 	bl	8001be8 <HAL_RCC_OscConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c06:	f000 f9ff 	bl	8001008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0a:	230f      	movs	r3, #15
 8000c0c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c1e:	463b      	mov	r3, r7
 8000c20:	2104      	movs	r1, #4
 8000c22:	4618      	mov	r0, r3
 8000c24:	f001 fbf4 	bl	8002410 <HAL_RCC_ClockConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c2e:	f000 f9eb 	bl	8001008 <Error_Handler>
  }
}
 8000c32:	bf00      	nop
 8000c34:	3758      	adds	r7, #88	; 0x58
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <MX_TIM2_Init+0x98>)
 8000c5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40000-1;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_TIM2_Init+0x98>)
 8000c64:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000c68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_TIM2_Init+0x98>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 600;
 8000c70:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_TIM2_Init+0x98>)
 8000c72:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000c76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <MX_TIM2_Init+0x98>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_TIM2_Init+0x98>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c84:	4813      	ldr	r0, [pc, #76]	; (8000cd4 <MX_TIM2_Init+0x98>)
 8000c86:	f002 f8f1 	bl	8002e6c <HAL_TIM_Base_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000c90:	f000 f9ba 	bl	8001008 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c9a:	f107 0310 	add.w	r3, r7, #16
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <MX_TIM2_Init+0x98>)
 8000ca2:	f002 fb29 	bl	80032f8 <HAL_TIM_ConfigClockSource>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000cac:	f000 f9ac 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_TIM2_Init+0x98>)
 8000cbe:	f002 fd0b 	bl	80036d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000cc8:	f000 f99e 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	3720      	adds	r7, #32
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000090 	.word	0x20000090

08000cd8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_TIM7_Init+0x64>)
 8000cea:	4a15      	ldr	r2, [pc, #84]	; (8000d40 <MX_TIM7_Init+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 80-1;
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <MX_TIM7_Init+0x64>)
 8000cf0:	224f      	movs	r2, #79	; 0x4f
 8000cf2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_TIM7_Init+0x64>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <MX_TIM7_Init+0x64>)
 8000cfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d00:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_TIM7_Init+0x64>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d08:	480c      	ldr	r0, [pc, #48]	; (8000d3c <MX_TIM7_Init+0x64>)
 8000d0a:	f002 f8af 	bl	8002e6c <HAL_TIM_Base_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000d14:	f000 f978 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_TIM7_Init+0x64>)
 8000d26:	f002 fcd7 	bl	80036d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000d30:	f000 f96a 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200000dc 	.word	0x200000dc
 8000d40:	40001400 	.word	0x40001400

08000d44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d4a:	4a15      	ldr	r2, [pc, #84]	; (8000da0 <MX_USART1_UART_Init+0x5c>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d88:	f002 fd2a 	bl	80037e0 <HAL_UART_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d92:	f000 f939 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000128 	.word	0x20000128
 8000da0:	40013800 	.word	0x40013800

08000da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	4b57      	ldr	r3, [pc, #348]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	4a56      	ldr	r2, [pc, #344]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc6:	4b54      	ldr	r3, [pc, #336]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd2:	4b51      	ldr	r3, [pc, #324]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	4a50      	ldr	r2, [pc, #320]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dde:	4b4e      	ldr	r3, [pc, #312]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	4b4b      	ldr	r3, [pc, #300]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	4a4a      	ldr	r2, [pc, #296]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df6:	4b48      	ldr	r3, [pc, #288]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	4b45      	ldr	r3, [pc, #276]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	4a44      	ldr	r2, [pc, #272]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000e08:	f043 0302 	orr.w	r3, r3, #2
 8000e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0e:	4b42      	ldr	r3, [pc, #264]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1a:	4b3f      	ldr	r3, [pc, #252]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	4a3e      	ldr	r2, [pc, #248]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000e20:	f043 0308 	orr.w	r3, r3, #8
 8000e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e26:	4b3c      	ldr	r3, [pc, #240]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000e32:	2200      	movs	r2, #0
 8000e34:	f643 71cc 	movw	r1, #16332	; 0x3fcc
 8000e38:	4838      	ldr	r0, [pc, #224]	; (8000f1c <MX_GPIO_Init+0x178>)
 8000e3a:	f000 fe3f 	bl	8001abc <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f248 11f0 	movw	r1, #33264	; 0x81f0
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e48:	f000 fe38 	bl	8001abc <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f24e 4177 	movw	r1, #58487	; 0xe477
 8000e52:	4833      	ldr	r0, [pc, #204]	; (8000f20 <MX_GPIO_Init+0x17c>)
 8000e54:	f000 fe32 	bl	8001abc <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	4831      	ldr	r0, [pc, #196]	; (8000f24 <MX_GPIO_Init+0x180>)
 8000e5e:	f000 fe2d 	bl	8001abc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000e62:	f643 73cc 	movw	r3, #16332	; 0x3fcc
 8000e66:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4828      	ldr	r0, [pc, #160]	; (8000f1c <MX_GPIO_Init+0x178>)
 8000e7c:	f000 fc8c 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000e80:	f248 13f0 	movw	r3, #33264	; 0x81f0
 8000e84:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9c:	f000 fc7c 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB13 PB14 PB15 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000ea0:	f24e 4377 	movw	r3, #58487	; 0xe477
 8000ea4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4819      	ldr	r0, [pc, #100]	; (8000f20 <MX_GPIO_Init+0x17c>)
 8000eba:	f000 fc6d 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ebe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed6:	f000 fc5f 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eda:	2304      	movs	r3, #4
 8000edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <MX_GPIO_Init+0x180>)
 8000ef2:	f000 fc51 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_GPIO_Init+0x17c>)
 8000f0c:	f000 fc44 	bl	8001798 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f10:	bf00      	nop
 8000f12:	3728      	adds	r7, #40	; 0x28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	48000800 	.word	0x48000800
 8000f20:	48000400 	.word	0x48000400
 8000f24:	48000c00 	.word	0x48000c00

08000f28 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	807b      	strh	r3, [r7, #2]
	 if (huart == &huart1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a21      	ldr	r2, [pc, #132]	; (8000fbc <HAL_UARTEx_RxEventCallback+0x94>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d13b      	bne.n	8000fb4 <HAL_UARTEx_RxEventCallback+0x8c>
	 {
		 HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2108      	movs	r1, #8
 8000f40:	481f      	ldr	r0, [pc, #124]	; (8000fc0 <HAL_UARTEx_RxEventCallback+0x98>)
 8000f42:	f000 fdbb 	bl	8001abc <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2104      	movs	r1, #4
 8000f4a:	481d      	ldr	r0, [pc, #116]	; (8000fc0 <HAL_UARTEx_RxEventCallback+0x98>)
 8000f4c:	f000 fdb6 	bl	8001abc <HAL_GPIO_WritePin>

		 if(Package_Data[cnt][0] == 0x0F && Package_Data[cnt][1] == 0x0F)
 8000f50:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a1c      	ldr	r2, [pc, #112]	; (8000fc8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000f56:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000f5a:	2b0f      	cmp	r3, #15
 8000f5c:	d118      	bne.n	8000f90 <HAL_UARTEx_RxEventCallback+0x68>
 8000f5e:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a19      	ldr	r2, [pc, #100]	; (8000fc8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	4413      	add	r3, r2
 8000f68:	785b      	ldrb	r3, [r3, #1]
 8000f6a:	2b0f      	cmp	r3, #15
 8000f6c:	d110      	bne.n	8000f90 <HAL_UARTEx_RxEventCallback+0x68>
		 {
			 printf("The END!!!\n");
 8000f6e:	4817      	ldr	r0, [pc, #92]	; (8000fcc <HAL_UARTEx_RxEventCallback+0xa4>)
 8000f70:	f003 ff78 	bl	8004e64 <puts>
			 accessFlag = 1;
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2108      	movs	r1, #8
 8000f7e:	4810      	ldr	r0, [pc, #64]	; (8000fc0 <HAL_UARTEx_RxEventCallback+0x98>)
 8000f80:	f000 fd9c 	bl	8001abc <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2104      	movs	r1, #4
 8000f88:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <HAL_UARTEx_RxEventCallback+0x98>)
 8000f8a:	f000 fd97 	bl	8001abc <HAL_GPIO_WritePin>
		 {
			 printf("In process!!!\n");
			 HAL_UARTEx_ReceiveToIdle_IT(&huart1, Package_Data[++cnt], 2);
		 }
	 }
}
 8000f8e:	e011      	b.n	8000fb4 <HAL_UARTEx_RxEventCallback+0x8c>
			 printf("In process!!!\n");
 8000f90:	4810      	ldr	r0, [pc, #64]	; (8000fd4 <HAL_UARTEx_RxEventCallback+0xac>)
 8000f92:	f003 ff67 	bl	8004e64 <puts>
			 HAL_UARTEx_ReceiveToIdle_IT(&huart1, Package_Data[++cnt], 2);
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	4a09      	ldr	r2, [pc, #36]	; (8000fc4 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000fa8:	4413      	add	r3, r2
 8000faa:	2202      	movs	r2, #2
 8000fac:	4619      	mov	r1, r3
 8000fae:	4803      	ldr	r0, [pc, #12]	; (8000fbc <HAL_UARTEx_RxEventCallback+0x94>)
 8000fb0:	f003 fe45 	bl	8004c3e <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000128 	.word	0x20000128
 8000fc0:	48000800 	.word	0x48000800
 8000fc4:	200020ec 	.word	0x200020ec
 8000fc8:	200001ac 	.word	0x200001ac
 8000fcc:	08005eac 	.word	0x08005eac
 8000fd0:	200020f0 	.word	0x200020f0
 8000fd4:	08005eb8 	.word	0x08005eb8

08000fd8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
    if (htim == &htim2)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a07      	ldr	r2, [pc, #28]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d107      	bne.n	8000ff8 <HAL_TIM_PeriodElapsedCallback+0x20>
    {
		HAL_GPIO_TogglePin(LED_GREEN_PORT, LED_GREEN_PIN);
 8000fe8:	2104      	movs	r1, #4
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000fec:	f000 fd7e 	bl	8001aec <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_RED_PORT, LED_RED_PIN);
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	4804      	ldr	r0, [pc, #16]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ff4:	f000 fd7a 	bl	8001aec <HAL_GPIO_TogglePin>
    }
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000090 	.word	0x20000090
 8001004:	48000800 	.word	0x48000800

08001008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001010:	e7fe      	b.n	8001010 <Error_Handler+0x8>
	...

08001014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <HAL_MspInit+0x44>)
 800101c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101e:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <HAL_MspInit+0x44>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6613      	str	r3, [r2, #96]	; 0x60
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <HAL_MspInit+0x44>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_MspInit+0x44>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <HAL_MspInit+0x44>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103c:	6593      	str	r3, [r2, #88]	; 0x58
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_MspInit+0x44>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000

0800105c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800106c:	d114      	bne.n	8001098 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <HAL_TIM_Base_MspInit+0x68>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	4a14      	ldr	r2, [pc, #80]	; (80010c4 <HAL_TIM_Base_MspInit+0x68>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6593      	str	r3, [r2, #88]	; 0x58
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_TIM_Base_MspInit+0x68>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	201c      	movs	r0, #28
 800108c:	f000 facf 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001090:	201c      	movs	r0, #28
 8001092:	f000 fae8 	bl	8001666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001096:	e010      	b.n	80010ba <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <HAL_TIM_Base_MspInit+0x6c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d10b      	bne.n	80010ba <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HAL_TIM_Base_MspInit+0x68>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <HAL_TIM_Base_MspInit+0x68>)
 80010a8:	f043 0320 	orr.w	r3, r3, #32
 80010ac:	6593      	str	r3, [r2, #88]	; 0x58
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <HAL_TIM_Base_MspInit+0x68>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	f003 0320 	and.w	r3, r3, #32
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40001400 	.word	0x40001400

080010cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0a0      	sub	sp, #128	; 0x80
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	225c      	movs	r2, #92	; 0x5c
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f003 fe2b 	bl	8004d48 <memset>
  if(huart->Instance==USART1)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a23      	ldr	r2, [pc, #140]	; (8001184 <HAL_UART_MspInit+0xb8>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d13f      	bne.n	800117c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001100:	2300      	movs	r3, #0
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	4618      	mov	r0, r3
 800110a:	f001 fba5 	bl	8002858 <HAL_RCCEx_PeriphCLKConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001114:	f7ff ff78 	bl	8001008 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001118:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <HAL_UART_MspInit+0xbc>)
 800111a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111c:	4a1a      	ldr	r2, [pc, #104]	; (8001188 <HAL_UART_MspInit+0xbc>)
 800111e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001122:	6613      	str	r3, [r2, #96]	; 0x60
 8001124:	4b18      	ldr	r3, [pc, #96]	; (8001188 <HAL_UART_MspInit+0xbc>)
 8001126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <HAL_UART_MspInit+0xbc>)
 8001132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001134:	4a14      	ldr	r2, [pc, #80]	; (8001188 <HAL_UART_MspInit+0xbc>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_UART_MspInit+0xbc>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001148:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800114c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800115a:	2307      	movs	r3, #7
 800115c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001162:	4619      	mov	r1, r3
 8001164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001168:	f000 fb16 	bl	8001798 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	2025      	movs	r0, #37	; 0x25
 8001172:	f000 fa5c 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001176:	2025      	movs	r0, #37	; 0x25
 8001178:	f000 fa75 	bl	8001666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800117c:	bf00      	nop
 800117e:	3780      	adds	r7, #128	; 0x80
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40013800 	.word	0x40013800
 8001188:	40021000 	.word	0x40021000

0800118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <NMI_Handler+0x4>

08001192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <HardFault_Handler+0x4>

08001198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <MemManage_Handler+0x4>

0800119e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <UsageFault_Handler+0x4>

080011aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d8:	f000 f92e 	bl	8001438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}

080011e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <TIM2_IRQHandler+0x10>)
 80011e6:	f001 ff68 	bl	80030ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000090 	.word	0x20000090

080011f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <USART1_IRQHandler+0x10>)
 80011fa:	f002 fb3f 	bl	800387c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000128 	.word	0x20000128

08001208 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	e00a      	b.n	8001230 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800121a:	f3af 8000 	nop.w
 800121e:	4601      	mov	r1, r0
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	60ba      	str	r2, [r7, #8]
 8001226:	b2ca      	uxtb	r2, r1
 8001228:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	3301      	adds	r3, #1
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	429a      	cmp	r2, r3
 8001236:	dbf0      	blt.n	800121a <_read+0x12>
  }

  return len;
 8001238:	687b      	ldr	r3, [r7, #4]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800126a:	605a      	str	r2, [r3, #4]
  return 0;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <_isatty>:

int _isatty(int file)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b4:	4a14      	ldr	r2, [pc, #80]	; (8001308 <_sbrk+0x5c>)
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <_sbrk+0x60>)
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <_sbrk+0x64>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <_sbrk+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d207      	bcs.n	80012ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012dc:	f003 fd0a 	bl	8004cf4 <__errno>
 80012e0:	4603      	mov	r3, r0
 80012e2:	220c      	movs	r2, #12
 80012e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	e009      	b.n	8001300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f2:	4b07      	ldr	r3, [pc, #28]	; (8001310 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <_sbrk+0x64>)
 80012fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20010000 	.word	0x20010000
 800130c:	00000400 	.word	0x00000400
 8001310:	200020f4 	.word	0x200020f4
 8001314:	20002110 	.word	0x20002110

08001318 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <SystemInit+0x20>)
 800131e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <SystemInit+0x20>)
 8001324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800133c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001374 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001340:	f7ff ffea 	bl	8001318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001344:	480c      	ldr	r0, [pc, #48]	; (8001378 <LoopForever+0x6>)
  ldr r1, =_edata
 8001346:	490d      	ldr	r1, [pc, #52]	; (800137c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001348:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <LoopForever+0xe>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800134c:	e002      	b.n	8001354 <LoopCopyDataInit>

0800134e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001352:	3304      	adds	r3, #4

08001354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001358:	d3f9      	bcc.n	800134e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135a:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <LoopForever+0x12>)
  ldr r4, =_ebss
 800135c:	4c0a      	ldr	r4, [pc, #40]	; (8001388 <LoopForever+0x16>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001360:	e001      	b.n	8001366 <LoopFillZerobss>

08001362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001364:	3204      	adds	r2, #4

08001366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001368:	d3fb      	bcc.n	8001362 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136a:	f003 fcc9 	bl	8004d00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800136e:	f7ff fb6d 	bl	8000a4c <main>

08001372 <LoopForever>:

LoopForever:
    b LoopForever
 8001372:	e7fe      	b.n	8001372 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001374:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800137c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001380:	08005fb8 	.word	0x08005fb8
  ldr r2, =_sbss
 8001384:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001388:	2000210c 	.word	0x2000210c

0800138c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC1_IRQHandler>

0800138e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001398:	2003      	movs	r0, #3
 800139a:	f000 f93d 	bl	8001618 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800139e:	200f      	movs	r0, #15
 80013a0:	f000 f80e 	bl	80013c0 <HAL_InitTick>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d002      	beq.n	80013b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	71fb      	strb	r3, [r7, #7]
 80013ae:	e001      	b.n	80013b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013b0:	f7ff fe30 	bl	8001014 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013b4:	79fb      	ldrb	r3, [r7, #7]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013cc:	4b17      	ldr	r3, [pc, #92]	; (800142c <HAL_InitTick+0x6c>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d023      	beq.n	800141c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013d4:	4b16      	ldr	r3, [pc, #88]	; (8001430 <HAL_InitTick+0x70>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <HAL_InitTick+0x6c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4619      	mov	r1, r3
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f949 	bl	8001682 <HAL_SYSTICK_Config>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10f      	bne.n	8001416 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d809      	bhi.n	8001410 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f000 f913 	bl	800162e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001408:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <HAL_InitTick+0x74>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e007      	b.n	8001420 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
 8001414:	e004      	b.n	8001420 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	73fb      	strb	r3, [r7, #15]
 800141a:	e001      	b.n	8001420 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001420:	7bfb      	ldrb	r3, [r7, #15]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000008 	.word	0x20000008
 8001430:	20000000 	.word	0x20000000
 8001434:	20000004 	.word	0x20000004

08001438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_IncTick+0x20>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_IncTick+0x24>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4413      	add	r3, r2
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <HAL_IncTick+0x24>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000008 	.word	0x20000008
 800145c:	200020f8 	.word	0x200020f8

08001460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <HAL_GetTick+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	200020f8 	.word	0x200020f8

08001478 <__NVIC_SetPriorityGrouping>:
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014aa:	4a04      	ldr	r2, [pc, #16]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	60d3      	str	r3, [r2, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_GetPriorityGrouping>:
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_EnableIRQ>:
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	db0b      	blt.n	8001506 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	4907      	ldr	r1, [pc, #28]	; (8001514 <__NVIC_EnableIRQ+0x38>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	2001      	movs	r0, #1
 80014fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000e100 	.word	0xe000e100

08001518 <__NVIC_SetPriority>:
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <SysTick_Config>:
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e4:	d301      	bcc.n	80015ea <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00f      	b.n	800160a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <SysTick_Config+0x40>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f2:	210f      	movs	r1, #15
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f7ff ff8e 	bl	8001518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <SysTick_Config+0x40>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <SysTick_Config+0x40>)
 8001604:	2207      	movs	r2, #7
 8001606:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	e000e010 	.word	0xe000e010

08001618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff29 	bl	8001478 <__NVIC_SetPriorityGrouping>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001640:	f7ff ff3e 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 8001644:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	6978      	ldr	r0, [r7, #20]
 800164c:	f7ff ff8e 	bl	800156c <NVIC_EncodePriority>
 8001650:	4602      	mov	r2, r0
 8001652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff5d 	bl	8001518 <__NVIC_SetPriority>
}
 800165e:	bf00      	nop
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff31 	bl	80014dc <__NVIC_EnableIRQ>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ffa2 	bl	80015d4 <SysTick_Config>
 8001690:	4603      	mov	r3, r0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d008      	beq.n	80016c4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2204      	movs	r2, #4
 80016b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e022      	b.n	800170a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 020e 	bic.w	r2, r2, #14
 80016d2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0201 	bic.w	r2, r2, #1
 80016e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e8:	f003 021c 	and.w	r2, r3, #28
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	2101      	movs	r1, #1
 80016f2:	fa01 f202 	lsl.w	r2, r1, r2
 80016f6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001708:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d005      	beq.n	800173a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2204      	movs	r2, #4
 8001732:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
 8001738:	e029      	b.n	800178e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 020e 	bic.w	r2, r2, #14
 8001748:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0201 	bic.w	r2, r2, #1
 8001758:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f003 021c 	and.w	r2, r3, #28
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	2101      	movs	r1, #1
 8001768:	fa01 f202 	lsl.w	r2, r1, r2
 800176c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	4798      	blx	r3
    }
  }
  return status;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a6:	e154      	b.n	8001a52 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2101      	movs	r1, #1
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
 80017b4:	4013      	ands	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8146 	beq.w	8001a4c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d005      	beq.n	80017d8 <HAL_GPIO_Init+0x40>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d130      	bne.n	800183a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800180e:	2201      	movs	r2, #1
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	091b      	lsrs	r3, r3, #4
 8001824:	f003 0201 	and.w	r2, r3, #1
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	2b03      	cmp	r3, #3
 8001844:	d017      	beq.n	8001876 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d123      	bne.n	80018ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	08da      	lsrs	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3208      	adds	r2, #8
 800188a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	220f      	movs	r2, #15
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	691a      	ldr	r2, [r3, #16]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	08da      	lsrs	r2, r3, #3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3208      	adds	r2, #8
 80018c4:	6939      	ldr	r1, [r7, #16]
 80018c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0203 	and.w	r2, r3, #3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 80a0 	beq.w	8001a4c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190c:	4b58      	ldr	r3, [pc, #352]	; (8001a70 <HAL_GPIO_Init+0x2d8>)
 800190e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001910:	4a57      	ldr	r2, [pc, #348]	; (8001a70 <HAL_GPIO_Init+0x2d8>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6613      	str	r3, [r2, #96]	; 0x60
 8001918:	4b55      	ldr	r3, [pc, #340]	; (8001a70 <HAL_GPIO_Init+0x2d8>)
 800191a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001924:	4a53      	ldr	r2, [pc, #332]	; (8001a74 <HAL_GPIO_Init+0x2dc>)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	089b      	lsrs	r3, r3, #2
 800192a:	3302      	adds	r3, #2
 800192c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	220f      	movs	r2, #15
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800194e:	d019      	beq.n	8001984 <HAL_GPIO_Init+0x1ec>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a49      	ldr	r2, [pc, #292]	; (8001a78 <HAL_GPIO_Init+0x2e0>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d013      	beq.n	8001980 <HAL_GPIO_Init+0x1e8>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a48      	ldr	r2, [pc, #288]	; (8001a7c <HAL_GPIO_Init+0x2e4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d00d      	beq.n	800197c <HAL_GPIO_Init+0x1e4>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a47      	ldr	r2, [pc, #284]	; (8001a80 <HAL_GPIO_Init+0x2e8>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d007      	beq.n	8001978 <HAL_GPIO_Init+0x1e0>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a46      	ldr	r2, [pc, #280]	; (8001a84 <HAL_GPIO_Init+0x2ec>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d101      	bne.n	8001974 <HAL_GPIO_Init+0x1dc>
 8001970:	2304      	movs	r3, #4
 8001972:	e008      	b.n	8001986 <HAL_GPIO_Init+0x1ee>
 8001974:	2307      	movs	r3, #7
 8001976:	e006      	b.n	8001986 <HAL_GPIO_Init+0x1ee>
 8001978:	2303      	movs	r3, #3
 800197a:	e004      	b.n	8001986 <HAL_GPIO_Init+0x1ee>
 800197c:	2302      	movs	r3, #2
 800197e:	e002      	b.n	8001986 <HAL_GPIO_Init+0x1ee>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <HAL_GPIO_Init+0x1ee>
 8001984:	2300      	movs	r3, #0
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	f002 0203 	and.w	r2, r2, #3
 800198c:	0092      	lsls	r2, r2, #2
 800198e:	4093      	lsls	r3, r2
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001996:	4937      	ldr	r1, [pc, #220]	; (8001a74 <HAL_GPIO_Init+0x2dc>)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3302      	adds	r3, #2
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019a4:	4b38      	ldr	r3, [pc, #224]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019c8:	4a2f      	ldr	r2, [pc, #188]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019ce:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019f2:	4a25      	ldr	r2, [pc, #148]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019f8:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a1c:	4a1a      	ldr	r2, [pc, #104]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a22:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a46:	4a10      	ldr	r2, [pc, #64]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f47f aea3 	bne.w	80017a8 <HAL_GPIO_Init+0x10>
  }
}
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
 8001a66:	371c      	adds	r7, #28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010000 	.word	0x40010000
 8001a78:	48000400 	.word	0x48000400
 8001a7c:	48000800 	.word	0x48000800
 8001a80:	48000c00 	.word	0x48000c00
 8001a84:	48001000 	.word	0x48001000
 8001a88:	40010400 	.word	0x40010400

08001a8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691a      	ldr	r2, [r3, #16]
 8001a9c:	887b      	ldrh	r3, [r7, #2]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d002      	beq.n	8001aaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]
 8001aa8:	e001      	b.n	8001aae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	807b      	strh	r3, [r7, #2]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001acc:	787b      	ldrb	r3, [r7, #1]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ad2:	887a      	ldrh	r2, [r7, #2]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ad8:	e002      	b.n	8001ae0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ada:	887a      	ldrh	r2, [r7, #2]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001afe:	887a      	ldrh	r2, [r7, #2]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4013      	ands	r3, r2
 8001b04:	041a      	lsls	r2, r3, #16
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	43d9      	mvns	r1, r3
 8001b0a:	887b      	ldrh	r3, [r7, #2]
 8001b0c:	400b      	ands	r3, r1
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	619a      	str	r2, [r3, #24]
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40007000 	.word	0x40007000

08001b3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b4a:	d130      	bne.n	8001bae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b4c:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b58:	d038      	beq.n	8001bcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b5a:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b62:	4a1e      	ldr	r2, [pc, #120]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b6a:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2232      	movs	r2, #50	; 0x32
 8001b70:	fb02 f303 	mul.w	r3, r2, r3
 8001b74:	4a1b      	ldr	r2, [pc, #108]	; (8001be4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b76:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7a:	0c9b      	lsrs	r3, r3, #18
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b80:	e002      	b.n	8001b88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	3b01      	subs	r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b94:	d102      	bne.n	8001b9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f2      	bne.n	8001b82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba8:	d110      	bne.n	8001bcc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e00f      	b.n	8001bce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bba:	d007      	beq.n	8001bcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bc4:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40007000 	.word	0x40007000
 8001be0:	20000000 	.word	0x20000000
 8001be4:	431bde83 	.word	0x431bde83

08001be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d102      	bne.n	8001bfc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	f000 bc02 	b.w	8002400 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bfc:	4b96      	ldr	r3, [pc, #600]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c06:	4b94      	ldr	r3, [pc, #592]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0310 	and.w	r3, r3, #16
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 80e4 	beq.w	8001de6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d007      	beq.n	8001c34 <HAL_RCC_OscConfig+0x4c>
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	f040 808b 	bne.w	8001d42 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	f040 8087 	bne.w	8001d42 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c34:	4b88      	ldr	r3, [pc, #544]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_OscConfig+0x64>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e3d9      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1a      	ldr	r2, [r3, #32]
 8001c50:	4b81      	ldr	r3, [pc, #516]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d004      	beq.n	8001c66 <HAL_RCC_OscConfig+0x7e>
 8001c5c:	4b7e      	ldr	r3, [pc, #504]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c64:	e005      	b.n	8001c72 <HAL_RCC_OscConfig+0x8a>
 8001c66:	4b7c      	ldr	r3, [pc, #496]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d223      	bcs.n	8001cbe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 fd8c 	bl	8002798 <RCC_SetFlashLatencyFromMSIRange>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e3ba      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c8a:	4b73      	ldr	r3, [pc, #460]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a72      	ldr	r2, [pc, #456]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001c90:	f043 0308 	orr.w	r3, r3, #8
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	4b70      	ldr	r3, [pc, #448]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	496d      	ldr	r1, [pc, #436]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ca8:	4b6b      	ldr	r3, [pc, #428]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	021b      	lsls	r3, r3, #8
 8001cb6:	4968      	ldr	r1, [pc, #416]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]
 8001cbc:	e025      	b.n	8001d0a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cbe:	4b66      	ldr	r3, [pc, #408]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a65      	ldr	r2, [pc, #404]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001cc4:	f043 0308 	orr.w	r3, r3, #8
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	4b63      	ldr	r3, [pc, #396]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	4960      	ldr	r1, [pc, #384]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cdc:	4b5e      	ldr	r3, [pc, #376]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	495b      	ldr	r1, [pc, #364]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d109      	bne.n	8001d0a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fd4c 	bl	8002798 <RCC_SetFlashLatencyFromMSIRange>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e37a      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d0a:	f000 fc81 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	4b51      	ldr	r3, [pc, #324]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	091b      	lsrs	r3, r3, #4
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	4950      	ldr	r1, [pc, #320]	; (8001e5c <HAL_RCC_OscConfig+0x274>)
 8001d1c:	5ccb      	ldrb	r3, [r1, r3]
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	fa22 f303 	lsr.w	r3, r2, r3
 8001d26:	4a4e      	ldr	r2, [pc, #312]	; (8001e60 <HAL_RCC_OscConfig+0x278>)
 8001d28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d2a:	4b4e      	ldr	r3, [pc, #312]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fb46 	bl	80013c0 <HAL_InitTick>
 8001d34:	4603      	mov	r3, r0
 8001d36:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d052      	beq.n	8001de4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	e35e      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d032      	beq.n	8001db0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d4a:	4b43      	ldr	r3, [pc, #268]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a42      	ldr	r2, [pc, #264]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d56:	f7ff fb83 	bl	8001460 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d5e:	f7ff fb7f 	bl	8001460 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e347      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d70:	4b39      	ldr	r3, [pc, #228]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d7c:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a35      	ldr	r2, [pc, #212]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001d82:	f043 0308 	orr.w	r3, r3, #8
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	4b33      	ldr	r3, [pc, #204]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	4930      	ldr	r1, [pc, #192]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d9a:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	021b      	lsls	r3, r3, #8
 8001da8:	492b      	ldr	r1, [pc, #172]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	604b      	str	r3, [r1, #4]
 8001dae:	e01a      	b.n	8001de6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001db0:	4b29      	ldr	r3, [pc, #164]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a28      	ldr	r2, [pc, #160]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001db6:	f023 0301 	bic.w	r3, r3, #1
 8001dba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fb50 	bl	8001460 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dc4:	f7ff fb4c 	bl	8001460 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e314      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dd6:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x1dc>
 8001de2:	e000      	b.n	8001de6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001de4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d073      	beq.n	8001eda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_OscConfig+0x21c>
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d10e      	bne.n	8001e1c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d10b      	bne.n	8001e1c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d063      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x2f0>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d15f      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e2f1      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e24:	d106      	bne.n	8001e34 <HAL_RCC_OscConfig+0x24c>
 8001e26:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e025      	b.n	8001e80 <HAL_RCC_OscConfig+0x298>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e3c:	d114      	bne.n	8001e68 <HAL_RCC_OscConfig+0x280>
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a02      	ldr	r2, [pc, #8]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e013      	b.n	8001e80 <HAL_RCC_OscConfig+0x298>
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	08005ec8 	.word	0x08005ec8
 8001e60:	20000000 	.word	0x20000000
 8001e64:	20000004 	.word	0x20000004
 8001e68:	4ba0      	ldr	r3, [pc, #640]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a9f      	ldr	r2, [pc, #636]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8001e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	4b9d      	ldr	r3, [pc, #628]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a9c      	ldr	r2, [pc, #624]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8001e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d013      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7ff faea 	bl	8001460 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e90:	f7ff fae6 	bl	8001460 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b64      	cmp	r3, #100	; 0x64
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e2ae      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ea2:	4b92      	ldr	r3, [pc, #584]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x2a8>
 8001eae:	e014      	b.n	8001eda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fad6 	bl	8001460 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb8:	f7ff fad2 	bl	8001460 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e29a      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eca:	4b88      	ldr	r3, [pc, #544]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x2d0>
 8001ed6:	e000      	b.n	8001eda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d060      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d005      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x310>
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2b0c      	cmp	r3, #12
 8001ef0:	d119      	bne.n	8001f26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d116      	bne.n	8001f26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ef8:	4b7c      	ldr	r3, [pc, #496]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <HAL_RCC_OscConfig+0x328>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e277      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f10:	4b76      	ldr	r3, [pc, #472]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	061b      	lsls	r3, r3, #24
 8001f1e:	4973      	ldr	r1, [pc, #460]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f24:	e040      	b.n	8001fa8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d023      	beq.n	8001f76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f2e:	4b6f      	ldr	r3, [pc, #444]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a6e      	ldr	r2, [pc, #440]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8001f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3a:	f7ff fa91 	bl	8001460 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f42:	f7ff fa8d 	bl	8001460 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e255      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f54:	4b65      	ldr	r3, [pc, #404]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f60:	4b62      	ldr	r3, [pc, #392]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	061b      	lsls	r3, r3, #24
 8001f6e:	495f      	ldr	r1, [pc, #380]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]
 8001f74:	e018      	b.n	8001fa8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f76:	4b5d      	ldr	r3, [pc, #372]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a5c      	ldr	r2, [pc, #368]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8001f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7ff fa6d 	bl	8001460 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8a:	f7ff fa69 	bl	8001460 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e231      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f9c:	4b53      	ldr	r3, [pc, #332]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f0      	bne.n	8001f8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d03c      	beq.n	800202e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d01c      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fbc:	4b4b      	ldr	r3, [pc, #300]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8001fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc2:	4a4a      	ldr	r2, [pc, #296]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fcc:	f7ff fa48 	bl	8001460 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd4:	f7ff fa44 	bl	8001460 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e20c      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fe6:	4b41      	ldr	r3, [pc, #260]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8001fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0ef      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x3ec>
 8001ff4:	e01b      	b.n	800202e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8001ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ffc:	4a3b      	ldr	r2, [pc, #236]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8001ffe:	f023 0301 	bic.w	r3, r3, #1
 8002002:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002006:	f7ff fa2b 	bl	8001460 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200e:	f7ff fa27 	bl	8001460 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e1ef      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002020:	4b32      	ldr	r3, [pc, #200]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8002022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1ef      	bne.n	800200e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 80a6 	beq.w	8002188 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800203c:	2300      	movs	r3, #0
 800203e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002040:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8002042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10d      	bne.n	8002068 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800204c:	4b27      	ldr	r3, [pc, #156]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002050:	4a26      	ldr	r2, [pc, #152]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 8002052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002056:	6593      	str	r3, [r2, #88]	; 0x58
 8002058:	4b24      	ldr	r3, [pc, #144]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002064:	2301      	movs	r3, #1
 8002066:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002068:	4b21      	ldr	r3, [pc, #132]	; (80020f0 <HAL_RCC_OscConfig+0x508>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d118      	bne.n	80020a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002074:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <HAL_RCC_OscConfig+0x508>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a1d      	ldr	r2, [pc, #116]	; (80020f0 <HAL_RCC_OscConfig+0x508>)
 800207a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800207e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002080:	f7ff f9ee 	bl	8001460 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002088:	f7ff f9ea 	bl	8001460 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e1b2      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <HAL_RCC_OscConfig+0x508>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d108      	bne.n	80020c0 <HAL_RCC_OscConfig+0x4d8>
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 80020b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b4:	4a0d      	ldr	r2, [pc, #52]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020be:	e029      	b.n	8002114 <HAL_RCC_OscConfig+0x52c>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d115      	bne.n	80020f4 <HAL_RCC_OscConfig+0x50c>
 80020c8:	4b08      	ldr	r3, [pc, #32]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 80020ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ce:	4a07      	ldr	r2, [pc, #28]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020d8:	4b04      	ldr	r3, [pc, #16]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020de:	4a03      	ldr	r2, [pc, #12]	; (80020ec <HAL_RCC_OscConfig+0x504>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020e8:	e014      	b.n	8002114 <HAL_RCC_OscConfig+0x52c>
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40007000 	.word	0x40007000
 80020f4:	4b9a      	ldr	r3, [pc, #616]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fa:	4a99      	ldr	r2, [pc, #612]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002104:	4b96      	ldr	r3, [pc, #600]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210a:	4a95      	ldr	r2, [pc, #596]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 800210c:	f023 0304 	bic.w	r3, r3, #4
 8002110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d016      	beq.n	800214a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211c:	f7ff f9a0 	bl	8001460 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002122:	e00a      	b.n	800213a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002124:	f7ff f99c 	bl	8001460 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e162      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800213a:	4b89      	ldr	r3, [pc, #548]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 800213c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0ed      	beq.n	8002124 <HAL_RCC_OscConfig+0x53c>
 8002148:	e015      	b.n	8002176 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214a:	f7ff f989 	bl	8001460 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002150:	e00a      	b.n	8002168 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002152:	f7ff f985 	bl	8001460 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002160:	4293      	cmp	r3, r2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e14b      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002168:	4b7d      	ldr	r3, [pc, #500]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 800216a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1ed      	bne.n	8002152 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002176:	7ffb      	ldrb	r3, [r7, #31]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d105      	bne.n	8002188 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800217c:	4b78      	ldr	r3, [pc, #480]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	4a77      	ldr	r2, [pc, #476]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 8002182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002186:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0320 	and.w	r3, r3, #32
 8002190:	2b00      	cmp	r3, #0
 8002192:	d03c      	beq.n	800220e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	2b00      	cmp	r3, #0
 800219a:	d01c      	beq.n	80021d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800219c:	4b70      	ldr	r3, [pc, #448]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 800219e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021a2:	4a6f      	ldr	r2, [pc, #444]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ac:	f7ff f958 	bl	8001460 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021b4:	f7ff f954 	bl	8001460 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e11c      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021c6:	4b66      	ldr	r3, [pc, #408]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 80021c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0ef      	beq.n	80021b4 <HAL_RCC_OscConfig+0x5cc>
 80021d4:	e01b      	b.n	800220e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021d6:	4b62      	ldr	r3, [pc, #392]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 80021d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021dc:	4a60      	ldr	r2, [pc, #384]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 80021de:	f023 0301 	bic.w	r3, r3, #1
 80021e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e6:	f7ff f93b 	bl	8001460 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021ee:	f7ff f937 	bl	8001460 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e0ff      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002200:	4b57      	ldr	r3, [pc, #348]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 8002202:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1ef      	bne.n	80021ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 80f3 	beq.w	80023fe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	2b02      	cmp	r3, #2
 800221e:	f040 80c9 	bne.w	80023b4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002222:	4b4f      	ldr	r3, [pc, #316]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f003 0203 	and.w	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002232:	429a      	cmp	r2, r3
 8002234:	d12c      	bne.n	8002290 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	3b01      	subs	r3, #1
 8002242:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002244:	429a      	cmp	r2, r3
 8002246:	d123      	bne.n	8002290 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002252:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002254:	429a      	cmp	r2, r3
 8002256:	d11b      	bne.n	8002290 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002262:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d113      	bne.n	8002290 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002272:	085b      	lsrs	r3, r3, #1
 8002274:	3b01      	subs	r3, #1
 8002276:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002278:	429a      	cmp	r2, r3
 800227a:	d109      	bne.n	8002290 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	085b      	lsrs	r3, r3, #1
 8002288:	3b01      	subs	r3, #1
 800228a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d06b      	beq.n	8002368 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	2b0c      	cmp	r3, #12
 8002294:	d062      	beq.n	800235c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002296:	4b32      	ldr	r3, [pc, #200]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e0ac      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022a6:	4b2e      	ldr	r3, [pc, #184]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a2d      	ldr	r2, [pc, #180]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 80022ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022b2:	f7ff f8d5 	bl	8001460 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ba:	f7ff f8d1 	bl	8001460 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e099      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022cc:	4b24      	ldr	r3, [pc, #144]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1f0      	bne.n	80022ba <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022d8:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	4b21      	ldr	r3, [pc, #132]	; (8002364 <HAL_RCC_OscConfig+0x77c>)
 80022de:	4013      	ands	r3, r2
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022e8:	3a01      	subs	r2, #1
 80022ea:	0112      	lsls	r2, r2, #4
 80022ec:	4311      	orrs	r1, r2
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022f2:	0212      	lsls	r2, r2, #8
 80022f4:	4311      	orrs	r1, r2
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022fa:	0852      	lsrs	r2, r2, #1
 80022fc:	3a01      	subs	r2, #1
 80022fe:	0552      	lsls	r2, r2, #21
 8002300:	4311      	orrs	r1, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002306:	0852      	lsrs	r2, r2, #1
 8002308:	3a01      	subs	r2, #1
 800230a:	0652      	lsls	r2, r2, #25
 800230c:	4311      	orrs	r1, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002312:	06d2      	lsls	r2, r2, #27
 8002314:	430a      	orrs	r2, r1
 8002316:	4912      	ldr	r1, [pc, #72]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 8002318:	4313      	orrs	r3, r2
 800231a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800231c:	4b10      	ldr	r3, [pc, #64]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0f      	ldr	r2, [pc, #60]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 8002322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002326:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002328:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4a0c      	ldr	r2, [pc, #48]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 800232e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002332:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002334:	f7ff f894 	bl	8001460 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233c:	f7ff f890 	bl	8001460 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e058      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234e:	4b04      	ldr	r3, [pc, #16]	; (8002360 <HAL_RCC_OscConfig+0x778>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800235a:	e050      	b.n	80023fe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e04f      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
 8002360:	40021000 	.word	0x40021000
 8002364:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002368:	4b27      	ldr	r3, [pc, #156]	; (8002408 <HAL_RCC_OscConfig+0x820>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d144      	bne.n	80023fe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002374:	4b24      	ldr	r3, [pc, #144]	; (8002408 <HAL_RCC_OscConfig+0x820>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a23      	ldr	r2, [pc, #140]	; (8002408 <HAL_RCC_OscConfig+0x820>)
 800237a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800237e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002380:	4b21      	ldr	r3, [pc, #132]	; (8002408 <HAL_RCC_OscConfig+0x820>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a20      	ldr	r2, [pc, #128]	; (8002408 <HAL_RCC_OscConfig+0x820>)
 8002386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800238a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800238c:	f7ff f868 	bl	8001460 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002394:	f7ff f864 	bl	8001460 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e02c      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a6:	4b18      	ldr	r3, [pc, #96]	; (8002408 <HAL_RCC_OscConfig+0x820>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x7ac>
 80023b2:	e024      	b.n	80023fe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	2b0c      	cmp	r3, #12
 80023b8:	d01f      	beq.n	80023fa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ba:	4b13      	ldr	r3, [pc, #76]	; (8002408 <HAL_RCC_OscConfig+0x820>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a12      	ldr	r2, [pc, #72]	; (8002408 <HAL_RCC_OscConfig+0x820>)
 80023c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7ff f84b 	bl	8001460 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ce:	f7ff f847 	bl	8001460 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e00f      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e0:	4b09      	ldr	r3, [pc, #36]	; (8002408 <HAL_RCC_OscConfig+0x820>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f0      	bne.n	80023ce <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_RCC_OscConfig+0x820>)
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	4905      	ldr	r1, [pc, #20]	; (8002408 <HAL_RCC_OscConfig+0x820>)
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_RCC_OscConfig+0x824>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	60cb      	str	r3, [r1, #12]
 80023f8:	e001      	b.n	80023fe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3720      	adds	r7, #32
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40021000 	.word	0x40021000
 800240c:	feeefffc 	.word	0xfeeefffc

08002410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0e7      	b.n	80025f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002424:	4b75      	ldr	r3, [pc, #468]	; (80025fc <HAL_RCC_ClockConfig+0x1ec>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d910      	bls.n	8002454 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002432:	4b72      	ldr	r3, [pc, #456]	; (80025fc <HAL_RCC_ClockConfig+0x1ec>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 0207 	bic.w	r2, r3, #7
 800243a:	4970      	ldr	r1, [pc, #448]	; (80025fc <HAL_RCC_ClockConfig+0x1ec>)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002442:	4b6e      	ldr	r3, [pc, #440]	; (80025fc <HAL_RCC_ClockConfig+0x1ec>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0cf      	b.n	80025f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d010      	beq.n	8002482 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	4b66      	ldr	r3, [pc, #408]	; (8002600 <HAL_RCC_ClockConfig+0x1f0>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800246c:	429a      	cmp	r2, r3
 800246e:	d908      	bls.n	8002482 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002470:	4b63      	ldr	r3, [pc, #396]	; (8002600 <HAL_RCC_ClockConfig+0x1f0>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4960      	ldr	r1, [pc, #384]	; (8002600 <HAL_RCC_ClockConfig+0x1f0>)
 800247e:	4313      	orrs	r3, r2
 8002480:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d04c      	beq.n	8002528 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b03      	cmp	r3, #3
 8002494:	d107      	bne.n	80024a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002496:	4b5a      	ldr	r3, [pc, #360]	; (8002600 <HAL_RCC_ClockConfig+0x1f0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d121      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e0a6      	b.n	80025f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d107      	bne.n	80024be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ae:	4b54      	ldr	r3, [pc, #336]	; (8002600 <HAL_RCC_ClockConfig+0x1f0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d115      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e09a      	b.n	80025f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d107      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024c6:	4b4e      	ldr	r3, [pc, #312]	; (8002600 <HAL_RCC_ClockConfig+0x1f0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d109      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e08e      	b.n	80025f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024d6:	4b4a      	ldr	r3, [pc, #296]	; (8002600 <HAL_RCC_ClockConfig+0x1f0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e086      	b.n	80025f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024e6:	4b46      	ldr	r3, [pc, #280]	; (8002600 <HAL_RCC_ClockConfig+0x1f0>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f023 0203 	bic.w	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4943      	ldr	r1, [pc, #268]	; (8002600 <HAL_RCC_ClockConfig+0x1f0>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f8:	f7fe ffb2 	bl	8001460 <HAL_GetTick>
 80024fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fe:	e00a      	b.n	8002516 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002500:	f7fe ffae 	bl	8001460 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	; 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e06e      	b.n	80025f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002516:	4b3a      	ldr	r3, [pc, #232]	; (8002600 <HAL_RCC_ClockConfig+0x1f0>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 020c 	and.w	r2, r3, #12
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	429a      	cmp	r2, r3
 8002526:	d1eb      	bne.n	8002500 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d010      	beq.n	8002556 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	4b31      	ldr	r3, [pc, #196]	; (8002600 <HAL_RCC_ClockConfig+0x1f0>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002540:	429a      	cmp	r2, r3
 8002542:	d208      	bcs.n	8002556 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002544:	4b2e      	ldr	r3, [pc, #184]	; (8002600 <HAL_RCC_ClockConfig+0x1f0>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	492b      	ldr	r1, [pc, #172]	; (8002600 <HAL_RCC_ClockConfig+0x1f0>)
 8002552:	4313      	orrs	r3, r2
 8002554:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002556:	4b29      	ldr	r3, [pc, #164]	; (80025fc <HAL_RCC_ClockConfig+0x1ec>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d210      	bcs.n	8002586 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002564:	4b25      	ldr	r3, [pc, #148]	; (80025fc <HAL_RCC_ClockConfig+0x1ec>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f023 0207 	bic.w	r2, r3, #7
 800256c:	4923      	ldr	r1, [pc, #140]	; (80025fc <HAL_RCC_ClockConfig+0x1ec>)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	4313      	orrs	r3, r2
 8002572:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002574:	4b21      	ldr	r3, [pc, #132]	; (80025fc <HAL_RCC_ClockConfig+0x1ec>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d001      	beq.n	8002586 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e036      	b.n	80025f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b00      	cmp	r3, #0
 8002590:	d008      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002592:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <HAL_RCC_ClockConfig+0x1f0>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	4918      	ldr	r1, [pc, #96]	; (8002600 <HAL_RCC_ClockConfig+0x1f0>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d009      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025b0:	4b13      	ldr	r3, [pc, #76]	; (8002600 <HAL_RCC_ClockConfig+0x1f0>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4910      	ldr	r1, [pc, #64]	; (8002600 <HAL_RCC_ClockConfig+0x1f0>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025c4:	f000 f824 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 80025c8:	4602      	mov	r2, r0
 80025ca:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <HAL_RCC_ClockConfig+0x1f0>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	091b      	lsrs	r3, r3, #4
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	490b      	ldr	r1, [pc, #44]	; (8002604 <HAL_RCC_ClockConfig+0x1f4>)
 80025d6:	5ccb      	ldrb	r3, [r1, r3]
 80025d8:	f003 031f 	and.w	r3, r3, #31
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
 80025e0:	4a09      	ldr	r2, [pc, #36]	; (8002608 <HAL_RCC_ClockConfig+0x1f8>)
 80025e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025e4:	4b09      	ldr	r3, [pc, #36]	; (800260c <HAL_RCC_ClockConfig+0x1fc>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe fee9 	bl	80013c0 <HAL_InitTick>
 80025ee:	4603      	mov	r3, r0
 80025f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80025f2:	7afb      	ldrb	r3, [r7, #11]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40022000 	.word	0x40022000
 8002600:	40021000 	.word	0x40021000
 8002604:	08005ec8 	.word	0x08005ec8
 8002608:	20000000 	.word	0x20000000
 800260c:	20000004 	.word	0x20000004

08002610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	; 0x24
 8002614:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	2300      	movs	r3, #0
 800261c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800261e:	4b3e      	ldr	r3, [pc, #248]	; (8002718 <HAL_RCC_GetSysClockFreq+0x108>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002628:	4b3b      	ldr	r3, [pc, #236]	; (8002718 <HAL_RCC_GetSysClockFreq+0x108>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x34>
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	2b0c      	cmp	r3, #12
 800263c:	d121      	bne.n	8002682 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d11e      	bne.n	8002682 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002644:	4b34      	ldr	r3, [pc, #208]	; (8002718 <HAL_RCC_GetSysClockFreq+0x108>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d107      	bne.n	8002660 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002650:	4b31      	ldr	r3, [pc, #196]	; (8002718 <HAL_RCC_GetSysClockFreq+0x108>)
 8002652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002656:	0a1b      	lsrs	r3, r3, #8
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	e005      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002660:	4b2d      	ldr	r3, [pc, #180]	; (8002718 <HAL_RCC_GetSysClockFreq+0x108>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800266c:	4a2b      	ldr	r2, [pc, #172]	; (800271c <HAL_RCC_GetSysClockFreq+0x10c>)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002674:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10d      	bne.n	8002698 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	2b04      	cmp	r3, #4
 8002686:	d102      	bne.n	800268e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002688:	4b25      	ldr	r3, [pc, #148]	; (8002720 <HAL_RCC_GetSysClockFreq+0x110>)
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	e004      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	2b08      	cmp	r3, #8
 8002692:	d101      	bne.n	8002698 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002694:	4b23      	ldr	r3, [pc, #140]	; (8002724 <HAL_RCC_GetSysClockFreq+0x114>)
 8002696:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	2b0c      	cmp	r3, #12
 800269c:	d134      	bne.n	8002708 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800269e:	4b1e      	ldr	r3, [pc, #120]	; (8002718 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d003      	beq.n	80026b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d003      	beq.n	80026bc <HAL_RCC_GetSysClockFreq+0xac>
 80026b4:	e005      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026b6:	4b1a      	ldr	r3, [pc, #104]	; (8002720 <HAL_RCC_GetSysClockFreq+0x110>)
 80026b8:	617b      	str	r3, [r7, #20]
      break;
 80026ba:	e005      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_RCC_GetSysClockFreq+0x114>)
 80026be:	617b      	str	r3, [r7, #20]
      break;
 80026c0:	e002      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	617b      	str	r3, [r7, #20]
      break;
 80026c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026c8:	4b13      	ldr	r3, [pc, #76]	; (8002718 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	091b      	lsrs	r3, r3, #4
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	3301      	adds	r3, #1
 80026d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <HAL_RCC_GetSysClockFreq+0x108>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	0a1b      	lsrs	r3, r3, #8
 80026dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	fb03 f202 	mul.w	r2, r3, r2
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026ee:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <HAL_RCC_GetSysClockFreq+0x108>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	0e5b      	lsrs	r3, r3, #25
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	3301      	adds	r3, #1
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	fbb2 f3f3 	udiv	r3, r2, r3
 8002706:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002708:	69bb      	ldr	r3, [r7, #24]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3724      	adds	r7, #36	; 0x24
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	08005ee0 	.word	0x08005ee0
 8002720:	00f42400 	.word	0x00f42400
 8002724:	007a1200 	.word	0x007a1200

08002728 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800272c:	4b03      	ldr	r3, [pc, #12]	; (800273c <HAL_RCC_GetHCLKFreq+0x14>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20000000 	.word	0x20000000

08002740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002744:	f7ff fff0 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_RCC_GetPCLK1Freq+0x24>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4904      	ldr	r1, [pc, #16]	; (8002768 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002756:	5ccb      	ldrb	r3, [r1, r3]
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021000 	.word	0x40021000
 8002768:	08005ed8 	.word	0x08005ed8

0800276c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002770:	f7ff ffda 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002774:	4602      	mov	r2, r0
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	0adb      	lsrs	r3, r3, #11
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	4904      	ldr	r1, [pc, #16]	; (8002794 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002782:	5ccb      	ldrb	r3, [r1, r3]
 8002784:	f003 031f 	and.w	r3, r3, #31
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000
 8002794:	08005ed8 	.word	0x08005ed8

08002798 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027a0:	2300      	movs	r3, #0
 80027a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027a4:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027b0:	f7ff f9b6 	bl	8001b20 <HAL_PWREx_GetVoltageRange>
 80027b4:	6178      	str	r0, [r7, #20]
 80027b6:	e014      	b.n	80027e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027b8:	4b25      	ldr	r3, [pc, #148]	; (8002850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027bc:	4a24      	ldr	r2, [pc, #144]	; (8002850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c2:	6593      	str	r3, [r2, #88]	; 0x58
 80027c4:	4b22      	ldr	r3, [pc, #136]	; (8002850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027d0:	f7ff f9a6 	bl	8001b20 <HAL_PWREx_GetVoltageRange>
 80027d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027d6:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027da:	4a1d      	ldr	r2, [pc, #116]	; (8002850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e8:	d10b      	bne.n	8002802 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b80      	cmp	r3, #128	; 0x80
 80027ee:	d919      	bls.n	8002824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2ba0      	cmp	r3, #160	; 0xa0
 80027f4:	d902      	bls.n	80027fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027f6:	2302      	movs	r3, #2
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	e013      	b.n	8002824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027fc:	2301      	movs	r3, #1
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	e010      	b.n	8002824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b80      	cmp	r3, #128	; 0x80
 8002806:	d902      	bls.n	800280e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002808:	2303      	movs	r3, #3
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	e00a      	b.n	8002824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b80      	cmp	r3, #128	; 0x80
 8002812:	d102      	bne.n	800281a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002814:	2302      	movs	r3, #2
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	e004      	b.n	8002824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b70      	cmp	r3, #112	; 0x70
 800281e:	d101      	bne.n	8002824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002820:	2301      	movs	r3, #1
 8002822:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f023 0207 	bic.w	r2, r3, #7
 800282c:	4909      	ldr	r1, [pc, #36]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002834:	4b07      	ldr	r3, [pc, #28]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	429a      	cmp	r2, r3
 8002840:	d001      	beq.n	8002846 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000
 8002854:	40022000 	.word	0x40022000

08002858 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002860:	2300      	movs	r3, #0
 8002862:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002864:	2300      	movs	r3, #0
 8002866:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002870:	2b00      	cmp	r3, #0
 8002872:	d031      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002878:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800287c:	d01a      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800287e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002882:	d814      	bhi.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002884:	2b00      	cmp	r3, #0
 8002886:	d009      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002888:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800288c:	d10f      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800288e:	4b5d      	ldr	r3, [pc, #372]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	4a5c      	ldr	r2, [pc, #368]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002898:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800289a:	e00c      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3304      	adds	r3, #4
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f9f0 	bl	8002c88 <RCCEx_PLLSAI1_Config>
 80028a8:	4603      	mov	r3, r0
 80028aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028ac:	e003      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	74fb      	strb	r3, [r7, #19]
      break;
 80028b2:	e000      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80028b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028b6:	7cfb      	ldrb	r3, [r7, #19]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10b      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028bc:	4b51      	ldr	r3, [pc, #324]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	494e      	ldr	r1, [pc, #312]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028d2:	e001      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d4:	7cfb      	ldrb	r3, [r7, #19]
 80028d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 809e 	beq.w	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e6:	2300      	movs	r3, #0
 80028e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028ea:	4b46      	ldr	r3, [pc, #280]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80028fa:	2300      	movs	r3, #0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00d      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002900:	4b40      	ldr	r3, [pc, #256]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002904:	4a3f      	ldr	r2, [pc, #252]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290a:	6593      	str	r3, [r2, #88]	; 0x58
 800290c:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800290e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002918:	2301      	movs	r3, #1
 800291a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800291c:	4b3a      	ldr	r3, [pc, #232]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a39      	ldr	r2, [pc, #228]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002926:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002928:	f7fe fd9a 	bl	8001460 <HAL_GetTick>
 800292c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800292e:	e009      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002930:	f7fe fd96 	bl	8001460 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d902      	bls.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	74fb      	strb	r3, [r7, #19]
        break;
 8002942:	e005      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002944:	4b30      	ldr	r3, [pc, #192]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0ef      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002950:	7cfb      	ldrb	r3, [r7, #19]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d15a      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002956:	4b2b      	ldr	r3, [pc, #172]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002960:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d01e      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	429a      	cmp	r2, r3
 8002970:	d019      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800297c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800297e:	4b21      	ldr	r3, [pc, #132]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002984:	4a1f      	ldr	r2, [pc, #124]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800298e:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002994:	4a1b      	ldr	r2, [pc, #108]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800299e:	4a19      	ldr	r2, [pc, #100]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d016      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7fe fd56 	bl	8001460 <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029b6:	e00b      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7fe fd52 	bl	8001460 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d902      	bls.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	74fb      	strb	r3, [r7, #19]
            break;
 80029ce:	e006      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0ec      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80029de:	7cfb      	ldrb	r3, [r7, #19]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10b      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029e4:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f2:	4904      	ldr	r1, [pc, #16]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029fa:	e009      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029fc:	7cfb      	ldrb	r3, [r7, #19]
 80029fe:	74bb      	strb	r3, [r7, #18]
 8002a00:	e006      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a0c:	7cfb      	ldrb	r3, [r7, #19]
 8002a0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a10:	7c7b      	ldrb	r3, [r7, #17]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d105      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a16:	4b9b      	ldr	r3, [pc, #620]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1a:	4a9a      	ldr	r2, [pc, #616]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00a      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a2e:	4b95      	ldr	r3, [pc, #596]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a34:	f023 0203 	bic.w	r2, r3, #3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	4991      	ldr	r1, [pc, #580]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a50:	4b8c      	ldr	r3, [pc, #560]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a56:	f023 020c 	bic.w	r2, r3, #12
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	4989      	ldr	r1, [pc, #548]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a72:	4b84      	ldr	r3, [pc, #528]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	4980      	ldr	r1, [pc, #512]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0320 	and.w	r3, r3, #32
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00a      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a94:	4b7b      	ldr	r3, [pc, #492]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa2:	4978      	ldr	r1, [pc, #480]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ab6:	4b73      	ldr	r3, [pc, #460]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac4:	496f      	ldr	r1, [pc, #444]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00a      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ad8:	4b6a      	ldr	r3, [pc, #424]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ade:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	4967      	ldr	r1, [pc, #412]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002afa:	4b62      	ldr	r3, [pc, #392]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	495e      	ldr	r1, [pc, #376]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00a      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b1c:	4b59      	ldr	r3, [pc, #356]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2a:	4956      	ldr	r1, [pc, #344]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b3e:	4b51      	ldr	r3, [pc, #324]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4c:	494d      	ldr	r1, [pc, #308]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d028      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b60:	4b48      	ldr	r3, [pc, #288]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b6e:	4945      	ldr	r1, [pc, #276]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b7e:	d106      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b80:	4b40      	ldr	r3, [pc, #256]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4a3f      	ldr	r2, [pc, #252]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b8a:	60d3      	str	r3, [r2, #12]
 8002b8c:	e011      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b96:	d10c      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f872 	bl	8002c88 <RCCEx_PLLSAI1_Config>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ba8:	7cfb      	ldrb	r3, [r7, #19]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8002bae:	7cfb      	ldrb	r3, [r7, #19]
 8002bb0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d028      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bbe:	4b31      	ldr	r3, [pc, #196]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bcc:	492d      	ldr	r1, [pc, #180]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bdc:	d106      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bde:	4b29      	ldr	r3, [pc, #164]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	4a28      	ldr	r2, [pc, #160]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002be4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002be8:	60d3      	str	r3, [r2, #12]
 8002bea:	e011      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 f843 	bl	8002c88 <RCCEx_PLLSAI1_Config>
 8002c02:	4603      	mov	r3, r0
 8002c04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c06:	7cfb      	ldrb	r3, [r7, #19]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002c0c:	7cfb      	ldrb	r3, [r7, #19]
 8002c0e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d01c      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c1c:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c2a:	4916      	ldr	r1, [pc, #88]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c3a:	d10c      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	2102      	movs	r1, #2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 f820 	bl	8002c88 <RCCEx_PLLSAI1_Config>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c4c:	7cfb      	ldrb	r3, [r7, #19]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8002c52:	7cfb      	ldrb	r3, [r7, #19]
 8002c54:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c62:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c68:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c70:	4904      	ldr	r1, [pc, #16]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c78:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40021000 	.word	0x40021000

08002c88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c96:	4b74      	ldr	r3, [pc, #464]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d018      	beq.n	8002cd4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ca2:	4b71      	ldr	r3, [pc, #452]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f003 0203 	and.w	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d10d      	bne.n	8002cce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
       ||
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cba:	4b6b      	ldr	r3, [pc, #428]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
       ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d047      	beq.n	8002d5e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
 8002cd2:	e044      	b.n	8002d5e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d018      	beq.n	8002d0e <RCCEx_PLLSAI1_Config+0x86>
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d825      	bhi.n	8002d2c <RCCEx_PLLSAI1_Config+0xa4>
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d002      	beq.n	8002cea <RCCEx_PLLSAI1_Config+0x62>
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d009      	beq.n	8002cfc <RCCEx_PLLSAI1_Config+0x74>
 8002ce8:	e020      	b.n	8002d2c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cea:	4b5f      	ldr	r3, [pc, #380]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d11d      	bne.n	8002d32 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cfa:	e01a      	b.n	8002d32 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cfc:	4b5a      	ldr	r3, [pc, #360]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d116      	bne.n	8002d36 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0c:	e013      	b.n	8002d36 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d0e:	4b56      	ldr	r3, [pc, #344]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10f      	bne.n	8002d3a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d1a:	4b53      	ldr	r3, [pc, #332]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d2a:	e006      	b.n	8002d3a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d30:	e004      	b.n	8002d3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d32:	bf00      	nop
 8002d34:	e002      	b.n	8002d3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d36:	bf00      	nop
 8002d38:	e000      	b.n	8002d3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10d      	bne.n	8002d5e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d42:	4b49      	ldr	r3, [pc, #292]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6819      	ldr	r1, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	430b      	orrs	r3, r1
 8002d58:	4943      	ldr	r1, [pc, #268]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d17c      	bne.n	8002e5e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d64:	4b40      	ldr	r3, [pc, #256]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a3f      	ldr	r2, [pc, #252]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d70:	f7fe fb76 	bl	8001460 <HAL_GetTick>
 8002d74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d76:	e009      	b.n	8002d8c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d78:	f7fe fb72 	bl	8001460 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d902      	bls.n	8002d8c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	73fb      	strb	r3, [r7, #15]
        break;
 8002d8a:	e005      	b.n	8002d98 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d8c:	4b36      	ldr	r3, [pc, #216]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1ef      	bne.n	8002d78 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d15f      	bne.n	8002e5e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d110      	bne.n	8002dc6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002da4:	4b30      	ldr	r3, [pc, #192]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002dac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6892      	ldr	r2, [r2, #8]
 8002db4:	0211      	lsls	r1, r2, #8
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68d2      	ldr	r2, [r2, #12]
 8002dba:	06d2      	lsls	r2, r2, #27
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	492a      	ldr	r1, [pc, #168]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	610b      	str	r3, [r1, #16]
 8002dc4:	e027      	b.n	8002e16 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d112      	bne.n	8002df2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dcc:	4b26      	ldr	r3, [pc, #152]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002dd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6892      	ldr	r2, [r2, #8]
 8002ddc:	0211      	lsls	r1, r2, #8
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6912      	ldr	r2, [r2, #16]
 8002de2:	0852      	lsrs	r2, r2, #1
 8002de4:	3a01      	subs	r2, #1
 8002de6:	0552      	lsls	r2, r2, #21
 8002de8:	430a      	orrs	r2, r1
 8002dea:	491f      	ldr	r1, [pc, #124]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	610b      	str	r3, [r1, #16]
 8002df0:	e011      	b.n	8002e16 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002df2:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002dfa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6892      	ldr	r2, [r2, #8]
 8002e02:	0211      	lsls	r1, r2, #8
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6952      	ldr	r2, [r2, #20]
 8002e08:	0852      	lsrs	r2, r2, #1
 8002e0a:	3a01      	subs	r2, #1
 8002e0c:	0652      	lsls	r2, r2, #25
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	4915      	ldr	r1, [pc, #84]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e16:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a13      	ldr	r2, [pc, #76]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e20:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e22:	f7fe fb1d 	bl	8001460 <HAL_GetTick>
 8002e26:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e28:	e009      	b.n	8002e3e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e2a:	f7fe fb19 	bl	8001460 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d902      	bls.n	8002e3e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	73fb      	strb	r3, [r7, #15]
          break;
 8002e3c:	e005      	b.n	8002e4a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0ef      	beq.n	8002e2a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d106      	bne.n	8002e5e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	4903      	ldr	r1, [pc, #12]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000

08002e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e049      	b.n	8002f12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fe f8e2 	bl	800105c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4610      	mov	r0, r2
 8002eac:	f000 fb16 	bl	80034dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d001      	beq.n	8002f34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e033      	b.n	8002f9c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a19      	ldr	r2, [pc, #100]	; (8002fa8 <HAL_TIM_Base_Start+0x8c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d009      	beq.n	8002f5a <HAL_TIM_Base_Start+0x3e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4e:	d004      	beq.n	8002f5a <HAL_TIM_Base_Start+0x3e>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a15      	ldr	r2, [pc, #84]	; (8002fac <HAL_TIM_Base_Start+0x90>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d115      	bne.n	8002f86 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <HAL_TIM_Base_Start+0x94>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2b06      	cmp	r3, #6
 8002f6a:	d015      	beq.n	8002f98 <HAL_TIM_Base_Start+0x7c>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f72:	d011      	beq.n	8002f98 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f84:	e008      	b.n	8002f98 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0201 	orr.w	r2, r2, #1
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	e000      	b.n	8002f9a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	40012c00 	.word	0x40012c00
 8002fac:	40014000 	.word	0x40014000
 8002fb0:	00010007 	.word	0x00010007

08002fb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d001      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e03b      	b.n	8003044 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a19      	ldr	r2, [pc, #100]	; (8003050 <HAL_TIM_Base_Start_IT+0x9c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d009      	beq.n	8003002 <HAL_TIM_Base_Start_IT+0x4e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff6:	d004      	beq.n	8003002 <HAL_TIM_Base_Start_IT+0x4e>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a15      	ldr	r2, [pc, #84]	; (8003054 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d115      	bne.n	800302e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	4b13      	ldr	r3, [pc, #76]	; (8003058 <HAL_TIM_Base_Start_IT+0xa4>)
 800300a:	4013      	ands	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2b06      	cmp	r3, #6
 8003012:	d015      	beq.n	8003040 <HAL_TIM_Base_Start_IT+0x8c>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800301a:	d011      	beq.n	8003040 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800302c:	e008      	b.n	8003040 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 0201 	orr.w	r2, r2, #1
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	e000      	b.n	8003042 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003040:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	40012c00 	.word	0x40012c00
 8003054:	40014000 	.word	0x40014000
 8003058:	00010007 	.word	0x00010007

0800305c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6a1a      	ldr	r2, [r3, #32]
 800307a:	f241 1311 	movw	r3, #4369	; 0x1111
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10f      	bne.n	80030a4 <HAL_TIM_Base_Stop_IT+0x48>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6a1a      	ldr	r2, [r3, #32]
 800308a:	f240 4344 	movw	r3, #1092	; 0x444
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d107      	bne.n	80030a4 <HAL_TIM_Base_Stop_IT+0x48>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0201 	bic.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d122      	bne.n	8003116 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d11b      	bne.n	8003116 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f06f 0202 	mvn.w	r2, #2
 80030e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f9ce 	bl	800349e <HAL_TIM_IC_CaptureCallback>
 8003102:	e005      	b.n	8003110 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f9c0 	bl	800348a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f9d1 	bl	80034b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b04      	cmp	r3, #4
 8003122:	d122      	bne.n	800316a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b04      	cmp	r3, #4
 8003130:	d11b      	bne.n	800316a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f06f 0204 	mvn.w	r2, #4
 800313a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f9a4 	bl	800349e <HAL_TIM_IC_CaptureCallback>
 8003156:	e005      	b.n	8003164 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f996 	bl	800348a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f9a7 	bl	80034b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b08      	cmp	r3, #8
 8003176:	d122      	bne.n	80031be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b08      	cmp	r3, #8
 8003184:	d11b      	bne.n	80031be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f06f 0208 	mvn.w	r2, #8
 800318e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2204      	movs	r2, #4
 8003194:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f97a 	bl	800349e <HAL_TIM_IC_CaptureCallback>
 80031aa:	e005      	b.n	80031b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f96c 	bl	800348a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f97d 	bl	80034b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d122      	bne.n	8003212 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f003 0310 	and.w	r3, r3, #16
 80031d6:	2b10      	cmp	r3, #16
 80031d8:	d11b      	bne.n	8003212 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f06f 0210 	mvn.w	r2, #16
 80031e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2208      	movs	r2, #8
 80031e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f950 	bl	800349e <HAL_TIM_IC_CaptureCallback>
 80031fe:	e005      	b.n	800320c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f942 	bl	800348a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f953 	bl	80034b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b01      	cmp	r3, #1
 800321e:	d10e      	bne.n	800323e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b01      	cmp	r3, #1
 800322c:	d107      	bne.n	800323e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f06f 0201 	mvn.w	r2, #1
 8003236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7fd fecd 	bl	8000fd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003248:	2b80      	cmp	r3, #128	; 0x80
 800324a:	d10e      	bne.n	800326a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003256:	2b80      	cmp	r3, #128	; 0x80
 8003258:	d107      	bne.n	800326a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 faa7 	bl	80037b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003278:	d10e      	bne.n	8003298 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003284:	2b80      	cmp	r3, #128	; 0x80
 8003286:	d107      	bne.n	8003298 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fa9a 	bl	80037cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a2:	2b40      	cmp	r3, #64	; 0x40
 80032a4:	d10e      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b0:	2b40      	cmp	r3, #64	; 0x40
 80032b2:	d107      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f901 	bl	80034c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b20      	cmp	r3, #32
 80032d0:	d10e      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d107      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0220 	mvn.w	r2, #32
 80032e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fa5a 	bl	80037a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_TIM_ConfigClockSource+0x1c>
 8003310:	2302      	movs	r3, #2
 8003312:	e0b6      	b.n	8003482 <HAL_TIM_ConfigClockSource+0x18a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003332:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800333e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003350:	d03e      	beq.n	80033d0 <HAL_TIM_ConfigClockSource+0xd8>
 8003352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003356:	f200 8087 	bhi.w	8003468 <HAL_TIM_ConfigClockSource+0x170>
 800335a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335e:	f000 8086 	beq.w	800346e <HAL_TIM_ConfigClockSource+0x176>
 8003362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003366:	d87f      	bhi.n	8003468 <HAL_TIM_ConfigClockSource+0x170>
 8003368:	2b70      	cmp	r3, #112	; 0x70
 800336a:	d01a      	beq.n	80033a2 <HAL_TIM_ConfigClockSource+0xaa>
 800336c:	2b70      	cmp	r3, #112	; 0x70
 800336e:	d87b      	bhi.n	8003468 <HAL_TIM_ConfigClockSource+0x170>
 8003370:	2b60      	cmp	r3, #96	; 0x60
 8003372:	d050      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0x11e>
 8003374:	2b60      	cmp	r3, #96	; 0x60
 8003376:	d877      	bhi.n	8003468 <HAL_TIM_ConfigClockSource+0x170>
 8003378:	2b50      	cmp	r3, #80	; 0x50
 800337a:	d03c      	beq.n	80033f6 <HAL_TIM_ConfigClockSource+0xfe>
 800337c:	2b50      	cmp	r3, #80	; 0x50
 800337e:	d873      	bhi.n	8003468 <HAL_TIM_ConfigClockSource+0x170>
 8003380:	2b40      	cmp	r3, #64	; 0x40
 8003382:	d058      	beq.n	8003436 <HAL_TIM_ConfigClockSource+0x13e>
 8003384:	2b40      	cmp	r3, #64	; 0x40
 8003386:	d86f      	bhi.n	8003468 <HAL_TIM_ConfigClockSource+0x170>
 8003388:	2b30      	cmp	r3, #48	; 0x30
 800338a:	d064      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0x15e>
 800338c:	2b30      	cmp	r3, #48	; 0x30
 800338e:	d86b      	bhi.n	8003468 <HAL_TIM_ConfigClockSource+0x170>
 8003390:	2b20      	cmp	r3, #32
 8003392:	d060      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0x15e>
 8003394:	2b20      	cmp	r3, #32
 8003396:	d867      	bhi.n	8003468 <HAL_TIM_ConfigClockSource+0x170>
 8003398:	2b00      	cmp	r3, #0
 800339a:	d05c      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0x15e>
 800339c:	2b10      	cmp	r3, #16
 800339e:	d05a      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0x15e>
 80033a0:	e062      	b.n	8003468 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6899      	ldr	r1, [r3, #8]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f000 f971 	bl	8003698 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	609a      	str	r2, [r3, #8]
      break;
 80033ce:	e04f      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6818      	ldr	r0, [r3, #0]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	6899      	ldr	r1, [r3, #8]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f000 f95a 	bl	8003698 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033f2:	609a      	str	r2, [r3, #8]
      break;
 80033f4:	e03c      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	6859      	ldr	r1, [r3, #4]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	461a      	mov	r2, r3
 8003404:	f000 f8ce 	bl	80035a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2150      	movs	r1, #80	; 0x50
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f927 	bl	8003662 <TIM_ITRx_SetConfig>
      break;
 8003414:	e02c      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6859      	ldr	r1, [r3, #4]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	461a      	mov	r2, r3
 8003424:	f000 f8ed 	bl	8003602 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2160      	movs	r1, #96	; 0x60
 800342e:	4618      	mov	r0, r3
 8003430:	f000 f917 	bl	8003662 <TIM_ITRx_SetConfig>
      break;
 8003434:	e01c      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6818      	ldr	r0, [r3, #0]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	6859      	ldr	r1, [r3, #4]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	461a      	mov	r2, r3
 8003444:	f000 f8ae 	bl	80035a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2140      	movs	r1, #64	; 0x40
 800344e:	4618      	mov	r0, r3
 8003450:	f000 f907 	bl	8003662 <TIM_ITRx_SetConfig>
      break;
 8003454:	e00c      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4619      	mov	r1, r3
 8003460:	4610      	mov	r0, r2
 8003462:	f000 f8fe 	bl	8003662 <TIM_ITRx_SetConfig>
      break;
 8003466:	e003      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
      break;
 800346c:	e000      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800346e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003480:	7bfb      	ldrb	r3, [r7, #15]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a2a      	ldr	r2, [pc, #168]	; (8003598 <TIM_Base_SetConfig+0xbc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d003      	beq.n	80034fc <TIM_Base_SetConfig+0x20>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034fa:	d108      	bne.n	800350e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a21      	ldr	r2, [pc, #132]	; (8003598 <TIM_Base_SetConfig+0xbc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00b      	beq.n	800352e <TIM_Base_SetConfig+0x52>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800351c:	d007      	beq.n	800352e <TIM_Base_SetConfig+0x52>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a1e      	ldr	r2, [pc, #120]	; (800359c <TIM_Base_SetConfig+0xc0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d003      	beq.n	800352e <TIM_Base_SetConfig+0x52>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a1d      	ldr	r2, [pc, #116]	; (80035a0 <TIM_Base_SetConfig+0xc4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d108      	bne.n	8003540 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	4313      	orrs	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a0c      	ldr	r2, [pc, #48]	; (8003598 <TIM_Base_SetConfig+0xbc>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d007      	beq.n	800357c <TIM_Base_SetConfig+0xa0>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a0b      	ldr	r2, [pc, #44]	; (800359c <TIM_Base_SetConfig+0xc0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d003      	beq.n	800357c <TIM_Base_SetConfig+0xa0>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a0a      	ldr	r2, [pc, #40]	; (80035a0 <TIM_Base_SetConfig+0xc4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d103      	bne.n	8003584 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	615a      	str	r2, [r3, #20]
}
 800358a:	bf00      	nop
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40012c00 	.word	0x40012c00
 800359c:	40014000 	.word	0x40014000
 80035a0:	40014400 	.word	0x40014400

080035a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	f023 0201 	bic.w	r2, r3, #1
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f023 030a 	bic.w	r3, r3, #10
 80035e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	621a      	str	r2, [r3, #32]
}
 80035f6:	bf00      	nop
 80035f8:	371c      	adds	r7, #28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003602:	b480      	push	{r7}
 8003604:	b087      	sub	sp, #28
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	f023 0210 	bic.w	r2, r3, #16
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800362c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	031b      	lsls	r3, r3, #12
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800363e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	621a      	str	r2, [r3, #32]
}
 8003656:	bf00      	nop
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003662:	b480      	push	{r7}
 8003664:	b085      	sub	sp, #20
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003678:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	f043 0307 	orr.w	r3, r3, #7
 8003684:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	609a      	str	r2, [r3, #8]
}
 800368c:	bf00      	nop
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	021a      	lsls	r2, r3, #8
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	431a      	orrs	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4313      	orrs	r3, r2
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	609a      	str	r2, [r3, #8]
}
 80036cc:	bf00      	nop
 80036ce:	371c      	adds	r7, #28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036ec:	2302      	movs	r3, #2
 80036ee:	e04f      	b.n	8003790 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a21      	ldr	r2, [pc, #132]	; (800379c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d108      	bne.n	800372c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003720:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a14      	ldr	r2, [pc, #80]	; (800379c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d009      	beq.n	8003764 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003758:	d004      	beq.n	8003764 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a10      	ldr	r2, [pc, #64]	; (80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d10c      	bne.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800376a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	4313      	orrs	r3, r2
 8003774:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	40012c00 	.word	0x40012c00
 80037a0:	40014000 	.word	0x40014000

080037a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e040      	b.n	8003874 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fd fc62 	bl	80010cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2224      	movs	r2, #36	; 0x24
 800380c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0201 	bic.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fb2c 	bl	8003e7c <UART_SetConfig>
 8003824:	4603      	mov	r3, r0
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e022      	b.n	8003874 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fd7a 	bl	8004330 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800384a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800385a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fe01 	bl	8004474 <UART_CheckIdleState>
 8003872:	4603      	mov	r3, r0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b0ba      	sub	sp, #232	; 0xe8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80038a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80038aa:	4013      	ands	r3, r2
 80038ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80038b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d115      	bne.n	80038e4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80038b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00f      	beq.n	80038e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038c8:	f003 0320 	and.w	r3, r3, #32
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d009      	beq.n	80038e4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 82a6 	beq.w	8003e26 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	4798      	blx	r3
      }
      return;
 80038e2:	e2a0      	b.n	8003e26 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80038e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8117 	beq.w	8003b1c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80038ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80038fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80038fe:	4b85      	ldr	r3, [pc, #532]	; (8003b14 <HAL_UART_IRQHandler+0x298>)
 8003900:	4013      	ands	r3, r2
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 810a 	beq.w	8003b1c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d011      	beq.n	8003938 <HAL_UART_IRQHandler+0xbc>
 8003914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00b      	beq.n	8003938 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2201      	movs	r2, #1
 8003926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800392e:	f043 0201 	orr.w	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d011      	beq.n	8003968 <HAL_UART_IRQHandler+0xec>
 8003944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00b      	beq.n	8003968 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2202      	movs	r2, #2
 8003956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800395e:	f043 0204 	orr.w	r2, r3, #4
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d011      	beq.n	8003998 <HAL_UART_IRQHandler+0x11c>
 8003974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00b      	beq.n	8003998 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2204      	movs	r2, #4
 8003986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800398e:	f043 0202 	orr.w	r2, r3, #2
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d017      	beq.n	80039d4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d105      	bne.n	80039bc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80039b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00b      	beq.n	80039d4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2208      	movs	r2, #8
 80039c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ca:	f043 0208 	orr.w	r2, r3, #8
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d012      	beq.n	8003a06 <HAL_UART_IRQHandler+0x18a>
 80039e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00c      	beq.n	8003a06 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039fc:	f043 0220 	orr.w	r2, r3, #32
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 820c 	beq.w	8003e2a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00d      	beq.n	8003a3a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a22:	f003 0320 	and.w	r3, r3, #32
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d007      	beq.n	8003a3a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4e:	2b40      	cmp	r3, #64	; 0x40
 8003a50:	d005      	beq.n	8003a5e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d04f      	beq.n	8003afe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fee0 	bl	8004824 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6e:	2b40      	cmp	r3, #64	; 0x40
 8003a70:	d141      	bne.n	8003af6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3308      	adds	r3, #8
 8003a78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a80:	e853 3f00 	ldrex	r3, [r3]
 8003a84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3308      	adds	r3, #8
 8003a9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003aa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003aaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ab6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1d9      	bne.n	8003a72 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d013      	beq.n	8003aee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	4a13      	ldr	r2, [pc, #76]	; (8003b18 <HAL_UART_IRQHandler+0x29c>)
 8003acc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fd fe1f 	bl	8001716 <HAL_DMA_Abort_IT>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d017      	beq.n	8003b0e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003ae8:	4610      	mov	r0, r2
 8003aea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aec:	e00f      	b.n	8003b0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f9ba 	bl	8003e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af4:	e00b      	b.n	8003b0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f9b6 	bl	8003e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afc:	e007      	b.n	8003b0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f9b2 	bl	8003e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003b0c:	e18d      	b.n	8003e2a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b0e:	bf00      	nop
    return;
 8003b10:	e18b      	b.n	8003e2a <HAL_UART_IRQHandler+0x5ae>
 8003b12:	bf00      	nop
 8003b14:	04000120 	.word	0x04000120
 8003b18:	080048eb 	.word	0x080048eb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	f040 8146 	bne.w	8003db2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 813f 	beq.w	8003db2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 8138 	beq.w	8003db2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2210      	movs	r2, #16
 8003b48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b54:	2b40      	cmp	r3, #64	; 0x40
 8003b56:	f040 80b4 	bne.w	8003cc2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 815f 	beq.w	8003e2e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	f080 8157 	bcs.w	8003e2e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f040 8085 	bne.w	8003ca6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ba8:	e853 3f00 	ldrex	r3, [r3]
 8003bac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003bb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003bc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003bca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003bd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1da      	bne.n	8003b9c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3308      	adds	r3, #8
 8003bec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003bf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bf8:	f023 0301 	bic.w	r3, r3, #1
 8003bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3308      	adds	r3, #8
 8003c06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c16:	e841 2300 	strex	r3, r2, [r1]
 8003c1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1e1      	bne.n	8003be6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3308      	adds	r3, #8
 8003c28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3308      	adds	r3, #8
 8003c42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c4e:	e841 2300 	strex	r3, r2, [r1]
 8003c52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e3      	bne.n	8003c22 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c6e:	e853 3f00 	ldrex	r3, [r3]
 8003c72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c76:	f023 0310 	bic.w	r3, r3, #16
 8003c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c88:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c8a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c90:	e841 2300 	strex	r3, r2, [r1]
 8003c94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e4      	bne.n	8003c66 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fd fcfa 	bl	800169a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	4619      	mov	r1, r3
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fd f934 	bl	8000f28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003cc0:	e0b5      	b.n	8003e2e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 80a7 	beq.w	8003e32 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003ce4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 80a2 	beq.w	8003e32 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf6:	e853 3f00 	ldrex	r3, [r3]
 8003cfa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d10:	647b      	str	r3, [r7, #68]	; 0x44
 8003d12:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d18:	e841 2300 	strex	r3, r2, [r1]
 8003d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1e4      	bne.n	8003cee <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3308      	adds	r3, #8
 8003d2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	e853 3f00 	ldrex	r3, [r3]
 8003d32:	623b      	str	r3, [r7, #32]
   return(result);
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	f023 0301 	bic.w	r3, r3, #1
 8003d3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3308      	adds	r3, #8
 8003d44:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d48:	633a      	str	r2, [r7, #48]	; 0x30
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d50:	e841 2300 	strex	r3, r2, [r1]
 8003d54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1e3      	bne.n	8003d24 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	e853 3f00 	ldrex	r3, [r3]
 8003d7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 0310 	bic.w	r3, r3, #16
 8003d82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d90:	61fb      	str	r3, [r7, #28]
 8003d92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d94:	69b9      	ldr	r1, [r7, #24]
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	e841 2300 	strex	r3, r2, [r1]
 8003d9c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1e4      	bne.n	8003d6e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003da4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003da8:	4619      	mov	r1, r3
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fd f8bc 	bl	8000f28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003db0:	e03f      	b.n	8003e32 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00e      	beq.n	8003ddc <HAL_UART_IRQHandler+0x560>
 8003dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d008      	beq.n	8003ddc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003dd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 ff28 	bl	8004c2a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003dda:	e02d      	b.n	8003e38 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00e      	beq.n	8003e06 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d01c      	beq.n	8003e36 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	4798      	blx	r3
    }
    return;
 8003e04:	e017      	b.n	8003e36 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d012      	beq.n	8003e38 <HAL_UART_IRQHandler+0x5bc>
 8003e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00c      	beq.n	8003e38 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fd79 	bl	8004916 <UART_EndTransmit_IT>
    return;
 8003e24:	e008      	b.n	8003e38 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003e26:	bf00      	nop
 8003e28:	e006      	b.n	8003e38 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003e2a:	bf00      	nop
 8003e2c:	e004      	b.n	8003e38 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003e2e:	bf00      	nop
 8003e30:	e002      	b.n	8003e38 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003e32:	bf00      	nop
 8003e34:	e000      	b.n	8003e38 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003e36:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003e38:	37e8      	adds	r7, #232	; 0xe8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop

08003e40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e80:	b08a      	sub	sp, #40	; 0x28
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	431a      	orrs	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	4b9e      	ldr	r3, [pc, #632]	; (8004124 <UART_SetConfig+0x2a8>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a93      	ldr	r2, [pc, #588]	; (8004128 <UART_SetConfig+0x2ac>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d004      	beq.n	8003ee8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a8a      	ldr	r2, [pc, #552]	; (800412c <UART_SetConfig+0x2b0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d126      	bne.n	8003f54 <UART_SetConfig+0xd8>
 8003f06:	4b8a      	ldr	r3, [pc, #552]	; (8004130 <UART_SetConfig+0x2b4>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d81b      	bhi.n	8003f4c <UART_SetConfig+0xd0>
 8003f14:	a201      	add	r2, pc, #4	; (adr r2, 8003f1c <UART_SetConfig+0xa0>)
 8003f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1a:	bf00      	nop
 8003f1c:	08003f2d 	.word	0x08003f2d
 8003f20:	08003f3d 	.word	0x08003f3d
 8003f24:	08003f35 	.word	0x08003f35
 8003f28:	08003f45 	.word	0x08003f45
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f32:	e0ab      	b.n	800408c <UART_SetConfig+0x210>
 8003f34:	2302      	movs	r3, #2
 8003f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f3a:	e0a7      	b.n	800408c <UART_SetConfig+0x210>
 8003f3c:	2304      	movs	r3, #4
 8003f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f42:	e0a3      	b.n	800408c <UART_SetConfig+0x210>
 8003f44:	2308      	movs	r3, #8
 8003f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f4a:	e09f      	b.n	800408c <UART_SetConfig+0x210>
 8003f4c:	2310      	movs	r3, #16
 8003f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f52:	e09b      	b.n	800408c <UART_SetConfig+0x210>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a76      	ldr	r2, [pc, #472]	; (8004134 <UART_SetConfig+0x2b8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d138      	bne.n	8003fd0 <UART_SetConfig+0x154>
 8003f5e:	4b74      	ldr	r3, [pc, #464]	; (8004130 <UART_SetConfig+0x2b4>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f64:	f003 030c 	and.w	r3, r3, #12
 8003f68:	2b0c      	cmp	r3, #12
 8003f6a:	d82d      	bhi.n	8003fc8 <UART_SetConfig+0x14c>
 8003f6c:	a201      	add	r2, pc, #4	; (adr r2, 8003f74 <UART_SetConfig+0xf8>)
 8003f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f72:	bf00      	nop
 8003f74:	08003fa9 	.word	0x08003fa9
 8003f78:	08003fc9 	.word	0x08003fc9
 8003f7c:	08003fc9 	.word	0x08003fc9
 8003f80:	08003fc9 	.word	0x08003fc9
 8003f84:	08003fb9 	.word	0x08003fb9
 8003f88:	08003fc9 	.word	0x08003fc9
 8003f8c:	08003fc9 	.word	0x08003fc9
 8003f90:	08003fc9 	.word	0x08003fc9
 8003f94:	08003fb1 	.word	0x08003fb1
 8003f98:	08003fc9 	.word	0x08003fc9
 8003f9c:	08003fc9 	.word	0x08003fc9
 8003fa0:	08003fc9 	.word	0x08003fc9
 8003fa4:	08003fc1 	.word	0x08003fc1
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fae:	e06d      	b.n	800408c <UART_SetConfig+0x210>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fb6:	e069      	b.n	800408c <UART_SetConfig+0x210>
 8003fb8:	2304      	movs	r3, #4
 8003fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fbe:	e065      	b.n	800408c <UART_SetConfig+0x210>
 8003fc0:	2308      	movs	r3, #8
 8003fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fc6:	e061      	b.n	800408c <UART_SetConfig+0x210>
 8003fc8:	2310      	movs	r3, #16
 8003fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fce:	e05d      	b.n	800408c <UART_SetConfig+0x210>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a58      	ldr	r2, [pc, #352]	; (8004138 <UART_SetConfig+0x2bc>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d125      	bne.n	8004026 <UART_SetConfig+0x1aa>
 8003fda:	4b55      	ldr	r3, [pc, #340]	; (8004130 <UART_SetConfig+0x2b4>)
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003fe4:	2b30      	cmp	r3, #48	; 0x30
 8003fe6:	d016      	beq.n	8004016 <UART_SetConfig+0x19a>
 8003fe8:	2b30      	cmp	r3, #48	; 0x30
 8003fea:	d818      	bhi.n	800401e <UART_SetConfig+0x1a2>
 8003fec:	2b20      	cmp	r3, #32
 8003fee:	d00a      	beq.n	8004006 <UART_SetConfig+0x18a>
 8003ff0:	2b20      	cmp	r3, #32
 8003ff2:	d814      	bhi.n	800401e <UART_SetConfig+0x1a2>
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <UART_SetConfig+0x182>
 8003ff8:	2b10      	cmp	r3, #16
 8003ffa:	d008      	beq.n	800400e <UART_SetConfig+0x192>
 8003ffc:	e00f      	b.n	800401e <UART_SetConfig+0x1a2>
 8003ffe:	2300      	movs	r3, #0
 8004000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004004:	e042      	b.n	800408c <UART_SetConfig+0x210>
 8004006:	2302      	movs	r3, #2
 8004008:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800400c:	e03e      	b.n	800408c <UART_SetConfig+0x210>
 800400e:	2304      	movs	r3, #4
 8004010:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004014:	e03a      	b.n	800408c <UART_SetConfig+0x210>
 8004016:	2308      	movs	r3, #8
 8004018:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800401c:	e036      	b.n	800408c <UART_SetConfig+0x210>
 800401e:	2310      	movs	r3, #16
 8004020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004024:	e032      	b.n	800408c <UART_SetConfig+0x210>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a3f      	ldr	r2, [pc, #252]	; (8004128 <UART_SetConfig+0x2ac>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d12a      	bne.n	8004086 <UART_SetConfig+0x20a>
 8004030:	4b3f      	ldr	r3, [pc, #252]	; (8004130 <UART_SetConfig+0x2b4>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004036:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800403a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800403e:	d01a      	beq.n	8004076 <UART_SetConfig+0x1fa>
 8004040:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004044:	d81b      	bhi.n	800407e <UART_SetConfig+0x202>
 8004046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800404a:	d00c      	beq.n	8004066 <UART_SetConfig+0x1ea>
 800404c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004050:	d815      	bhi.n	800407e <UART_SetConfig+0x202>
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <UART_SetConfig+0x1e2>
 8004056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800405a:	d008      	beq.n	800406e <UART_SetConfig+0x1f2>
 800405c:	e00f      	b.n	800407e <UART_SetConfig+0x202>
 800405e:	2300      	movs	r3, #0
 8004060:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004064:	e012      	b.n	800408c <UART_SetConfig+0x210>
 8004066:	2302      	movs	r3, #2
 8004068:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800406c:	e00e      	b.n	800408c <UART_SetConfig+0x210>
 800406e:	2304      	movs	r3, #4
 8004070:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004074:	e00a      	b.n	800408c <UART_SetConfig+0x210>
 8004076:	2308      	movs	r3, #8
 8004078:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800407c:	e006      	b.n	800408c <UART_SetConfig+0x210>
 800407e:	2310      	movs	r3, #16
 8004080:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004084:	e002      	b.n	800408c <UART_SetConfig+0x210>
 8004086:	2310      	movs	r3, #16
 8004088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a25      	ldr	r2, [pc, #148]	; (8004128 <UART_SetConfig+0x2ac>)
 8004092:	4293      	cmp	r3, r2
 8004094:	f040 808a 	bne.w	80041ac <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004098:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800409c:	2b08      	cmp	r3, #8
 800409e:	d824      	bhi.n	80040ea <UART_SetConfig+0x26e>
 80040a0:	a201      	add	r2, pc, #4	; (adr r2, 80040a8 <UART_SetConfig+0x22c>)
 80040a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a6:	bf00      	nop
 80040a8:	080040cd 	.word	0x080040cd
 80040ac:	080040eb 	.word	0x080040eb
 80040b0:	080040d5 	.word	0x080040d5
 80040b4:	080040eb 	.word	0x080040eb
 80040b8:	080040db 	.word	0x080040db
 80040bc:	080040eb 	.word	0x080040eb
 80040c0:	080040eb 	.word	0x080040eb
 80040c4:	080040eb 	.word	0x080040eb
 80040c8:	080040e3 	.word	0x080040e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040cc:	f7fe fb38 	bl	8002740 <HAL_RCC_GetPCLK1Freq>
 80040d0:	61f8      	str	r0, [r7, #28]
        break;
 80040d2:	e010      	b.n	80040f6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040d4:	4b19      	ldr	r3, [pc, #100]	; (800413c <UART_SetConfig+0x2c0>)
 80040d6:	61fb      	str	r3, [r7, #28]
        break;
 80040d8:	e00d      	b.n	80040f6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040da:	f7fe fa99 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 80040de:	61f8      	str	r0, [r7, #28]
        break;
 80040e0:	e009      	b.n	80040f6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040e6:	61fb      	str	r3, [r7, #28]
        break;
 80040e8:	e005      	b.n	80040f6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80040f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 8109 	beq.w	8004310 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	4413      	add	r3, r2
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	429a      	cmp	r2, r3
 800410c:	d305      	bcc.n	800411a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	429a      	cmp	r2, r3
 8004118:	d912      	bls.n	8004140 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004120:	e0f6      	b.n	8004310 <UART_SetConfig+0x494>
 8004122:	bf00      	nop
 8004124:	efff69f3 	.word	0xefff69f3
 8004128:	40008000 	.word	0x40008000
 800412c:	40013800 	.word	0x40013800
 8004130:	40021000 	.word	0x40021000
 8004134:	40004400 	.word	0x40004400
 8004138:	40004800 	.word	0x40004800
 800413c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	2200      	movs	r2, #0
 8004144:	461c      	mov	r4, r3
 8004146:	4615      	mov	r5, r2
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	022b      	lsls	r3, r5, #8
 8004152:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004156:	0222      	lsls	r2, r4, #8
 8004158:	68f9      	ldr	r1, [r7, #12]
 800415a:	6849      	ldr	r1, [r1, #4]
 800415c:	0849      	lsrs	r1, r1, #1
 800415e:	2000      	movs	r0, #0
 8004160:	4688      	mov	r8, r1
 8004162:	4681      	mov	r9, r0
 8004164:	eb12 0a08 	adds.w	sl, r2, r8
 8004168:	eb43 0b09 	adc.w	fp, r3, r9
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	607a      	str	r2, [r7, #4]
 8004176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800417a:	4650      	mov	r0, sl
 800417c:	4659      	mov	r1, fp
 800417e:	f7fc f877 	bl	8000270 <__aeabi_uldivmod>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4613      	mov	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004190:	d308      	bcc.n	80041a4 <UART_SetConfig+0x328>
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004198:	d204      	bcs.n	80041a4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	60da      	str	r2, [r3, #12]
 80041a2:	e0b5      	b.n	8004310 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041aa:	e0b1      	b.n	8004310 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b4:	d15d      	bne.n	8004272 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80041b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d827      	bhi.n	800420e <UART_SetConfig+0x392>
 80041be:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <UART_SetConfig+0x348>)
 80041c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c4:	080041e9 	.word	0x080041e9
 80041c8:	080041f1 	.word	0x080041f1
 80041cc:	080041f9 	.word	0x080041f9
 80041d0:	0800420f 	.word	0x0800420f
 80041d4:	080041ff 	.word	0x080041ff
 80041d8:	0800420f 	.word	0x0800420f
 80041dc:	0800420f 	.word	0x0800420f
 80041e0:	0800420f 	.word	0x0800420f
 80041e4:	08004207 	.word	0x08004207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041e8:	f7fe faaa 	bl	8002740 <HAL_RCC_GetPCLK1Freq>
 80041ec:	61f8      	str	r0, [r7, #28]
        break;
 80041ee:	e014      	b.n	800421a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041f0:	f7fe fabc 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 80041f4:	61f8      	str	r0, [r7, #28]
        break;
 80041f6:	e010      	b.n	800421a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041f8:	4b4c      	ldr	r3, [pc, #304]	; (800432c <UART_SetConfig+0x4b0>)
 80041fa:	61fb      	str	r3, [r7, #28]
        break;
 80041fc:	e00d      	b.n	800421a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041fe:	f7fe fa07 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 8004202:	61f8      	str	r0, [r7, #28]
        break;
 8004204:	e009      	b.n	800421a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800420a:	61fb      	str	r3, [r7, #28]
        break;
 800420c:	e005      	b.n	800421a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004218:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d077      	beq.n	8004310 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	005a      	lsls	r2, r3, #1
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	085b      	lsrs	r3, r3, #1
 800422a:	441a      	add	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	2b0f      	cmp	r3, #15
 800423a:	d916      	bls.n	800426a <UART_SetConfig+0x3ee>
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004242:	d212      	bcs.n	800426a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	b29b      	uxth	r3, r3
 8004248:	f023 030f 	bic.w	r3, r3, #15
 800424c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	b29b      	uxth	r3, r3
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	b29a      	uxth	r2, r3
 800425a:	8afb      	ldrh	r3, [r7, #22]
 800425c:	4313      	orrs	r3, r2
 800425e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	8afa      	ldrh	r2, [r7, #22]
 8004266:	60da      	str	r2, [r3, #12]
 8004268:	e052      	b.n	8004310 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004270:	e04e      	b.n	8004310 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004272:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004276:	2b08      	cmp	r3, #8
 8004278:	d827      	bhi.n	80042ca <UART_SetConfig+0x44e>
 800427a:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <UART_SetConfig+0x404>)
 800427c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004280:	080042a5 	.word	0x080042a5
 8004284:	080042ad 	.word	0x080042ad
 8004288:	080042b5 	.word	0x080042b5
 800428c:	080042cb 	.word	0x080042cb
 8004290:	080042bb 	.word	0x080042bb
 8004294:	080042cb 	.word	0x080042cb
 8004298:	080042cb 	.word	0x080042cb
 800429c:	080042cb 	.word	0x080042cb
 80042a0:	080042c3 	.word	0x080042c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042a4:	f7fe fa4c 	bl	8002740 <HAL_RCC_GetPCLK1Freq>
 80042a8:	61f8      	str	r0, [r7, #28]
        break;
 80042aa:	e014      	b.n	80042d6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042ac:	f7fe fa5e 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 80042b0:	61f8      	str	r0, [r7, #28]
        break;
 80042b2:	e010      	b.n	80042d6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042b4:	4b1d      	ldr	r3, [pc, #116]	; (800432c <UART_SetConfig+0x4b0>)
 80042b6:	61fb      	str	r3, [r7, #28]
        break;
 80042b8:	e00d      	b.n	80042d6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ba:	f7fe f9a9 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 80042be:	61f8      	str	r0, [r7, #28]
        break;
 80042c0:	e009      	b.n	80042d6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042c6:	61fb      	str	r3, [r7, #28]
        break;
 80042c8:	e005      	b.n	80042d6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80042d4:	bf00      	nop
    }

    if (pclk != 0U)
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d019      	beq.n	8004310 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	085a      	lsrs	r2, r3, #1
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	441a      	add	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2b0f      	cmp	r3, #15
 80042f4:	d909      	bls.n	800430a <UART_SetConfig+0x48e>
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042fc:	d205      	bcs.n	800430a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	60da      	str	r2, [r3, #12]
 8004308:	e002      	b.n	8004310 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800431c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004320:	4618      	mov	r0, r3
 8004322:	3728      	adds	r7, #40	; 0x28
 8004324:	46bd      	mov	sp, r7
 8004326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800432a:	bf00      	nop
 800432c:	00f42400 	.word	0x00f42400

08004330 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	f003 0320 	and.w	r3, r3, #32
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440c:	2b00      	cmp	r3, #0
 800440e:	d01a      	beq.n	8004446 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800442e:	d10a      	bne.n	8004446 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	605a      	str	r2, [r3, #4]
  }
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af02      	add	r7, sp, #8
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004484:	f7fc ffec 	bl	8001460 <HAL_GetTick>
 8004488:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b08      	cmp	r3, #8
 8004496:	d10e      	bne.n	80044b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f82d 	bl	8004506 <UART_WaitOnFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e023      	b.n	80044fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d10e      	bne.n	80044e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f817 	bl	8004506 <UART_WaitOnFlagUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e00d      	b.n	80044fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2220      	movs	r2, #32
 80044e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2220      	movs	r2, #32
 80044ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b09c      	sub	sp, #112	; 0x70
 800450a:	af00      	add	r7, sp, #0
 800450c:	60f8      	str	r0, [r7, #12]
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	603b      	str	r3, [r7, #0]
 8004512:	4613      	mov	r3, r2
 8004514:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004516:	e0a5      	b.n	8004664 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004518:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800451a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451e:	f000 80a1 	beq.w	8004664 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004522:	f7fc ff9d 	bl	8001460 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800452e:	429a      	cmp	r2, r3
 8004530:	d302      	bcc.n	8004538 <UART_WaitOnFlagUntilTimeout+0x32>
 8004532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004534:	2b00      	cmp	r3, #0
 8004536:	d13e      	bne.n	80045b6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004540:	e853 3f00 	ldrex	r3, [r3]
 8004544:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004548:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800454c:	667b      	str	r3, [r7, #100]	; 0x64
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004556:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004558:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800455c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800455e:	e841 2300 	strex	r3, r2, [r1]
 8004562:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1e6      	bne.n	8004538 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3308      	adds	r3, #8
 8004570:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004574:	e853 3f00 	ldrex	r3, [r3]
 8004578:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800457a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457c:	f023 0301 	bic.w	r3, r3, #1
 8004580:	663b      	str	r3, [r7, #96]	; 0x60
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3308      	adds	r3, #8
 8004588:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800458a:	64ba      	str	r2, [r7, #72]	; 0x48
 800458c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004590:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004592:	e841 2300 	strex	r3, r2, [r1]
 8004596:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1e5      	bne.n	800456a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2220      	movs	r2, #32
 80045a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2220      	movs	r2, #32
 80045a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e067      	b.n	8004686 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d04f      	beq.n	8004664 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d2:	d147      	bne.n	8004664 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045dc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e6:	e853 3f00 	ldrex	r3, [r3]
 80045ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045fc:	637b      	str	r3, [r7, #52]	; 0x34
 80045fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004600:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004604:	e841 2300 	strex	r3, r2, [r1]
 8004608:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800460a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1e6      	bne.n	80045de <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3308      	adds	r3, #8
 8004616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	e853 3f00 	ldrex	r3, [r3]
 800461e:	613b      	str	r3, [r7, #16]
   return(result);
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f023 0301 	bic.w	r3, r3, #1
 8004626:	66bb      	str	r3, [r7, #104]	; 0x68
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3308      	adds	r3, #8
 800462e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004630:	623a      	str	r2, [r7, #32]
 8004632:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004634:	69f9      	ldr	r1, [r7, #28]
 8004636:	6a3a      	ldr	r2, [r7, #32]
 8004638:	e841 2300 	strex	r3, r2, [r1]
 800463c:	61bb      	str	r3, [r7, #24]
   return(result);
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1e5      	bne.n	8004610 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2220      	movs	r2, #32
 800464e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e010      	b.n	8004686 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69da      	ldr	r2, [r3, #28]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	4013      	ands	r3, r2
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	429a      	cmp	r2, r3
 8004672:	bf0c      	ite	eq
 8004674:	2301      	moveq	r3, #1
 8004676:	2300      	movne	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	461a      	mov	r2, r3
 800467c:	79fb      	ldrb	r3, [r7, #7]
 800467e:	429a      	cmp	r2, r3
 8004680:	f43f af4a 	beq.w	8004518 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3770      	adds	r7, #112	; 0x70
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004690:	b480      	push	{r7}
 8004692:	b097      	sub	sp, #92	; 0x5c
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	4613      	mov	r3, r2
 800469c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	88fa      	ldrh	r2, [r7, #6]
 80046a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	88fa      	ldrh	r2, [r7, #6]
 80046b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c2:	d10e      	bne.n	80046e2 <UART_Start_Receive_IT+0x52>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d105      	bne.n	80046d8 <UART_Start_Receive_IT+0x48>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80046d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046d6:	e02d      	b.n	8004734 <UART_Start_Receive_IT+0xa4>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	22ff      	movs	r2, #255	; 0xff
 80046dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046e0:	e028      	b.n	8004734 <UART_Start_Receive_IT+0xa4>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10d      	bne.n	8004706 <UART_Start_Receive_IT+0x76>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d104      	bne.n	80046fc <UART_Start_Receive_IT+0x6c>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	22ff      	movs	r2, #255	; 0xff
 80046f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046fa:	e01b      	b.n	8004734 <UART_Start_Receive_IT+0xa4>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	227f      	movs	r2, #127	; 0x7f
 8004700:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004704:	e016      	b.n	8004734 <UART_Start_Receive_IT+0xa4>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800470e:	d10d      	bne.n	800472c <UART_Start_Receive_IT+0x9c>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d104      	bne.n	8004722 <UART_Start_Receive_IT+0x92>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	227f      	movs	r2, #127	; 0x7f
 800471c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004720:	e008      	b.n	8004734 <UART_Start_Receive_IT+0xa4>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	223f      	movs	r2, #63	; 0x3f
 8004726:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800472a:	e003      	b.n	8004734 <UART_Start_Receive_IT+0xa4>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2222      	movs	r2, #34	; 0x22
 8004740:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3308      	adds	r3, #8
 8004748:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800474c:	e853 3f00 	ldrex	r3, [r3]
 8004750:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	657b      	str	r3, [r7, #84]	; 0x54
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3308      	adds	r3, #8
 8004760:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004762:	64ba      	str	r2, [r7, #72]	; 0x48
 8004764:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004766:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004768:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800476a:	e841 2300 	strex	r3, r2, [r1]
 800476e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1e5      	bne.n	8004742 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477e:	d107      	bne.n	8004790 <UART_Start_Receive_IT+0x100>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d103      	bne.n	8004790 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4a24      	ldr	r2, [pc, #144]	; (800481c <UART_Start_Receive_IT+0x18c>)
 800478c:	665a      	str	r2, [r3, #100]	; 0x64
 800478e:	e002      	b.n	8004796 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4a23      	ldr	r2, [pc, #140]	; (8004820 <UART_Start_Receive_IT+0x190>)
 8004794:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d019      	beq.n	80047da <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ae:	e853 3f00 	ldrex	r3, [r3]
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80047ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c4:	637b      	str	r3, [r7, #52]	; 0x34
 80047c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047cc:	e841 2300 	strex	r3, r2, [r1]
 80047d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1e6      	bne.n	80047a6 <UART_Start_Receive_IT+0x116>
 80047d8:	e018      	b.n	800480c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	613b      	str	r3, [r7, #16]
   return(result);
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f043 0320 	orr.w	r3, r3, #32
 80047ee:	653b      	str	r3, [r7, #80]	; 0x50
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047f8:	623b      	str	r3, [r7, #32]
 80047fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	69f9      	ldr	r1, [r7, #28]
 80047fe:	6a3a      	ldr	r2, [r7, #32]
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	61bb      	str	r3, [r7, #24]
   return(result);
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e6      	bne.n	80047da <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	375c      	adds	r7, #92	; 0x5c
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	08004acb 	.word	0x08004acb
 8004820:	0800496b 	.word	0x0800496b

08004824 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004824:	b480      	push	{r7}
 8004826:	b095      	sub	sp, #84	; 0x54
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004834:	e853 3f00 	ldrex	r3, [r3]
 8004838:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004840:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	461a      	mov	r2, r3
 8004848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800484a:	643b      	str	r3, [r7, #64]	; 0x40
 800484c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004850:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004852:	e841 2300 	strex	r3, r2, [r1]
 8004856:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1e6      	bne.n	800482c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3308      	adds	r3, #8
 8004864:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	61fb      	str	r3, [r7, #28]
   return(result);
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	f023 0301 	bic.w	r3, r3, #1
 8004874:	64bb      	str	r3, [r7, #72]	; 0x48
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3308      	adds	r3, #8
 800487c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800487e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004880:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e5      	bne.n	800485e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004896:	2b01      	cmp	r3, #1
 8004898:	d118      	bne.n	80048cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f023 0310 	bic.w	r3, r3, #16
 80048ae:	647b      	str	r3, [r7, #68]	; 0x44
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048b8:	61bb      	str	r3, [r7, #24]
 80048ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	6979      	ldr	r1, [r7, #20]
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	e841 2300 	strex	r3, r2, [r1]
 80048c4:	613b      	str	r3, [r7, #16]
   return(result);
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e6      	bne.n	800489a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	665a      	str	r2, [r3, #100]	; 0x64
}
 80048de:	bf00      	nop
 80048e0:	3754      	adds	r7, #84	; 0x54
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b084      	sub	sp, #16
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f7ff faad 	bl	8003e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800490e:	bf00      	nop
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b088      	sub	sp, #32
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	e853 3f00 	ldrex	r3, [r3]
 800492a:	60bb      	str	r3, [r7, #8]
   return(result);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004932:	61fb      	str	r3, [r7, #28]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	461a      	mov	r2, r3
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	61bb      	str	r3, [r7, #24]
 800493e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004940:	6979      	ldr	r1, [r7, #20]
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	e841 2300 	strex	r3, r2, [r1]
 8004948:	613b      	str	r3, [r7, #16]
   return(result);
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1e6      	bne.n	800491e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2220      	movs	r2, #32
 8004954:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7ff fa6f 	bl	8003e40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004962:	bf00      	nop
 8004964:	3720      	adds	r7, #32
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b096      	sub	sp, #88	; 0x58
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004978:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004980:	2b22      	cmp	r3, #34	; 0x22
 8004982:	f040 8094 	bne.w	8004aae <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800498c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004990:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004994:	b2d9      	uxtb	r1, r3
 8004996:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800499a:	b2da      	uxtb	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a0:	400a      	ands	r2, r1
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d179      	bne.n	8004ac2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d6:	e853 3f00 	ldrex	r3, [r3]
 80049da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049e2:	653b      	str	r3, [r7, #80]	; 0x50
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ec:	647b      	str	r3, [r7, #68]	; 0x44
 80049ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049f4:	e841 2300 	strex	r3, r2, [r1]
 80049f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e6      	bne.n	80049ce <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3308      	adds	r3, #8
 8004a06:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	e853 3f00 	ldrex	r3, [r3]
 8004a0e:	623b      	str	r3, [r7, #32]
   return(result);
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3308      	adds	r3, #8
 8004a1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a20:	633a      	str	r2, [r7, #48]	; 0x30
 8004a22:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a28:	e841 2300 	strex	r3, r2, [r1]
 8004a2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e5      	bne.n	8004a00 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2220      	movs	r2, #32
 8004a38:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d12e      	bne.n	8004aa6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0310 	bic.w	r3, r3, #16
 8004a62:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a6c:	61fb      	str	r3, [r7, #28]
 8004a6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	69b9      	ldr	r1, [r7, #24]
 8004a72:	69fa      	ldr	r2, [r7, #28]
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	617b      	str	r3, [r7, #20]
   return(result);
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e6      	bne.n	8004a4e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	f003 0310 	and.w	r3, r3, #16
 8004a8a:	2b10      	cmp	r3, #16
 8004a8c:	d103      	bne.n	8004a96 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2210      	movs	r2, #16
 8004a94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fc fa42 	bl	8000f28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004aa4:	e00d      	b.n	8004ac2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff f9d4 	bl	8003e54 <HAL_UART_RxCpltCallback>
}
 8004aac:	e009      	b.n	8004ac2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	8b1b      	ldrh	r3, [r3, #24]
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0208 	orr.w	r2, r2, #8
 8004abe:	b292      	uxth	r2, r2
 8004ac0:	831a      	strh	r2, [r3, #24]
}
 8004ac2:	bf00      	nop
 8004ac4:	3758      	adds	r7, #88	; 0x58
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b096      	sub	sp, #88	; 0x58
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ad8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ae0:	2b22      	cmp	r3, #34	; 0x22
 8004ae2:	f040 8094 	bne.w	8004c0e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004aec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004af6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004afa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004afe:	4013      	ands	r3, r2
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b04:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0a:	1c9a      	adds	r2, r3, #2
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d179      	bne.n	8004c22 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b4c:	643b      	str	r3, [r7, #64]	; 0x40
 8004b4e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b54:	e841 2300 	strex	r3, r2, [r1]
 8004b58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1e6      	bne.n	8004b2e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3308      	adds	r3, #8
 8004b66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	e853 3f00 	ldrex	r3, [r3]
 8004b6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f023 0301 	bic.w	r3, r3, #1
 8004b76:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3308      	adds	r3, #8
 8004b7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b88:	e841 2300 	strex	r3, r2, [r1]
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1e5      	bne.n	8004b60 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d12e      	bne.n	8004c06 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	e853 3f00 	ldrex	r3, [r3]
 8004bba:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f023 0310 	bic.w	r3, r3, #16
 8004bc2:	647b      	str	r3, [r7, #68]	; 0x44
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd0:	6979      	ldr	r1, [r7, #20]
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	e841 2300 	strex	r3, r2, [r1]
 8004bd8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e6      	bne.n	8004bae <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	f003 0310 	and.w	r3, r3, #16
 8004bea:	2b10      	cmp	r3, #16
 8004bec:	d103      	bne.n	8004bf6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2210      	movs	r2, #16
 8004bf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7fc f992 	bl	8000f28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c04:	e00d      	b.n	8004c22 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff f924 	bl	8003e54 <HAL_UART_RxCpltCallback>
}
 8004c0c:	e009      	b.n	8004c22 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	8b1b      	ldrh	r3, [r3, #24]
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0208 	orr.w	r2, r2, #8
 8004c1e:	b292      	uxth	r2, r2
 8004c20:	831a      	strh	r2, [r3, #24]
}
 8004c22:	bf00      	nop
 8004c24:	3758      	adds	r7, #88	; 0x58
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b08c      	sub	sp, #48	; 0x30
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	60b9      	str	r1, [r7, #8]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c50:	2b20      	cmp	r3, #32
 8004c52:	d14a      	bne.n	8004cea <HAL_UARTEx_ReceiveToIdle_IT+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <HAL_UARTEx_ReceiveToIdle_IT+0x22>
 8004c5a:	88fb      	ldrh	r3, [r7, #6]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
    {
      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e043      	b.n	8004cec <HAL_UARTEx_ReceiveToIdle_IT+0xae>
    }

    __HAL_LOCK(huart);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_UARTEx_ReceiveToIdle_IT+0x34>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e03c      	b.n	8004cec <HAL_UARTEx_ReceiveToIdle_IT+0xae>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8004c80:	88fb      	ldrh	r3, [r7, #6]
 8004c82:	461a      	mov	r2, r3
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f7ff fd02 	bl	8004690 <UART_Start_Receive_IT>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004c92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d124      	bne.n	8004ce4 <HAL_UARTEx_ReceiveToIdle_IT+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d11d      	bne.n	8004cde <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2210      	movs	r2, #16
 8004ca8:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	617b      	str	r3, [r7, #20]
   return(result);
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f043 0310 	orr.w	r3, r3, #16
 8004cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cca:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	6a39      	ldr	r1, [r7, #32]
 8004cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e6      	bne.n	8004caa <HAL_UARTEx_ReceiveToIdle_IT+0x6c>
 8004cdc:	e002      	b.n	8004ce4 <HAL_UARTEx_ReceiveToIdle_IT+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004ce4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ce8:	e000      	b.n	8004cec <HAL_UARTEx_ReceiveToIdle_IT+0xae>
  }
  else
  {
    return HAL_BUSY;
 8004cea:	2302      	movs	r3, #2
  }
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3730      	adds	r7, #48	; 0x30
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <__errno>:
 8004cf4:	4b01      	ldr	r3, [pc, #4]	; (8004cfc <__errno+0x8>)
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	2000000c 	.word	0x2000000c

08004d00 <__libc_init_array>:
 8004d00:	b570      	push	{r4, r5, r6, lr}
 8004d02:	4d0d      	ldr	r5, [pc, #52]	; (8004d38 <__libc_init_array+0x38>)
 8004d04:	4c0d      	ldr	r4, [pc, #52]	; (8004d3c <__libc_init_array+0x3c>)
 8004d06:	1b64      	subs	r4, r4, r5
 8004d08:	10a4      	asrs	r4, r4, #2
 8004d0a:	2600      	movs	r6, #0
 8004d0c:	42a6      	cmp	r6, r4
 8004d0e:	d109      	bne.n	8004d24 <__libc_init_array+0x24>
 8004d10:	4d0b      	ldr	r5, [pc, #44]	; (8004d40 <__libc_init_array+0x40>)
 8004d12:	4c0c      	ldr	r4, [pc, #48]	; (8004d44 <__libc_init_array+0x44>)
 8004d14:	f001 f824 	bl	8005d60 <_init>
 8004d18:	1b64      	subs	r4, r4, r5
 8004d1a:	10a4      	asrs	r4, r4, #2
 8004d1c:	2600      	movs	r6, #0
 8004d1e:	42a6      	cmp	r6, r4
 8004d20:	d105      	bne.n	8004d2e <__libc_init_array+0x2e>
 8004d22:	bd70      	pop	{r4, r5, r6, pc}
 8004d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d28:	4798      	blx	r3
 8004d2a:	3601      	adds	r6, #1
 8004d2c:	e7ee      	b.n	8004d0c <__libc_init_array+0xc>
 8004d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d32:	4798      	blx	r3
 8004d34:	3601      	adds	r6, #1
 8004d36:	e7f2      	b.n	8004d1e <__libc_init_array+0x1e>
 8004d38:	08005fb0 	.word	0x08005fb0
 8004d3c:	08005fb0 	.word	0x08005fb0
 8004d40:	08005fb0 	.word	0x08005fb0
 8004d44:	08005fb4 	.word	0x08005fb4

08004d48 <memset>:
 8004d48:	4402      	add	r2, r0
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d100      	bne.n	8004d52 <memset+0xa>
 8004d50:	4770      	bx	lr
 8004d52:	f803 1b01 	strb.w	r1, [r3], #1
 8004d56:	e7f9      	b.n	8004d4c <memset+0x4>

08004d58 <iprintf>:
 8004d58:	b40f      	push	{r0, r1, r2, r3}
 8004d5a:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <iprintf+0x2c>)
 8004d5c:	b513      	push	{r0, r1, r4, lr}
 8004d5e:	681c      	ldr	r4, [r3, #0]
 8004d60:	b124      	cbz	r4, 8004d6c <iprintf+0x14>
 8004d62:	69a3      	ldr	r3, [r4, #24]
 8004d64:	b913      	cbnz	r3, 8004d6c <iprintf+0x14>
 8004d66:	4620      	mov	r0, r4
 8004d68:	f000 fa5e 	bl	8005228 <__sinit>
 8004d6c:	ab05      	add	r3, sp, #20
 8004d6e:	9a04      	ldr	r2, [sp, #16]
 8004d70:	68a1      	ldr	r1, [r4, #8]
 8004d72:	9301      	str	r3, [sp, #4]
 8004d74:	4620      	mov	r0, r4
 8004d76:	f000 fc67 	bl	8005648 <_vfiprintf_r>
 8004d7a:	b002      	add	sp, #8
 8004d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d80:	b004      	add	sp, #16
 8004d82:	4770      	bx	lr
 8004d84:	2000000c 	.word	0x2000000c

08004d88 <_puts_r>:
 8004d88:	b570      	push	{r4, r5, r6, lr}
 8004d8a:	460e      	mov	r6, r1
 8004d8c:	4605      	mov	r5, r0
 8004d8e:	b118      	cbz	r0, 8004d98 <_puts_r+0x10>
 8004d90:	6983      	ldr	r3, [r0, #24]
 8004d92:	b90b      	cbnz	r3, 8004d98 <_puts_r+0x10>
 8004d94:	f000 fa48 	bl	8005228 <__sinit>
 8004d98:	69ab      	ldr	r3, [r5, #24]
 8004d9a:	68ac      	ldr	r4, [r5, #8]
 8004d9c:	b913      	cbnz	r3, 8004da4 <_puts_r+0x1c>
 8004d9e:	4628      	mov	r0, r5
 8004da0:	f000 fa42 	bl	8005228 <__sinit>
 8004da4:	4b2c      	ldr	r3, [pc, #176]	; (8004e58 <_puts_r+0xd0>)
 8004da6:	429c      	cmp	r4, r3
 8004da8:	d120      	bne.n	8004dec <_puts_r+0x64>
 8004daa:	686c      	ldr	r4, [r5, #4]
 8004dac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dae:	07db      	lsls	r3, r3, #31
 8004db0:	d405      	bmi.n	8004dbe <_puts_r+0x36>
 8004db2:	89a3      	ldrh	r3, [r4, #12]
 8004db4:	0598      	lsls	r0, r3, #22
 8004db6:	d402      	bmi.n	8004dbe <_puts_r+0x36>
 8004db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dba:	f000 fad3 	bl	8005364 <__retarget_lock_acquire_recursive>
 8004dbe:	89a3      	ldrh	r3, [r4, #12]
 8004dc0:	0719      	lsls	r1, r3, #28
 8004dc2:	d51d      	bpl.n	8004e00 <_puts_r+0x78>
 8004dc4:	6923      	ldr	r3, [r4, #16]
 8004dc6:	b1db      	cbz	r3, 8004e00 <_puts_r+0x78>
 8004dc8:	3e01      	subs	r6, #1
 8004dca:	68a3      	ldr	r3, [r4, #8]
 8004dcc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	60a3      	str	r3, [r4, #8]
 8004dd4:	bb39      	cbnz	r1, 8004e26 <_puts_r+0x9e>
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	da38      	bge.n	8004e4c <_puts_r+0xc4>
 8004dda:	4622      	mov	r2, r4
 8004ddc:	210a      	movs	r1, #10
 8004dde:	4628      	mov	r0, r5
 8004de0:	f000 f848 	bl	8004e74 <__swbuf_r>
 8004de4:	3001      	adds	r0, #1
 8004de6:	d011      	beq.n	8004e0c <_puts_r+0x84>
 8004de8:	250a      	movs	r5, #10
 8004dea:	e011      	b.n	8004e10 <_puts_r+0x88>
 8004dec:	4b1b      	ldr	r3, [pc, #108]	; (8004e5c <_puts_r+0xd4>)
 8004dee:	429c      	cmp	r4, r3
 8004df0:	d101      	bne.n	8004df6 <_puts_r+0x6e>
 8004df2:	68ac      	ldr	r4, [r5, #8]
 8004df4:	e7da      	b.n	8004dac <_puts_r+0x24>
 8004df6:	4b1a      	ldr	r3, [pc, #104]	; (8004e60 <_puts_r+0xd8>)
 8004df8:	429c      	cmp	r4, r3
 8004dfa:	bf08      	it	eq
 8004dfc:	68ec      	ldreq	r4, [r5, #12]
 8004dfe:	e7d5      	b.n	8004dac <_puts_r+0x24>
 8004e00:	4621      	mov	r1, r4
 8004e02:	4628      	mov	r0, r5
 8004e04:	f000 f888 	bl	8004f18 <__swsetup_r>
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	d0dd      	beq.n	8004dc8 <_puts_r+0x40>
 8004e0c:	f04f 35ff 	mov.w	r5, #4294967295
 8004e10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e12:	07da      	lsls	r2, r3, #31
 8004e14:	d405      	bmi.n	8004e22 <_puts_r+0x9a>
 8004e16:	89a3      	ldrh	r3, [r4, #12]
 8004e18:	059b      	lsls	r3, r3, #22
 8004e1a:	d402      	bmi.n	8004e22 <_puts_r+0x9a>
 8004e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e1e:	f000 faa2 	bl	8005366 <__retarget_lock_release_recursive>
 8004e22:	4628      	mov	r0, r5
 8004e24:	bd70      	pop	{r4, r5, r6, pc}
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	da04      	bge.n	8004e34 <_puts_r+0xac>
 8004e2a:	69a2      	ldr	r2, [r4, #24]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	dc06      	bgt.n	8004e3e <_puts_r+0xb6>
 8004e30:	290a      	cmp	r1, #10
 8004e32:	d004      	beq.n	8004e3e <_puts_r+0xb6>
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	6022      	str	r2, [r4, #0]
 8004e3a:	7019      	strb	r1, [r3, #0]
 8004e3c:	e7c5      	b.n	8004dca <_puts_r+0x42>
 8004e3e:	4622      	mov	r2, r4
 8004e40:	4628      	mov	r0, r5
 8004e42:	f000 f817 	bl	8004e74 <__swbuf_r>
 8004e46:	3001      	adds	r0, #1
 8004e48:	d1bf      	bne.n	8004dca <_puts_r+0x42>
 8004e4a:	e7df      	b.n	8004e0c <_puts_r+0x84>
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	250a      	movs	r5, #10
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	6022      	str	r2, [r4, #0]
 8004e54:	701d      	strb	r5, [r3, #0]
 8004e56:	e7db      	b.n	8004e10 <_puts_r+0x88>
 8004e58:	08005f34 	.word	0x08005f34
 8004e5c:	08005f54 	.word	0x08005f54
 8004e60:	08005f14 	.word	0x08005f14

08004e64 <puts>:
 8004e64:	4b02      	ldr	r3, [pc, #8]	; (8004e70 <puts+0xc>)
 8004e66:	4601      	mov	r1, r0
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	f7ff bf8d 	b.w	8004d88 <_puts_r>
 8004e6e:	bf00      	nop
 8004e70:	2000000c 	.word	0x2000000c

08004e74 <__swbuf_r>:
 8004e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e76:	460e      	mov	r6, r1
 8004e78:	4614      	mov	r4, r2
 8004e7a:	4605      	mov	r5, r0
 8004e7c:	b118      	cbz	r0, 8004e86 <__swbuf_r+0x12>
 8004e7e:	6983      	ldr	r3, [r0, #24]
 8004e80:	b90b      	cbnz	r3, 8004e86 <__swbuf_r+0x12>
 8004e82:	f000 f9d1 	bl	8005228 <__sinit>
 8004e86:	4b21      	ldr	r3, [pc, #132]	; (8004f0c <__swbuf_r+0x98>)
 8004e88:	429c      	cmp	r4, r3
 8004e8a:	d12b      	bne.n	8004ee4 <__swbuf_r+0x70>
 8004e8c:	686c      	ldr	r4, [r5, #4]
 8004e8e:	69a3      	ldr	r3, [r4, #24]
 8004e90:	60a3      	str	r3, [r4, #8]
 8004e92:	89a3      	ldrh	r3, [r4, #12]
 8004e94:	071a      	lsls	r2, r3, #28
 8004e96:	d52f      	bpl.n	8004ef8 <__swbuf_r+0x84>
 8004e98:	6923      	ldr	r3, [r4, #16]
 8004e9a:	b36b      	cbz	r3, 8004ef8 <__swbuf_r+0x84>
 8004e9c:	6923      	ldr	r3, [r4, #16]
 8004e9e:	6820      	ldr	r0, [r4, #0]
 8004ea0:	1ac0      	subs	r0, r0, r3
 8004ea2:	6963      	ldr	r3, [r4, #20]
 8004ea4:	b2f6      	uxtb	r6, r6
 8004ea6:	4283      	cmp	r3, r0
 8004ea8:	4637      	mov	r7, r6
 8004eaa:	dc04      	bgt.n	8004eb6 <__swbuf_r+0x42>
 8004eac:	4621      	mov	r1, r4
 8004eae:	4628      	mov	r0, r5
 8004eb0:	f000 f926 	bl	8005100 <_fflush_r>
 8004eb4:	bb30      	cbnz	r0, 8004f04 <__swbuf_r+0x90>
 8004eb6:	68a3      	ldr	r3, [r4, #8]
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	60a3      	str	r3, [r4, #8]
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	6022      	str	r2, [r4, #0]
 8004ec2:	701e      	strb	r6, [r3, #0]
 8004ec4:	6963      	ldr	r3, [r4, #20]
 8004ec6:	3001      	adds	r0, #1
 8004ec8:	4283      	cmp	r3, r0
 8004eca:	d004      	beq.n	8004ed6 <__swbuf_r+0x62>
 8004ecc:	89a3      	ldrh	r3, [r4, #12]
 8004ece:	07db      	lsls	r3, r3, #31
 8004ed0:	d506      	bpl.n	8004ee0 <__swbuf_r+0x6c>
 8004ed2:	2e0a      	cmp	r6, #10
 8004ed4:	d104      	bne.n	8004ee0 <__swbuf_r+0x6c>
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	4628      	mov	r0, r5
 8004eda:	f000 f911 	bl	8005100 <_fflush_r>
 8004ede:	b988      	cbnz	r0, 8004f04 <__swbuf_r+0x90>
 8004ee0:	4638      	mov	r0, r7
 8004ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ee4:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <__swbuf_r+0x9c>)
 8004ee6:	429c      	cmp	r4, r3
 8004ee8:	d101      	bne.n	8004eee <__swbuf_r+0x7a>
 8004eea:	68ac      	ldr	r4, [r5, #8]
 8004eec:	e7cf      	b.n	8004e8e <__swbuf_r+0x1a>
 8004eee:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <__swbuf_r+0xa0>)
 8004ef0:	429c      	cmp	r4, r3
 8004ef2:	bf08      	it	eq
 8004ef4:	68ec      	ldreq	r4, [r5, #12]
 8004ef6:	e7ca      	b.n	8004e8e <__swbuf_r+0x1a>
 8004ef8:	4621      	mov	r1, r4
 8004efa:	4628      	mov	r0, r5
 8004efc:	f000 f80c 	bl	8004f18 <__swsetup_r>
 8004f00:	2800      	cmp	r0, #0
 8004f02:	d0cb      	beq.n	8004e9c <__swbuf_r+0x28>
 8004f04:	f04f 37ff 	mov.w	r7, #4294967295
 8004f08:	e7ea      	b.n	8004ee0 <__swbuf_r+0x6c>
 8004f0a:	bf00      	nop
 8004f0c:	08005f34 	.word	0x08005f34
 8004f10:	08005f54 	.word	0x08005f54
 8004f14:	08005f14 	.word	0x08005f14

08004f18 <__swsetup_r>:
 8004f18:	4b32      	ldr	r3, [pc, #200]	; (8004fe4 <__swsetup_r+0xcc>)
 8004f1a:	b570      	push	{r4, r5, r6, lr}
 8004f1c:	681d      	ldr	r5, [r3, #0]
 8004f1e:	4606      	mov	r6, r0
 8004f20:	460c      	mov	r4, r1
 8004f22:	b125      	cbz	r5, 8004f2e <__swsetup_r+0x16>
 8004f24:	69ab      	ldr	r3, [r5, #24]
 8004f26:	b913      	cbnz	r3, 8004f2e <__swsetup_r+0x16>
 8004f28:	4628      	mov	r0, r5
 8004f2a:	f000 f97d 	bl	8005228 <__sinit>
 8004f2e:	4b2e      	ldr	r3, [pc, #184]	; (8004fe8 <__swsetup_r+0xd0>)
 8004f30:	429c      	cmp	r4, r3
 8004f32:	d10f      	bne.n	8004f54 <__swsetup_r+0x3c>
 8004f34:	686c      	ldr	r4, [r5, #4]
 8004f36:	89a3      	ldrh	r3, [r4, #12]
 8004f38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f3c:	0719      	lsls	r1, r3, #28
 8004f3e:	d42c      	bmi.n	8004f9a <__swsetup_r+0x82>
 8004f40:	06dd      	lsls	r5, r3, #27
 8004f42:	d411      	bmi.n	8004f68 <__swsetup_r+0x50>
 8004f44:	2309      	movs	r3, #9
 8004f46:	6033      	str	r3, [r6, #0]
 8004f48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f4c:	81a3      	strh	r3, [r4, #12]
 8004f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f52:	e03e      	b.n	8004fd2 <__swsetup_r+0xba>
 8004f54:	4b25      	ldr	r3, [pc, #148]	; (8004fec <__swsetup_r+0xd4>)
 8004f56:	429c      	cmp	r4, r3
 8004f58:	d101      	bne.n	8004f5e <__swsetup_r+0x46>
 8004f5a:	68ac      	ldr	r4, [r5, #8]
 8004f5c:	e7eb      	b.n	8004f36 <__swsetup_r+0x1e>
 8004f5e:	4b24      	ldr	r3, [pc, #144]	; (8004ff0 <__swsetup_r+0xd8>)
 8004f60:	429c      	cmp	r4, r3
 8004f62:	bf08      	it	eq
 8004f64:	68ec      	ldreq	r4, [r5, #12]
 8004f66:	e7e6      	b.n	8004f36 <__swsetup_r+0x1e>
 8004f68:	0758      	lsls	r0, r3, #29
 8004f6a:	d512      	bpl.n	8004f92 <__swsetup_r+0x7a>
 8004f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f6e:	b141      	cbz	r1, 8004f82 <__swsetup_r+0x6a>
 8004f70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f74:	4299      	cmp	r1, r3
 8004f76:	d002      	beq.n	8004f7e <__swsetup_r+0x66>
 8004f78:	4630      	mov	r0, r6
 8004f7a:	f000 fa5b 	bl	8005434 <_free_r>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	6363      	str	r3, [r4, #52]	; 0x34
 8004f82:	89a3      	ldrh	r3, [r4, #12]
 8004f84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f88:	81a3      	strh	r3, [r4, #12]
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	6063      	str	r3, [r4, #4]
 8004f8e:	6923      	ldr	r3, [r4, #16]
 8004f90:	6023      	str	r3, [r4, #0]
 8004f92:	89a3      	ldrh	r3, [r4, #12]
 8004f94:	f043 0308 	orr.w	r3, r3, #8
 8004f98:	81a3      	strh	r3, [r4, #12]
 8004f9a:	6923      	ldr	r3, [r4, #16]
 8004f9c:	b94b      	cbnz	r3, 8004fb2 <__swsetup_r+0x9a>
 8004f9e:	89a3      	ldrh	r3, [r4, #12]
 8004fa0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa8:	d003      	beq.n	8004fb2 <__swsetup_r+0x9a>
 8004faa:	4621      	mov	r1, r4
 8004fac:	4630      	mov	r0, r6
 8004fae:	f000 fa01 	bl	80053b4 <__smakebuf_r>
 8004fb2:	89a0      	ldrh	r0, [r4, #12]
 8004fb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fb8:	f010 0301 	ands.w	r3, r0, #1
 8004fbc:	d00a      	beq.n	8004fd4 <__swsetup_r+0xbc>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60a3      	str	r3, [r4, #8]
 8004fc2:	6963      	ldr	r3, [r4, #20]
 8004fc4:	425b      	negs	r3, r3
 8004fc6:	61a3      	str	r3, [r4, #24]
 8004fc8:	6923      	ldr	r3, [r4, #16]
 8004fca:	b943      	cbnz	r3, 8004fde <__swsetup_r+0xc6>
 8004fcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004fd0:	d1ba      	bne.n	8004f48 <__swsetup_r+0x30>
 8004fd2:	bd70      	pop	{r4, r5, r6, pc}
 8004fd4:	0781      	lsls	r1, r0, #30
 8004fd6:	bf58      	it	pl
 8004fd8:	6963      	ldrpl	r3, [r4, #20]
 8004fda:	60a3      	str	r3, [r4, #8]
 8004fdc:	e7f4      	b.n	8004fc8 <__swsetup_r+0xb0>
 8004fde:	2000      	movs	r0, #0
 8004fe0:	e7f7      	b.n	8004fd2 <__swsetup_r+0xba>
 8004fe2:	bf00      	nop
 8004fe4:	2000000c 	.word	0x2000000c
 8004fe8:	08005f34 	.word	0x08005f34
 8004fec:	08005f54 	.word	0x08005f54
 8004ff0:	08005f14 	.word	0x08005f14

08004ff4 <__sflush_r>:
 8004ff4:	898a      	ldrh	r2, [r1, #12]
 8004ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ffa:	4605      	mov	r5, r0
 8004ffc:	0710      	lsls	r0, r2, #28
 8004ffe:	460c      	mov	r4, r1
 8005000:	d458      	bmi.n	80050b4 <__sflush_r+0xc0>
 8005002:	684b      	ldr	r3, [r1, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	dc05      	bgt.n	8005014 <__sflush_r+0x20>
 8005008:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	dc02      	bgt.n	8005014 <__sflush_r+0x20>
 800500e:	2000      	movs	r0, #0
 8005010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005014:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005016:	2e00      	cmp	r6, #0
 8005018:	d0f9      	beq.n	800500e <__sflush_r+0x1a>
 800501a:	2300      	movs	r3, #0
 800501c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005020:	682f      	ldr	r7, [r5, #0]
 8005022:	602b      	str	r3, [r5, #0]
 8005024:	d032      	beq.n	800508c <__sflush_r+0x98>
 8005026:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005028:	89a3      	ldrh	r3, [r4, #12]
 800502a:	075a      	lsls	r2, r3, #29
 800502c:	d505      	bpl.n	800503a <__sflush_r+0x46>
 800502e:	6863      	ldr	r3, [r4, #4]
 8005030:	1ac0      	subs	r0, r0, r3
 8005032:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005034:	b10b      	cbz	r3, 800503a <__sflush_r+0x46>
 8005036:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005038:	1ac0      	subs	r0, r0, r3
 800503a:	2300      	movs	r3, #0
 800503c:	4602      	mov	r2, r0
 800503e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005040:	6a21      	ldr	r1, [r4, #32]
 8005042:	4628      	mov	r0, r5
 8005044:	47b0      	blx	r6
 8005046:	1c43      	adds	r3, r0, #1
 8005048:	89a3      	ldrh	r3, [r4, #12]
 800504a:	d106      	bne.n	800505a <__sflush_r+0x66>
 800504c:	6829      	ldr	r1, [r5, #0]
 800504e:	291d      	cmp	r1, #29
 8005050:	d82c      	bhi.n	80050ac <__sflush_r+0xb8>
 8005052:	4a2a      	ldr	r2, [pc, #168]	; (80050fc <__sflush_r+0x108>)
 8005054:	40ca      	lsrs	r2, r1
 8005056:	07d6      	lsls	r6, r2, #31
 8005058:	d528      	bpl.n	80050ac <__sflush_r+0xb8>
 800505a:	2200      	movs	r2, #0
 800505c:	6062      	str	r2, [r4, #4]
 800505e:	04d9      	lsls	r1, r3, #19
 8005060:	6922      	ldr	r2, [r4, #16]
 8005062:	6022      	str	r2, [r4, #0]
 8005064:	d504      	bpl.n	8005070 <__sflush_r+0x7c>
 8005066:	1c42      	adds	r2, r0, #1
 8005068:	d101      	bne.n	800506e <__sflush_r+0x7a>
 800506a:	682b      	ldr	r3, [r5, #0]
 800506c:	b903      	cbnz	r3, 8005070 <__sflush_r+0x7c>
 800506e:	6560      	str	r0, [r4, #84]	; 0x54
 8005070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005072:	602f      	str	r7, [r5, #0]
 8005074:	2900      	cmp	r1, #0
 8005076:	d0ca      	beq.n	800500e <__sflush_r+0x1a>
 8005078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800507c:	4299      	cmp	r1, r3
 800507e:	d002      	beq.n	8005086 <__sflush_r+0x92>
 8005080:	4628      	mov	r0, r5
 8005082:	f000 f9d7 	bl	8005434 <_free_r>
 8005086:	2000      	movs	r0, #0
 8005088:	6360      	str	r0, [r4, #52]	; 0x34
 800508a:	e7c1      	b.n	8005010 <__sflush_r+0x1c>
 800508c:	6a21      	ldr	r1, [r4, #32]
 800508e:	2301      	movs	r3, #1
 8005090:	4628      	mov	r0, r5
 8005092:	47b0      	blx	r6
 8005094:	1c41      	adds	r1, r0, #1
 8005096:	d1c7      	bne.n	8005028 <__sflush_r+0x34>
 8005098:	682b      	ldr	r3, [r5, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0c4      	beq.n	8005028 <__sflush_r+0x34>
 800509e:	2b1d      	cmp	r3, #29
 80050a0:	d001      	beq.n	80050a6 <__sflush_r+0xb2>
 80050a2:	2b16      	cmp	r3, #22
 80050a4:	d101      	bne.n	80050aa <__sflush_r+0xb6>
 80050a6:	602f      	str	r7, [r5, #0]
 80050a8:	e7b1      	b.n	800500e <__sflush_r+0x1a>
 80050aa:	89a3      	ldrh	r3, [r4, #12]
 80050ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050b0:	81a3      	strh	r3, [r4, #12]
 80050b2:	e7ad      	b.n	8005010 <__sflush_r+0x1c>
 80050b4:	690f      	ldr	r7, [r1, #16]
 80050b6:	2f00      	cmp	r7, #0
 80050b8:	d0a9      	beq.n	800500e <__sflush_r+0x1a>
 80050ba:	0793      	lsls	r3, r2, #30
 80050bc:	680e      	ldr	r6, [r1, #0]
 80050be:	bf08      	it	eq
 80050c0:	694b      	ldreq	r3, [r1, #20]
 80050c2:	600f      	str	r7, [r1, #0]
 80050c4:	bf18      	it	ne
 80050c6:	2300      	movne	r3, #0
 80050c8:	eba6 0807 	sub.w	r8, r6, r7
 80050cc:	608b      	str	r3, [r1, #8]
 80050ce:	f1b8 0f00 	cmp.w	r8, #0
 80050d2:	dd9c      	ble.n	800500e <__sflush_r+0x1a>
 80050d4:	6a21      	ldr	r1, [r4, #32]
 80050d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050d8:	4643      	mov	r3, r8
 80050da:	463a      	mov	r2, r7
 80050dc:	4628      	mov	r0, r5
 80050de:	47b0      	blx	r6
 80050e0:	2800      	cmp	r0, #0
 80050e2:	dc06      	bgt.n	80050f2 <__sflush_r+0xfe>
 80050e4:	89a3      	ldrh	r3, [r4, #12]
 80050e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050ea:	81a3      	strh	r3, [r4, #12]
 80050ec:	f04f 30ff 	mov.w	r0, #4294967295
 80050f0:	e78e      	b.n	8005010 <__sflush_r+0x1c>
 80050f2:	4407      	add	r7, r0
 80050f4:	eba8 0800 	sub.w	r8, r8, r0
 80050f8:	e7e9      	b.n	80050ce <__sflush_r+0xda>
 80050fa:	bf00      	nop
 80050fc:	20400001 	.word	0x20400001

08005100 <_fflush_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	690b      	ldr	r3, [r1, #16]
 8005104:	4605      	mov	r5, r0
 8005106:	460c      	mov	r4, r1
 8005108:	b913      	cbnz	r3, 8005110 <_fflush_r+0x10>
 800510a:	2500      	movs	r5, #0
 800510c:	4628      	mov	r0, r5
 800510e:	bd38      	pop	{r3, r4, r5, pc}
 8005110:	b118      	cbz	r0, 800511a <_fflush_r+0x1a>
 8005112:	6983      	ldr	r3, [r0, #24]
 8005114:	b90b      	cbnz	r3, 800511a <_fflush_r+0x1a>
 8005116:	f000 f887 	bl	8005228 <__sinit>
 800511a:	4b14      	ldr	r3, [pc, #80]	; (800516c <_fflush_r+0x6c>)
 800511c:	429c      	cmp	r4, r3
 800511e:	d11b      	bne.n	8005158 <_fflush_r+0x58>
 8005120:	686c      	ldr	r4, [r5, #4]
 8005122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0ef      	beq.n	800510a <_fflush_r+0xa>
 800512a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800512c:	07d0      	lsls	r0, r2, #31
 800512e:	d404      	bmi.n	800513a <_fflush_r+0x3a>
 8005130:	0599      	lsls	r1, r3, #22
 8005132:	d402      	bmi.n	800513a <_fflush_r+0x3a>
 8005134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005136:	f000 f915 	bl	8005364 <__retarget_lock_acquire_recursive>
 800513a:	4628      	mov	r0, r5
 800513c:	4621      	mov	r1, r4
 800513e:	f7ff ff59 	bl	8004ff4 <__sflush_r>
 8005142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005144:	07da      	lsls	r2, r3, #31
 8005146:	4605      	mov	r5, r0
 8005148:	d4e0      	bmi.n	800510c <_fflush_r+0xc>
 800514a:	89a3      	ldrh	r3, [r4, #12]
 800514c:	059b      	lsls	r3, r3, #22
 800514e:	d4dd      	bmi.n	800510c <_fflush_r+0xc>
 8005150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005152:	f000 f908 	bl	8005366 <__retarget_lock_release_recursive>
 8005156:	e7d9      	b.n	800510c <_fflush_r+0xc>
 8005158:	4b05      	ldr	r3, [pc, #20]	; (8005170 <_fflush_r+0x70>)
 800515a:	429c      	cmp	r4, r3
 800515c:	d101      	bne.n	8005162 <_fflush_r+0x62>
 800515e:	68ac      	ldr	r4, [r5, #8]
 8005160:	e7df      	b.n	8005122 <_fflush_r+0x22>
 8005162:	4b04      	ldr	r3, [pc, #16]	; (8005174 <_fflush_r+0x74>)
 8005164:	429c      	cmp	r4, r3
 8005166:	bf08      	it	eq
 8005168:	68ec      	ldreq	r4, [r5, #12]
 800516a:	e7da      	b.n	8005122 <_fflush_r+0x22>
 800516c:	08005f34 	.word	0x08005f34
 8005170:	08005f54 	.word	0x08005f54
 8005174:	08005f14 	.word	0x08005f14

08005178 <std>:
 8005178:	2300      	movs	r3, #0
 800517a:	b510      	push	{r4, lr}
 800517c:	4604      	mov	r4, r0
 800517e:	e9c0 3300 	strd	r3, r3, [r0]
 8005182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005186:	6083      	str	r3, [r0, #8]
 8005188:	8181      	strh	r1, [r0, #12]
 800518a:	6643      	str	r3, [r0, #100]	; 0x64
 800518c:	81c2      	strh	r2, [r0, #14]
 800518e:	6183      	str	r3, [r0, #24]
 8005190:	4619      	mov	r1, r3
 8005192:	2208      	movs	r2, #8
 8005194:	305c      	adds	r0, #92	; 0x5c
 8005196:	f7ff fdd7 	bl	8004d48 <memset>
 800519a:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <std+0x38>)
 800519c:	6263      	str	r3, [r4, #36]	; 0x24
 800519e:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <std+0x3c>)
 80051a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80051a2:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <std+0x40>)
 80051a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051a6:	4b05      	ldr	r3, [pc, #20]	; (80051bc <std+0x44>)
 80051a8:	6224      	str	r4, [r4, #32]
 80051aa:	6323      	str	r3, [r4, #48]	; 0x30
 80051ac:	bd10      	pop	{r4, pc}
 80051ae:	bf00      	nop
 80051b0:	08005bf1 	.word	0x08005bf1
 80051b4:	08005c13 	.word	0x08005c13
 80051b8:	08005c4b 	.word	0x08005c4b
 80051bc:	08005c6f 	.word	0x08005c6f

080051c0 <_cleanup_r>:
 80051c0:	4901      	ldr	r1, [pc, #4]	; (80051c8 <_cleanup_r+0x8>)
 80051c2:	f000 b8af 	b.w	8005324 <_fwalk_reent>
 80051c6:	bf00      	nop
 80051c8:	08005101 	.word	0x08005101

080051cc <__sfmoreglue>:
 80051cc:	b570      	push	{r4, r5, r6, lr}
 80051ce:	2268      	movs	r2, #104	; 0x68
 80051d0:	1e4d      	subs	r5, r1, #1
 80051d2:	4355      	muls	r5, r2
 80051d4:	460e      	mov	r6, r1
 80051d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80051da:	f000 f997 	bl	800550c <_malloc_r>
 80051de:	4604      	mov	r4, r0
 80051e0:	b140      	cbz	r0, 80051f4 <__sfmoreglue+0x28>
 80051e2:	2100      	movs	r1, #0
 80051e4:	e9c0 1600 	strd	r1, r6, [r0]
 80051e8:	300c      	adds	r0, #12
 80051ea:	60a0      	str	r0, [r4, #8]
 80051ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80051f0:	f7ff fdaa 	bl	8004d48 <memset>
 80051f4:	4620      	mov	r0, r4
 80051f6:	bd70      	pop	{r4, r5, r6, pc}

080051f8 <__sfp_lock_acquire>:
 80051f8:	4801      	ldr	r0, [pc, #4]	; (8005200 <__sfp_lock_acquire+0x8>)
 80051fa:	f000 b8b3 	b.w	8005364 <__retarget_lock_acquire_recursive>
 80051fe:	bf00      	nop
 8005200:	200020fd 	.word	0x200020fd

08005204 <__sfp_lock_release>:
 8005204:	4801      	ldr	r0, [pc, #4]	; (800520c <__sfp_lock_release+0x8>)
 8005206:	f000 b8ae 	b.w	8005366 <__retarget_lock_release_recursive>
 800520a:	bf00      	nop
 800520c:	200020fd 	.word	0x200020fd

08005210 <__sinit_lock_acquire>:
 8005210:	4801      	ldr	r0, [pc, #4]	; (8005218 <__sinit_lock_acquire+0x8>)
 8005212:	f000 b8a7 	b.w	8005364 <__retarget_lock_acquire_recursive>
 8005216:	bf00      	nop
 8005218:	200020fe 	.word	0x200020fe

0800521c <__sinit_lock_release>:
 800521c:	4801      	ldr	r0, [pc, #4]	; (8005224 <__sinit_lock_release+0x8>)
 800521e:	f000 b8a2 	b.w	8005366 <__retarget_lock_release_recursive>
 8005222:	bf00      	nop
 8005224:	200020fe 	.word	0x200020fe

08005228 <__sinit>:
 8005228:	b510      	push	{r4, lr}
 800522a:	4604      	mov	r4, r0
 800522c:	f7ff fff0 	bl	8005210 <__sinit_lock_acquire>
 8005230:	69a3      	ldr	r3, [r4, #24]
 8005232:	b11b      	cbz	r3, 800523c <__sinit+0x14>
 8005234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005238:	f7ff bff0 	b.w	800521c <__sinit_lock_release>
 800523c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005240:	6523      	str	r3, [r4, #80]	; 0x50
 8005242:	4b13      	ldr	r3, [pc, #76]	; (8005290 <__sinit+0x68>)
 8005244:	4a13      	ldr	r2, [pc, #76]	; (8005294 <__sinit+0x6c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	62a2      	str	r2, [r4, #40]	; 0x28
 800524a:	42a3      	cmp	r3, r4
 800524c:	bf04      	itt	eq
 800524e:	2301      	moveq	r3, #1
 8005250:	61a3      	streq	r3, [r4, #24]
 8005252:	4620      	mov	r0, r4
 8005254:	f000 f820 	bl	8005298 <__sfp>
 8005258:	6060      	str	r0, [r4, #4]
 800525a:	4620      	mov	r0, r4
 800525c:	f000 f81c 	bl	8005298 <__sfp>
 8005260:	60a0      	str	r0, [r4, #8]
 8005262:	4620      	mov	r0, r4
 8005264:	f000 f818 	bl	8005298 <__sfp>
 8005268:	2200      	movs	r2, #0
 800526a:	60e0      	str	r0, [r4, #12]
 800526c:	2104      	movs	r1, #4
 800526e:	6860      	ldr	r0, [r4, #4]
 8005270:	f7ff ff82 	bl	8005178 <std>
 8005274:	68a0      	ldr	r0, [r4, #8]
 8005276:	2201      	movs	r2, #1
 8005278:	2109      	movs	r1, #9
 800527a:	f7ff ff7d 	bl	8005178 <std>
 800527e:	68e0      	ldr	r0, [r4, #12]
 8005280:	2202      	movs	r2, #2
 8005282:	2112      	movs	r1, #18
 8005284:	f7ff ff78 	bl	8005178 <std>
 8005288:	2301      	movs	r3, #1
 800528a:	61a3      	str	r3, [r4, #24]
 800528c:	e7d2      	b.n	8005234 <__sinit+0xc>
 800528e:	bf00      	nop
 8005290:	08005f10 	.word	0x08005f10
 8005294:	080051c1 	.word	0x080051c1

08005298 <__sfp>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	4607      	mov	r7, r0
 800529c:	f7ff ffac 	bl	80051f8 <__sfp_lock_acquire>
 80052a0:	4b1e      	ldr	r3, [pc, #120]	; (800531c <__sfp+0x84>)
 80052a2:	681e      	ldr	r6, [r3, #0]
 80052a4:	69b3      	ldr	r3, [r6, #24]
 80052a6:	b913      	cbnz	r3, 80052ae <__sfp+0x16>
 80052a8:	4630      	mov	r0, r6
 80052aa:	f7ff ffbd 	bl	8005228 <__sinit>
 80052ae:	3648      	adds	r6, #72	; 0x48
 80052b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	d503      	bpl.n	80052c0 <__sfp+0x28>
 80052b8:	6833      	ldr	r3, [r6, #0]
 80052ba:	b30b      	cbz	r3, 8005300 <__sfp+0x68>
 80052bc:	6836      	ldr	r6, [r6, #0]
 80052be:	e7f7      	b.n	80052b0 <__sfp+0x18>
 80052c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80052c4:	b9d5      	cbnz	r5, 80052fc <__sfp+0x64>
 80052c6:	4b16      	ldr	r3, [pc, #88]	; (8005320 <__sfp+0x88>)
 80052c8:	60e3      	str	r3, [r4, #12]
 80052ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052ce:	6665      	str	r5, [r4, #100]	; 0x64
 80052d0:	f000 f847 	bl	8005362 <__retarget_lock_init_recursive>
 80052d4:	f7ff ff96 	bl	8005204 <__sfp_lock_release>
 80052d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80052dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80052e0:	6025      	str	r5, [r4, #0]
 80052e2:	61a5      	str	r5, [r4, #24]
 80052e4:	2208      	movs	r2, #8
 80052e6:	4629      	mov	r1, r5
 80052e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80052ec:	f7ff fd2c 	bl	8004d48 <memset>
 80052f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80052f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80052f8:	4620      	mov	r0, r4
 80052fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052fc:	3468      	adds	r4, #104	; 0x68
 80052fe:	e7d9      	b.n	80052b4 <__sfp+0x1c>
 8005300:	2104      	movs	r1, #4
 8005302:	4638      	mov	r0, r7
 8005304:	f7ff ff62 	bl	80051cc <__sfmoreglue>
 8005308:	4604      	mov	r4, r0
 800530a:	6030      	str	r0, [r6, #0]
 800530c:	2800      	cmp	r0, #0
 800530e:	d1d5      	bne.n	80052bc <__sfp+0x24>
 8005310:	f7ff ff78 	bl	8005204 <__sfp_lock_release>
 8005314:	230c      	movs	r3, #12
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	e7ee      	b.n	80052f8 <__sfp+0x60>
 800531a:	bf00      	nop
 800531c:	08005f10 	.word	0x08005f10
 8005320:	ffff0001 	.word	0xffff0001

08005324 <_fwalk_reent>:
 8005324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005328:	4606      	mov	r6, r0
 800532a:	4688      	mov	r8, r1
 800532c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005330:	2700      	movs	r7, #0
 8005332:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005336:	f1b9 0901 	subs.w	r9, r9, #1
 800533a:	d505      	bpl.n	8005348 <_fwalk_reent+0x24>
 800533c:	6824      	ldr	r4, [r4, #0]
 800533e:	2c00      	cmp	r4, #0
 8005340:	d1f7      	bne.n	8005332 <_fwalk_reent+0xe>
 8005342:	4638      	mov	r0, r7
 8005344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005348:	89ab      	ldrh	r3, [r5, #12]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d907      	bls.n	800535e <_fwalk_reent+0x3a>
 800534e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005352:	3301      	adds	r3, #1
 8005354:	d003      	beq.n	800535e <_fwalk_reent+0x3a>
 8005356:	4629      	mov	r1, r5
 8005358:	4630      	mov	r0, r6
 800535a:	47c0      	blx	r8
 800535c:	4307      	orrs	r7, r0
 800535e:	3568      	adds	r5, #104	; 0x68
 8005360:	e7e9      	b.n	8005336 <_fwalk_reent+0x12>

08005362 <__retarget_lock_init_recursive>:
 8005362:	4770      	bx	lr

08005364 <__retarget_lock_acquire_recursive>:
 8005364:	4770      	bx	lr

08005366 <__retarget_lock_release_recursive>:
 8005366:	4770      	bx	lr

08005368 <__swhatbuf_r>:
 8005368:	b570      	push	{r4, r5, r6, lr}
 800536a:	460e      	mov	r6, r1
 800536c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005370:	2900      	cmp	r1, #0
 8005372:	b096      	sub	sp, #88	; 0x58
 8005374:	4614      	mov	r4, r2
 8005376:	461d      	mov	r5, r3
 8005378:	da08      	bge.n	800538c <__swhatbuf_r+0x24>
 800537a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	602a      	str	r2, [r5, #0]
 8005382:	061a      	lsls	r2, r3, #24
 8005384:	d410      	bmi.n	80053a8 <__swhatbuf_r+0x40>
 8005386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800538a:	e00e      	b.n	80053aa <__swhatbuf_r+0x42>
 800538c:	466a      	mov	r2, sp
 800538e:	f000 fc95 	bl	8005cbc <_fstat_r>
 8005392:	2800      	cmp	r0, #0
 8005394:	dbf1      	blt.n	800537a <__swhatbuf_r+0x12>
 8005396:	9a01      	ldr	r2, [sp, #4]
 8005398:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800539c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80053a0:	425a      	negs	r2, r3
 80053a2:	415a      	adcs	r2, r3
 80053a4:	602a      	str	r2, [r5, #0]
 80053a6:	e7ee      	b.n	8005386 <__swhatbuf_r+0x1e>
 80053a8:	2340      	movs	r3, #64	; 0x40
 80053aa:	2000      	movs	r0, #0
 80053ac:	6023      	str	r3, [r4, #0]
 80053ae:	b016      	add	sp, #88	; 0x58
 80053b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080053b4 <__smakebuf_r>:
 80053b4:	898b      	ldrh	r3, [r1, #12]
 80053b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053b8:	079d      	lsls	r5, r3, #30
 80053ba:	4606      	mov	r6, r0
 80053bc:	460c      	mov	r4, r1
 80053be:	d507      	bpl.n	80053d0 <__smakebuf_r+0x1c>
 80053c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053c4:	6023      	str	r3, [r4, #0]
 80053c6:	6123      	str	r3, [r4, #16]
 80053c8:	2301      	movs	r3, #1
 80053ca:	6163      	str	r3, [r4, #20]
 80053cc:	b002      	add	sp, #8
 80053ce:	bd70      	pop	{r4, r5, r6, pc}
 80053d0:	ab01      	add	r3, sp, #4
 80053d2:	466a      	mov	r2, sp
 80053d4:	f7ff ffc8 	bl	8005368 <__swhatbuf_r>
 80053d8:	9900      	ldr	r1, [sp, #0]
 80053da:	4605      	mov	r5, r0
 80053dc:	4630      	mov	r0, r6
 80053de:	f000 f895 	bl	800550c <_malloc_r>
 80053e2:	b948      	cbnz	r0, 80053f8 <__smakebuf_r+0x44>
 80053e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053e8:	059a      	lsls	r2, r3, #22
 80053ea:	d4ef      	bmi.n	80053cc <__smakebuf_r+0x18>
 80053ec:	f023 0303 	bic.w	r3, r3, #3
 80053f0:	f043 0302 	orr.w	r3, r3, #2
 80053f4:	81a3      	strh	r3, [r4, #12]
 80053f6:	e7e3      	b.n	80053c0 <__smakebuf_r+0xc>
 80053f8:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <__smakebuf_r+0x7c>)
 80053fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80053fc:	89a3      	ldrh	r3, [r4, #12]
 80053fe:	6020      	str	r0, [r4, #0]
 8005400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005404:	81a3      	strh	r3, [r4, #12]
 8005406:	9b00      	ldr	r3, [sp, #0]
 8005408:	6163      	str	r3, [r4, #20]
 800540a:	9b01      	ldr	r3, [sp, #4]
 800540c:	6120      	str	r0, [r4, #16]
 800540e:	b15b      	cbz	r3, 8005428 <__smakebuf_r+0x74>
 8005410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005414:	4630      	mov	r0, r6
 8005416:	f000 fc63 	bl	8005ce0 <_isatty_r>
 800541a:	b128      	cbz	r0, 8005428 <__smakebuf_r+0x74>
 800541c:	89a3      	ldrh	r3, [r4, #12]
 800541e:	f023 0303 	bic.w	r3, r3, #3
 8005422:	f043 0301 	orr.w	r3, r3, #1
 8005426:	81a3      	strh	r3, [r4, #12]
 8005428:	89a0      	ldrh	r0, [r4, #12]
 800542a:	4305      	orrs	r5, r0
 800542c:	81a5      	strh	r5, [r4, #12]
 800542e:	e7cd      	b.n	80053cc <__smakebuf_r+0x18>
 8005430:	080051c1 	.word	0x080051c1

08005434 <_free_r>:
 8005434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005436:	2900      	cmp	r1, #0
 8005438:	d044      	beq.n	80054c4 <_free_r+0x90>
 800543a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800543e:	9001      	str	r0, [sp, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	f1a1 0404 	sub.w	r4, r1, #4
 8005446:	bfb8      	it	lt
 8005448:	18e4      	addlt	r4, r4, r3
 800544a:	f000 fc6b 	bl	8005d24 <__malloc_lock>
 800544e:	4a1e      	ldr	r2, [pc, #120]	; (80054c8 <_free_r+0x94>)
 8005450:	9801      	ldr	r0, [sp, #4]
 8005452:	6813      	ldr	r3, [r2, #0]
 8005454:	b933      	cbnz	r3, 8005464 <_free_r+0x30>
 8005456:	6063      	str	r3, [r4, #4]
 8005458:	6014      	str	r4, [r2, #0]
 800545a:	b003      	add	sp, #12
 800545c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005460:	f000 bc66 	b.w	8005d30 <__malloc_unlock>
 8005464:	42a3      	cmp	r3, r4
 8005466:	d908      	bls.n	800547a <_free_r+0x46>
 8005468:	6825      	ldr	r5, [r4, #0]
 800546a:	1961      	adds	r1, r4, r5
 800546c:	428b      	cmp	r3, r1
 800546e:	bf01      	itttt	eq
 8005470:	6819      	ldreq	r1, [r3, #0]
 8005472:	685b      	ldreq	r3, [r3, #4]
 8005474:	1949      	addeq	r1, r1, r5
 8005476:	6021      	streq	r1, [r4, #0]
 8005478:	e7ed      	b.n	8005456 <_free_r+0x22>
 800547a:	461a      	mov	r2, r3
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	b10b      	cbz	r3, 8005484 <_free_r+0x50>
 8005480:	42a3      	cmp	r3, r4
 8005482:	d9fa      	bls.n	800547a <_free_r+0x46>
 8005484:	6811      	ldr	r1, [r2, #0]
 8005486:	1855      	adds	r5, r2, r1
 8005488:	42a5      	cmp	r5, r4
 800548a:	d10b      	bne.n	80054a4 <_free_r+0x70>
 800548c:	6824      	ldr	r4, [r4, #0]
 800548e:	4421      	add	r1, r4
 8005490:	1854      	adds	r4, r2, r1
 8005492:	42a3      	cmp	r3, r4
 8005494:	6011      	str	r1, [r2, #0]
 8005496:	d1e0      	bne.n	800545a <_free_r+0x26>
 8005498:	681c      	ldr	r4, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	6053      	str	r3, [r2, #4]
 800549e:	4421      	add	r1, r4
 80054a0:	6011      	str	r1, [r2, #0]
 80054a2:	e7da      	b.n	800545a <_free_r+0x26>
 80054a4:	d902      	bls.n	80054ac <_free_r+0x78>
 80054a6:	230c      	movs	r3, #12
 80054a8:	6003      	str	r3, [r0, #0]
 80054aa:	e7d6      	b.n	800545a <_free_r+0x26>
 80054ac:	6825      	ldr	r5, [r4, #0]
 80054ae:	1961      	adds	r1, r4, r5
 80054b0:	428b      	cmp	r3, r1
 80054b2:	bf04      	itt	eq
 80054b4:	6819      	ldreq	r1, [r3, #0]
 80054b6:	685b      	ldreq	r3, [r3, #4]
 80054b8:	6063      	str	r3, [r4, #4]
 80054ba:	bf04      	itt	eq
 80054bc:	1949      	addeq	r1, r1, r5
 80054be:	6021      	streq	r1, [r4, #0]
 80054c0:	6054      	str	r4, [r2, #4]
 80054c2:	e7ca      	b.n	800545a <_free_r+0x26>
 80054c4:	b003      	add	sp, #12
 80054c6:	bd30      	pop	{r4, r5, pc}
 80054c8:	20002100 	.word	0x20002100

080054cc <sbrk_aligned>:
 80054cc:	b570      	push	{r4, r5, r6, lr}
 80054ce:	4e0e      	ldr	r6, [pc, #56]	; (8005508 <sbrk_aligned+0x3c>)
 80054d0:	460c      	mov	r4, r1
 80054d2:	6831      	ldr	r1, [r6, #0]
 80054d4:	4605      	mov	r5, r0
 80054d6:	b911      	cbnz	r1, 80054de <sbrk_aligned+0x12>
 80054d8:	f000 fb7a 	bl	8005bd0 <_sbrk_r>
 80054dc:	6030      	str	r0, [r6, #0]
 80054de:	4621      	mov	r1, r4
 80054e0:	4628      	mov	r0, r5
 80054e2:	f000 fb75 	bl	8005bd0 <_sbrk_r>
 80054e6:	1c43      	adds	r3, r0, #1
 80054e8:	d00a      	beq.n	8005500 <sbrk_aligned+0x34>
 80054ea:	1cc4      	adds	r4, r0, #3
 80054ec:	f024 0403 	bic.w	r4, r4, #3
 80054f0:	42a0      	cmp	r0, r4
 80054f2:	d007      	beq.n	8005504 <sbrk_aligned+0x38>
 80054f4:	1a21      	subs	r1, r4, r0
 80054f6:	4628      	mov	r0, r5
 80054f8:	f000 fb6a 	bl	8005bd0 <_sbrk_r>
 80054fc:	3001      	adds	r0, #1
 80054fe:	d101      	bne.n	8005504 <sbrk_aligned+0x38>
 8005500:	f04f 34ff 	mov.w	r4, #4294967295
 8005504:	4620      	mov	r0, r4
 8005506:	bd70      	pop	{r4, r5, r6, pc}
 8005508:	20002104 	.word	0x20002104

0800550c <_malloc_r>:
 800550c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005510:	1ccd      	adds	r5, r1, #3
 8005512:	f025 0503 	bic.w	r5, r5, #3
 8005516:	3508      	adds	r5, #8
 8005518:	2d0c      	cmp	r5, #12
 800551a:	bf38      	it	cc
 800551c:	250c      	movcc	r5, #12
 800551e:	2d00      	cmp	r5, #0
 8005520:	4607      	mov	r7, r0
 8005522:	db01      	blt.n	8005528 <_malloc_r+0x1c>
 8005524:	42a9      	cmp	r1, r5
 8005526:	d905      	bls.n	8005534 <_malloc_r+0x28>
 8005528:	230c      	movs	r3, #12
 800552a:	603b      	str	r3, [r7, #0]
 800552c:	2600      	movs	r6, #0
 800552e:	4630      	mov	r0, r6
 8005530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005534:	4e2e      	ldr	r6, [pc, #184]	; (80055f0 <_malloc_r+0xe4>)
 8005536:	f000 fbf5 	bl	8005d24 <__malloc_lock>
 800553a:	6833      	ldr	r3, [r6, #0]
 800553c:	461c      	mov	r4, r3
 800553e:	bb34      	cbnz	r4, 800558e <_malloc_r+0x82>
 8005540:	4629      	mov	r1, r5
 8005542:	4638      	mov	r0, r7
 8005544:	f7ff ffc2 	bl	80054cc <sbrk_aligned>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	4604      	mov	r4, r0
 800554c:	d14d      	bne.n	80055ea <_malloc_r+0xde>
 800554e:	6834      	ldr	r4, [r6, #0]
 8005550:	4626      	mov	r6, r4
 8005552:	2e00      	cmp	r6, #0
 8005554:	d140      	bne.n	80055d8 <_malloc_r+0xcc>
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	4631      	mov	r1, r6
 800555a:	4638      	mov	r0, r7
 800555c:	eb04 0803 	add.w	r8, r4, r3
 8005560:	f000 fb36 	bl	8005bd0 <_sbrk_r>
 8005564:	4580      	cmp	r8, r0
 8005566:	d13a      	bne.n	80055de <_malloc_r+0xd2>
 8005568:	6821      	ldr	r1, [r4, #0]
 800556a:	3503      	adds	r5, #3
 800556c:	1a6d      	subs	r5, r5, r1
 800556e:	f025 0503 	bic.w	r5, r5, #3
 8005572:	3508      	adds	r5, #8
 8005574:	2d0c      	cmp	r5, #12
 8005576:	bf38      	it	cc
 8005578:	250c      	movcc	r5, #12
 800557a:	4629      	mov	r1, r5
 800557c:	4638      	mov	r0, r7
 800557e:	f7ff ffa5 	bl	80054cc <sbrk_aligned>
 8005582:	3001      	adds	r0, #1
 8005584:	d02b      	beq.n	80055de <_malloc_r+0xd2>
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	442b      	add	r3, r5
 800558a:	6023      	str	r3, [r4, #0]
 800558c:	e00e      	b.n	80055ac <_malloc_r+0xa0>
 800558e:	6822      	ldr	r2, [r4, #0]
 8005590:	1b52      	subs	r2, r2, r5
 8005592:	d41e      	bmi.n	80055d2 <_malloc_r+0xc6>
 8005594:	2a0b      	cmp	r2, #11
 8005596:	d916      	bls.n	80055c6 <_malloc_r+0xba>
 8005598:	1961      	adds	r1, r4, r5
 800559a:	42a3      	cmp	r3, r4
 800559c:	6025      	str	r5, [r4, #0]
 800559e:	bf18      	it	ne
 80055a0:	6059      	strne	r1, [r3, #4]
 80055a2:	6863      	ldr	r3, [r4, #4]
 80055a4:	bf08      	it	eq
 80055a6:	6031      	streq	r1, [r6, #0]
 80055a8:	5162      	str	r2, [r4, r5]
 80055aa:	604b      	str	r3, [r1, #4]
 80055ac:	4638      	mov	r0, r7
 80055ae:	f104 060b 	add.w	r6, r4, #11
 80055b2:	f000 fbbd 	bl	8005d30 <__malloc_unlock>
 80055b6:	f026 0607 	bic.w	r6, r6, #7
 80055ba:	1d23      	adds	r3, r4, #4
 80055bc:	1af2      	subs	r2, r6, r3
 80055be:	d0b6      	beq.n	800552e <_malloc_r+0x22>
 80055c0:	1b9b      	subs	r3, r3, r6
 80055c2:	50a3      	str	r3, [r4, r2]
 80055c4:	e7b3      	b.n	800552e <_malloc_r+0x22>
 80055c6:	6862      	ldr	r2, [r4, #4]
 80055c8:	42a3      	cmp	r3, r4
 80055ca:	bf0c      	ite	eq
 80055cc:	6032      	streq	r2, [r6, #0]
 80055ce:	605a      	strne	r2, [r3, #4]
 80055d0:	e7ec      	b.n	80055ac <_malloc_r+0xa0>
 80055d2:	4623      	mov	r3, r4
 80055d4:	6864      	ldr	r4, [r4, #4]
 80055d6:	e7b2      	b.n	800553e <_malloc_r+0x32>
 80055d8:	4634      	mov	r4, r6
 80055da:	6876      	ldr	r6, [r6, #4]
 80055dc:	e7b9      	b.n	8005552 <_malloc_r+0x46>
 80055de:	230c      	movs	r3, #12
 80055e0:	603b      	str	r3, [r7, #0]
 80055e2:	4638      	mov	r0, r7
 80055e4:	f000 fba4 	bl	8005d30 <__malloc_unlock>
 80055e8:	e7a1      	b.n	800552e <_malloc_r+0x22>
 80055ea:	6025      	str	r5, [r4, #0]
 80055ec:	e7de      	b.n	80055ac <_malloc_r+0xa0>
 80055ee:	bf00      	nop
 80055f0:	20002100 	.word	0x20002100

080055f4 <__sfputc_r>:
 80055f4:	6893      	ldr	r3, [r2, #8]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	b410      	push	{r4}
 80055fc:	6093      	str	r3, [r2, #8]
 80055fe:	da08      	bge.n	8005612 <__sfputc_r+0x1e>
 8005600:	6994      	ldr	r4, [r2, #24]
 8005602:	42a3      	cmp	r3, r4
 8005604:	db01      	blt.n	800560a <__sfputc_r+0x16>
 8005606:	290a      	cmp	r1, #10
 8005608:	d103      	bne.n	8005612 <__sfputc_r+0x1e>
 800560a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800560e:	f7ff bc31 	b.w	8004e74 <__swbuf_r>
 8005612:	6813      	ldr	r3, [r2, #0]
 8005614:	1c58      	adds	r0, r3, #1
 8005616:	6010      	str	r0, [r2, #0]
 8005618:	7019      	strb	r1, [r3, #0]
 800561a:	4608      	mov	r0, r1
 800561c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005620:	4770      	bx	lr

08005622 <__sfputs_r>:
 8005622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005624:	4606      	mov	r6, r0
 8005626:	460f      	mov	r7, r1
 8005628:	4614      	mov	r4, r2
 800562a:	18d5      	adds	r5, r2, r3
 800562c:	42ac      	cmp	r4, r5
 800562e:	d101      	bne.n	8005634 <__sfputs_r+0x12>
 8005630:	2000      	movs	r0, #0
 8005632:	e007      	b.n	8005644 <__sfputs_r+0x22>
 8005634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005638:	463a      	mov	r2, r7
 800563a:	4630      	mov	r0, r6
 800563c:	f7ff ffda 	bl	80055f4 <__sfputc_r>
 8005640:	1c43      	adds	r3, r0, #1
 8005642:	d1f3      	bne.n	800562c <__sfputs_r+0xa>
 8005644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005648 <_vfiprintf_r>:
 8005648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564c:	460d      	mov	r5, r1
 800564e:	b09d      	sub	sp, #116	; 0x74
 8005650:	4614      	mov	r4, r2
 8005652:	4698      	mov	r8, r3
 8005654:	4606      	mov	r6, r0
 8005656:	b118      	cbz	r0, 8005660 <_vfiprintf_r+0x18>
 8005658:	6983      	ldr	r3, [r0, #24]
 800565a:	b90b      	cbnz	r3, 8005660 <_vfiprintf_r+0x18>
 800565c:	f7ff fde4 	bl	8005228 <__sinit>
 8005660:	4b89      	ldr	r3, [pc, #548]	; (8005888 <_vfiprintf_r+0x240>)
 8005662:	429d      	cmp	r5, r3
 8005664:	d11b      	bne.n	800569e <_vfiprintf_r+0x56>
 8005666:	6875      	ldr	r5, [r6, #4]
 8005668:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800566a:	07d9      	lsls	r1, r3, #31
 800566c:	d405      	bmi.n	800567a <_vfiprintf_r+0x32>
 800566e:	89ab      	ldrh	r3, [r5, #12]
 8005670:	059a      	lsls	r2, r3, #22
 8005672:	d402      	bmi.n	800567a <_vfiprintf_r+0x32>
 8005674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005676:	f7ff fe75 	bl	8005364 <__retarget_lock_acquire_recursive>
 800567a:	89ab      	ldrh	r3, [r5, #12]
 800567c:	071b      	lsls	r3, r3, #28
 800567e:	d501      	bpl.n	8005684 <_vfiprintf_r+0x3c>
 8005680:	692b      	ldr	r3, [r5, #16]
 8005682:	b9eb      	cbnz	r3, 80056c0 <_vfiprintf_r+0x78>
 8005684:	4629      	mov	r1, r5
 8005686:	4630      	mov	r0, r6
 8005688:	f7ff fc46 	bl	8004f18 <__swsetup_r>
 800568c:	b1c0      	cbz	r0, 80056c0 <_vfiprintf_r+0x78>
 800568e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005690:	07dc      	lsls	r4, r3, #31
 8005692:	d50e      	bpl.n	80056b2 <_vfiprintf_r+0x6a>
 8005694:	f04f 30ff 	mov.w	r0, #4294967295
 8005698:	b01d      	add	sp, #116	; 0x74
 800569a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800569e:	4b7b      	ldr	r3, [pc, #492]	; (800588c <_vfiprintf_r+0x244>)
 80056a0:	429d      	cmp	r5, r3
 80056a2:	d101      	bne.n	80056a8 <_vfiprintf_r+0x60>
 80056a4:	68b5      	ldr	r5, [r6, #8]
 80056a6:	e7df      	b.n	8005668 <_vfiprintf_r+0x20>
 80056a8:	4b79      	ldr	r3, [pc, #484]	; (8005890 <_vfiprintf_r+0x248>)
 80056aa:	429d      	cmp	r5, r3
 80056ac:	bf08      	it	eq
 80056ae:	68f5      	ldreq	r5, [r6, #12]
 80056b0:	e7da      	b.n	8005668 <_vfiprintf_r+0x20>
 80056b2:	89ab      	ldrh	r3, [r5, #12]
 80056b4:	0598      	lsls	r0, r3, #22
 80056b6:	d4ed      	bmi.n	8005694 <_vfiprintf_r+0x4c>
 80056b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056ba:	f7ff fe54 	bl	8005366 <__retarget_lock_release_recursive>
 80056be:	e7e9      	b.n	8005694 <_vfiprintf_r+0x4c>
 80056c0:	2300      	movs	r3, #0
 80056c2:	9309      	str	r3, [sp, #36]	; 0x24
 80056c4:	2320      	movs	r3, #32
 80056c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80056ce:	2330      	movs	r3, #48	; 0x30
 80056d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005894 <_vfiprintf_r+0x24c>
 80056d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056d8:	f04f 0901 	mov.w	r9, #1
 80056dc:	4623      	mov	r3, r4
 80056de:	469a      	mov	sl, r3
 80056e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056e4:	b10a      	cbz	r2, 80056ea <_vfiprintf_r+0xa2>
 80056e6:	2a25      	cmp	r2, #37	; 0x25
 80056e8:	d1f9      	bne.n	80056de <_vfiprintf_r+0x96>
 80056ea:	ebba 0b04 	subs.w	fp, sl, r4
 80056ee:	d00b      	beq.n	8005708 <_vfiprintf_r+0xc0>
 80056f0:	465b      	mov	r3, fp
 80056f2:	4622      	mov	r2, r4
 80056f4:	4629      	mov	r1, r5
 80056f6:	4630      	mov	r0, r6
 80056f8:	f7ff ff93 	bl	8005622 <__sfputs_r>
 80056fc:	3001      	adds	r0, #1
 80056fe:	f000 80aa 	beq.w	8005856 <_vfiprintf_r+0x20e>
 8005702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005704:	445a      	add	r2, fp
 8005706:	9209      	str	r2, [sp, #36]	; 0x24
 8005708:	f89a 3000 	ldrb.w	r3, [sl]
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 80a2 	beq.w	8005856 <_vfiprintf_r+0x20e>
 8005712:	2300      	movs	r3, #0
 8005714:	f04f 32ff 	mov.w	r2, #4294967295
 8005718:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800571c:	f10a 0a01 	add.w	sl, sl, #1
 8005720:	9304      	str	r3, [sp, #16]
 8005722:	9307      	str	r3, [sp, #28]
 8005724:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005728:	931a      	str	r3, [sp, #104]	; 0x68
 800572a:	4654      	mov	r4, sl
 800572c:	2205      	movs	r2, #5
 800572e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005732:	4858      	ldr	r0, [pc, #352]	; (8005894 <_vfiprintf_r+0x24c>)
 8005734:	f7fa fd4c 	bl	80001d0 <memchr>
 8005738:	9a04      	ldr	r2, [sp, #16]
 800573a:	b9d8      	cbnz	r0, 8005774 <_vfiprintf_r+0x12c>
 800573c:	06d1      	lsls	r1, r2, #27
 800573e:	bf44      	itt	mi
 8005740:	2320      	movmi	r3, #32
 8005742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005746:	0713      	lsls	r3, r2, #28
 8005748:	bf44      	itt	mi
 800574a:	232b      	movmi	r3, #43	; 0x2b
 800574c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005750:	f89a 3000 	ldrb.w	r3, [sl]
 8005754:	2b2a      	cmp	r3, #42	; 0x2a
 8005756:	d015      	beq.n	8005784 <_vfiprintf_r+0x13c>
 8005758:	9a07      	ldr	r2, [sp, #28]
 800575a:	4654      	mov	r4, sl
 800575c:	2000      	movs	r0, #0
 800575e:	f04f 0c0a 	mov.w	ip, #10
 8005762:	4621      	mov	r1, r4
 8005764:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005768:	3b30      	subs	r3, #48	; 0x30
 800576a:	2b09      	cmp	r3, #9
 800576c:	d94e      	bls.n	800580c <_vfiprintf_r+0x1c4>
 800576e:	b1b0      	cbz	r0, 800579e <_vfiprintf_r+0x156>
 8005770:	9207      	str	r2, [sp, #28]
 8005772:	e014      	b.n	800579e <_vfiprintf_r+0x156>
 8005774:	eba0 0308 	sub.w	r3, r0, r8
 8005778:	fa09 f303 	lsl.w	r3, r9, r3
 800577c:	4313      	orrs	r3, r2
 800577e:	9304      	str	r3, [sp, #16]
 8005780:	46a2      	mov	sl, r4
 8005782:	e7d2      	b.n	800572a <_vfiprintf_r+0xe2>
 8005784:	9b03      	ldr	r3, [sp, #12]
 8005786:	1d19      	adds	r1, r3, #4
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	9103      	str	r1, [sp, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	bfbb      	ittet	lt
 8005790:	425b      	neglt	r3, r3
 8005792:	f042 0202 	orrlt.w	r2, r2, #2
 8005796:	9307      	strge	r3, [sp, #28]
 8005798:	9307      	strlt	r3, [sp, #28]
 800579a:	bfb8      	it	lt
 800579c:	9204      	strlt	r2, [sp, #16]
 800579e:	7823      	ldrb	r3, [r4, #0]
 80057a0:	2b2e      	cmp	r3, #46	; 0x2e
 80057a2:	d10c      	bne.n	80057be <_vfiprintf_r+0x176>
 80057a4:	7863      	ldrb	r3, [r4, #1]
 80057a6:	2b2a      	cmp	r3, #42	; 0x2a
 80057a8:	d135      	bne.n	8005816 <_vfiprintf_r+0x1ce>
 80057aa:	9b03      	ldr	r3, [sp, #12]
 80057ac:	1d1a      	adds	r2, r3, #4
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	9203      	str	r2, [sp, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	bfb8      	it	lt
 80057b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80057ba:	3402      	adds	r4, #2
 80057bc:	9305      	str	r3, [sp, #20]
 80057be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80058a4 <_vfiprintf_r+0x25c>
 80057c2:	7821      	ldrb	r1, [r4, #0]
 80057c4:	2203      	movs	r2, #3
 80057c6:	4650      	mov	r0, sl
 80057c8:	f7fa fd02 	bl	80001d0 <memchr>
 80057cc:	b140      	cbz	r0, 80057e0 <_vfiprintf_r+0x198>
 80057ce:	2340      	movs	r3, #64	; 0x40
 80057d0:	eba0 000a 	sub.w	r0, r0, sl
 80057d4:	fa03 f000 	lsl.w	r0, r3, r0
 80057d8:	9b04      	ldr	r3, [sp, #16]
 80057da:	4303      	orrs	r3, r0
 80057dc:	3401      	adds	r4, #1
 80057de:	9304      	str	r3, [sp, #16]
 80057e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057e4:	482c      	ldr	r0, [pc, #176]	; (8005898 <_vfiprintf_r+0x250>)
 80057e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057ea:	2206      	movs	r2, #6
 80057ec:	f7fa fcf0 	bl	80001d0 <memchr>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d03f      	beq.n	8005874 <_vfiprintf_r+0x22c>
 80057f4:	4b29      	ldr	r3, [pc, #164]	; (800589c <_vfiprintf_r+0x254>)
 80057f6:	bb1b      	cbnz	r3, 8005840 <_vfiprintf_r+0x1f8>
 80057f8:	9b03      	ldr	r3, [sp, #12]
 80057fa:	3307      	adds	r3, #7
 80057fc:	f023 0307 	bic.w	r3, r3, #7
 8005800:	3308      	adds	r3, #8
 8005802:	9303      	str	r3, [sp, #12]
 8005804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005806:	443b      	add	r3, r7
 8005808:	9309      	str	r3, [sp, #36]	; 0x24
 800580a:	e767      	b.n	80056dc <_vfiprintf_r+0x94>
 800580c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005810:	460c      	mov	r4, r1
 8005812:	2001      	movs	r0, #1
 8005814:	e7a5      	b.n	8005762 <_vfiprintf_r+0x11a>
 8005816:	2300      	movs	r3, #0
 8005818:	3401      	adds	r4, #1
 800581a:	9305      	str	r3, [sp, #20]
 800581c:	4619      	mov	r1, r3
 800581e:	f04f 0c0a 	mov.w	ip, #10
 8005822:	4620      	mov	r0, r4
 8005824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005828:	3a30      	subs	r2, #48	; 0x30
 800582a:	2a09      	cmp	r2, #9
 800582c:	d903      	bls.n	8005836 <_vfiprintf_r+0x1ee>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0c5      	beq.n	80057be <_vfiprintf_r+0x176>
 8005832:	9105      	str	r1, [sp, #20]
 8005834:	e7c3      	b.n	80057be <_vfiprintf_r+0x176>
 8005836:	fb0c 2101 	mla	r1, ip, r1, r2
 800583a:	4604      	mov	r4, r0
 800583c:	2301      	movs	r3, #1
 800583e:	e7f0      	b.n	8005822 <_vfiprintf_r+0x1da>
 8005840:	ab03      	add	r3, sp, #12
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	462a      	mov	r2, r5
 8005846:	4b16      	ldr	r3, [pc, #88]	; (80058a0 <_vfiprintf_r+0x258>)
 8005848:	a904      	add	r1, sp, #16
 800584a:	4630      	mov	r0, r6
 800584c:	f3af 8000 	nop.w
 8005850:	4607      	mov	r7, r0
 8005852:	1c78      	adds	r0, r7, #1
 8005854:	d1d6      	bne.n	8005804 <_vfiprintf_r+0x1bc>
 8005856:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005858:	07d9      	lsls	r1, r3, #31
 800585a:	d405      	bmi.n	8005868 <_vfiprintf_r+0x220>
 800585c:	89ab      	ldrh	r3, [r5, #12]
 800585e:	059a      	lsls	r2, r3, #22
 8005860:	d402      	bmi.n	8005868 <_vfiprintf_r+0x220>
 8005862:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005864:	f7ff fd7f 	bl	8005366 <__retarget_lock_release_recursive>
 8005868:	89ab      	ldrh	r3, [r5, #12]
 800586a:	065b      	lsls	r3, r3, #25
 800586c:	f53f af12 	bmi.w	8005694 <_vfiprintf_r+0x4c>
 8005870:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005872:	e711      	b.n	8005698 <_vfiprintf_r+0x50>
 8005874:	ab03      	add	r3, sp, #12
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	462a      	mov	r2, r5
 800587a:	4b09      	ldr	r3, [pc, #36]	; (80058a0 <_vfiprintf_r+0x258>)
 800587c:	a904      	add	r1, sp, #16
 800587e:	4630      	mov	r0, r6
 8005880:	f000 f880 	bl	8005984 <_printf_i>
 8005884:	e7e4      	b.n	8005850 <_vfiprintf_r+0x208>
 8005886:	bf00      	nop
 8005888:	08005f34 	.word	0x08005f34
 800588c:	08005f54 	.word	0x08005f54
 8005890:	08005f14 	.word	0x08005f14
 8005894:	08005f74 	.word	0x08005f74
 8005898:	08005f7e 	.word	0x08005f7e
 800589c:	00000000 	.word	0x00000000
 80058a0:	08005623 	.word	0x08005623
 80058a4:	08005f7a 	.word	0x08005f7a

080058a8 <_printf_common>:
 80058a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058ac:	4616      	mov	r6, r2
 80058ae:	4699      	mov	r9, r3
 80058b0:	688a      	ldr	r2, [r1, #8]
 80058b2:	690b      	ldr	r3, [r1, #16]
 80058b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058b8:	4293      	cmp	r3, r2
 80058ba:	bfb8      	it	lt
 80058bc:	4613      	movlt	r3, r2
 80058be:	6033      	str	r3, [r6, #0]
 80058c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058c4:	4607      	mov	r7, r0
 80058c6:	460c      	mov	r4, r1
 80058c8:	b10a      	cbz	r2, 80058ce <_printf_common+0x26>
 80058ca:	3301      	adds	r3, #1
 80058cc:	6033      	str	r3, [r6, #0]
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	0699      	lsls	r1, r3, #26
 80058d2:	bf42      	ittt	mi
 80058d4:	6833      	ldrmi	r3, [r6, #0]
 80058d6:	3302      	addmi	r3, #2
 80058d8:	6033      	strmi	r3, [r6, #0]
 80058da:	6825      	ldr	r5, [r4, #0]
 80058dc:	f015 0506 	ands.w	r5, r5, #6
 80058e0:	d106      	bne.n	80058f0 <_printf_common+0x48>
 80058e2:	f104 0a19 	add.w	sl, r4, #25
 80058e6:	68e3      	ldr	r3, [r4, #12]
 80058e8:	6832      	ldr	r2, [r6, #0]
 80058ea:	1a9b      	subs	r3, r3, r2
 80058ec:	42ab      	cmp	r3, r5
 80058ee:	dc26      	bgt.n	800593e <_printf_common+0x96>
 80058f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058f4:	1e13      	subs	r3, r2, #0
 80058f6:	6822      	ldr	r2, [r4, #0]
 80058f8:	bf18      	it	ne
 80058fa:	2301      	movne	r3, #1
 80058fc:	0692      	lsls	r2, r2, #26
 80058fe:	d42b      	bmi.n	8005958 <_printf_common+0xb0>
 8005900:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005904:	4649      	mov	r1, r9
 8005906:	4638      	mov	r0, r7
 8005908:	47c0      	blx	r8
 800590a:	3001      	adds	r0, #1
 800590c:	d01e      	beq.n	800594c <_printf_common+0xa4>
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	68e5      	ldr	r5, [r4, #12]
 8005912:	6832      	ldr	r2, [r6, #0]
 8005914:	f003 0306 	and.w	r3, r3, #6
 8005918:	2b04      	cmp	r3, #4
 800591a:	bf08      	it	eq
 800591c:	1aad      	subeq	r5, r5, r2
 800591e:	68a3      	ldr	r3, [r4, #8]
 8005920:	6922      	ldr	r2, [r4, #16]
 8005922:	bf0c      	ite	eq
 8005924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005928:	2500      	movne	r5, #0
 800592a:	4293      	cmp	r3, r2
 800592c:	bfc4      	itt	gt
 800592e:	1a9b      	subgt	r3, r3, r2
 8005930:	18ed      	addgt	r5, r5, r3
 8005932:	2600      	movs	r6, #0
 8005934:	341a      	adds	r4, #26
 8005936:	42b5      	cmp	r5, r6
 8005938:	d11a      	bne.n	8005970 <_printf_common+0xc8>
 800593a:	2000      	movs	r0, #0
 800593c:	e008      	b.n	8005950 <_printf_common+0xa8>
 800593e:	2301      	movs	r3, #1
 8005940:	4652      	mov	r2, sl
 8005942:	4649      	mov	r1, r9
 8005944:	4638      	mov	r0, r7
 8005946:	47c0      	blx	r8
 8005948:	3001      	adds	r0, #1
 800594a:	d103      	bne.n	8005954 <_printf_common+0xac>
 800594c:	f04f 30ff 	mov.w	r0, #4294967295
 8005950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005954:	3501      	adds	r5, #1
 8005956:	e7c6      	b.n	80058e6 <_printf_common+0x3e>
 8005958:	18e1      	adds	r1, r4, r3
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	2030      	movs	r0, #48	; 0x30
 800595e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005962:	4422      	add	r2, r4
 8005964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005968:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800596c:	3302      	adds	r3, #2
 800596e:	e7c7      	b.n	8005900 <_printf_common+0x58>
 8005970:	2301      	movs	r3, #1
 8005972:	4622      	mov	r2, r4
 8005974:	4649      	mov	r1, r9
 8005976:	4638      	mov	r0, r7
 8005978:	47c0      	blx	r8
 800597a:	3001      	adds	r0, #1
 800597c:	d0e6      	beq.n	800594c <_printf_common+0xa4>
 800597e:	3601      	adds	r6, #1
 8005980:	e7d9      	b.n	8005936 <_printf_common+0x8e>
	...

08005984 <_printf_i>:
 8005984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005988:	7e0f      	ldrb	r7, [r1, #24]
 800598a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800598c:	2f78      	cmp	r7, #120	; 0x78
 800598e:	4691      	mov	r9, r2
 8005990:	4680      	mov	r8, r0
 8005992:	460c      	mov	r4, r1
 8005994:	469a      	mov	sl, r3
 8005996:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800599a:	d807      	bhi.n	80059ac <_printf_i+0x28>
 800599c:	2f62      	cmp	r7, #98	; 0x62
 800599e:	d80a      	bhi.n	80059b6 <_printf_i+0x32>
 80059a0:	2f00      	cmp	r7, #0
 80059a2:	f000 80d8 	beq.w	8005b56 <_printf_i+0x1d2>
 80059a6:	2f58      	cmp	r7, #88	; 0x58
 80059a8:	f000 80a3 	beq.w	8005af2 <_printf_i+0x16e>
 80059ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059b4:	e03a      	b.n	8005a2c <_printf_i+0xa8>
 80059b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059ba:	2b15      	cmp	r3, #21
 80059bc:	d8f6      	bhi.n	80059ac <_printf_i+0x28>
 80059be:	a101      	add	r1, pc, #4	; (adr r1, 80059c4 <_printf_i+0x40>)
 80059c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059c4:	08005a1d 	.word	0x08005a1d
 80059c8:	08005a31 	.word	0x08005a31
 80059cc:	080059ad 	.word	0x080059ad
 80059d0:	080059ad 	.word	0x080059ad
 80059d4:	080059ad 	.word	0x080059ad
 80059d8:	080059ad 	.word	0x080059ad
 80059dc:	08005a31 	.word	0x08005a31
 80059e0:	080059ad 	.word	0x080059ad
 80059e4:	080059ad 	.word	0x080059ad
 80059e8:	080059ad 	.word	0x080059ad
 80059ec:	080059ad 	.word	0x080059ad
 80059f0:	08005b3d 	.word	0x08005b3d
 80059f4:	08005a61 	.word	0x08005a61
 80059f8:	08005b1f 	.word	0x08005b1f
 80059fc:	080059ad 	.word	0x080059ad
 8005a00:	080059ad 	.word	0x080059ad
 8005a04:	08005b5f 	.word	0x08005b5f
 8005a08:	080059ad 	.word	0x080059ad
 8005a0c:	08005a61 	.word	0x08005a61
 8005a10:	080059ad 	.word	0x080059ad
 8005a14:	080059ad 	.word	0x080059ad
 8005a18:	08005b27 	.word	0x08005b27
 8005a1c:	682b      	ldr	r3, [r5, #0]
 8005a1e:	1d1a      	adds	r2, r3, #4
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	602a      	str	r2, [r5, #0]
 8005a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e0a3      	b.n	8005b78 <_printf_i+0x1f4>
 8005a30:	6820      	ldr	r0, [r4, #0]
 8005a32:	6829      	ldr	r1, [r5, #0]
 8005a34:	0606      	lsls	r6, r0, #24
 8005a36:	f101 0304 	add.w	r3, r1, #4
 8005a3a:	d50a      	bpl.n	8005a52 <_printf_i+0xce>
 8005a3c:	680e      	ldr	r6, [r1, #0]
 8005a3e:	602b      	str	r3, [r5, #0]
 8005a40:	2e00      	cmp	r6, #0
 8005a42:	da03      	bge.n	8005a4c <_printf_i+0xc8>
 8005a44:	232d      	movs	r3, #45	; 0x2d
 8005a46:	4276      	negs	r6, r6
 8005a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a4c:	485e      	ldr	r0, [pc, #376]	; (8005bc8 <_printf_i+0x244>)
 8005a4e:	230a      	movs	r3, #10
 8005a50:	e019      	b.n	8005a86 <_printf_i+0x102>
 8005a52:	680e      	ldr	r6, [r1, #0]
 8005a54:	602b      	str	r3, [r5, #0]
 8005a56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a5a:	bf18      	it	ne
 8005a5c:	b236      	sxthne	r6, r6
 8005a5e:	e7ef      	b.n	8005a40 <_printf_i+0xbc>
 8005a60:	682b      	ldr	r3, [r5, #0]
 8005a62:	6820      	ldr	r0, [r4, #0]
 8005a64:	1d19      	adds	r1, r3, #4
 8005a66:	6029      	str	r1, [r5, #0]
 8005a68:	0601      	lsls	r1, r0, #24
 8005a6a:	d501      	bpl.n	8005a70 <_printf_i+0xec>
 8005a6c:	681e      	ldr	r6, [r3, #0]
 8005a6e:	e002      	b.n	8005a76 <_printf_i+0xf2>
 8005a70:	0646      	lsls	r6, r0, #25
 8005a72:	d5fb      	bpl.n	8005a6c <_printf_i+0xe8>
 8005a74:	881e      	ldrh	r6, [r3, #0]
 8005a76:	4854      	ldr	r0, [pc, #336]	; (8005bc8 <_printf_i+0x244>)
 8005a78:	2f6f      	cmp	r7, #111	; 0x6f
 8005a7a:	bf0c      	ite	eq
 8005a7c:	2308      	moveq	r3, #8
 8005a7e:	230a      	movne	r3, #10
 8005a80:	2100      	movs	r1, #0
 8005a82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a86:	6865      	ldr	r5, [r4, #4]
 8005a88:	60a5      	str	r5, [r4, #8]
 8005a8a:	2d00      	cmp	r5, #0
 8005a8c:	bfa2      	ittt	ge
 8005a8e:	6821      	ldrge	r1, [r4, #0]
 8005a90:	f021 0104 	bicge.w	r1, r1, #4
 8005a94:	6021      	strge	r1, [r4, #0]
 8005a96:	b90e      	cbnz	r6, 8005a9c <_printf_i+0x118>
 8005a98:	2d00      	cmp	r5, #0
 8005a9a:	d04d      	beq.n	8005b38 <_printf_i+0x1b4>
 8005a9c:	4615      	mov	r5, r2
 8005a9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005aa2:	fb03 6711 	mls	r7, r3, r1, r6
 8005aa6:	5dc7      	ldrb	r7, [r0, r7]
 8005aa8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005aac:	4637      	mov	r7, r6
 8005aae:	42bb      	cmp	r3, r7
 8005ab0:	460e      	mov	r6, r1
 8005ab2:	d9f4      	bls.n	8005a9e <_printf_i+0x11a>
 8005ab4:	2b08      	cmp	r3, #8
 8005ab6:	d10b      	bne.n	8005ad0 <_printf_i+0x14c>
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	07de      	lsls	r6, r3, #31
 8005abc:	d508      	bpl.n	8005ad0 <_printf_i+0x14c>
 8005abe:	6923      	ldr	r3, [r4, #16]
 8005ac0:	6861      	ldr	r1, [r4, #4]
 8005ac2:	4299      	cmp	r1, r3
 8005ac4:	bfde      	ittt	le
 8005ac6:	2330      	movle	r3, #48	; 0x30
 8005ac8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005acc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ad0:	1b52      	subs	r2, r2, r5
 8005ad2:	6122      	str	r2, [r4, #16]
 8005ad4:	f8cd a000 	str.w	sl, [sp]
 8005ad8:	464b      	mov	r3, r9
 8005ada:	aa03      	add	r2, sp, #12
 8005adc:	4621      	mov	r1, r4
 8005ade:	4640      	mov	r0, r8
 8005ae0:	f7ff fee2 	bl	80058a8 <_printf_common>
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d14c      	bne.n	8005b82 <_printf_i+0x1fe>
 8005ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aec:	b004      	add	sp, #16
 8005aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af2:	4835      	ldr	r0, [pc, #212]	; (8005bc8 <_printf_i+0x244>)
 8005af4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005af8:	6829      	ldr	r1, [r5, #0]
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b00:	6029      	str	r1, [r5, #0]
 8005b02:	061d      	lsls	r5, r3, #24
 8005b04:	d514      	bpl.n	8005b30 <_printf_i+0x1ac>
 8005b06:	07df      	lsls	r7, r3, #31
 8005b08:	bf44      	itt	mi
 8005b0a:	f043 0320 	orrmi.w	r3, r3, #32
 8005b0e:	6023      	strmi	r3, [r4, #0]
 8005b10:	b91e      	cbnz	r6, 8005b1a <_printf_i+0x196>
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	f023 0320 	bic.w	r3, r3, #32
 8005b18:	6023      	str	r3, [r4, #0]
 8005b1a:	2310      	movs	r3, #16
 8005b1c:	e7b0      	b.n	8005a80 <_printf_i+0xfc>
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	f043 0320 	orr.w	r3, r3, #32
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	2378      	movs	r3, #120	; 0x78
 8005b28:	4828      	ldr	r0, [pc, #160]	; (8005bcc <_printf_i+0x248>)
 8005b2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b2e:	e7e3      	b.n	8005af8 <_printf_i+0x174>
 8005b30:	0659      	lsls	r1, r3, #25
 8005b32:	bf48      	it	mi
 8005b34:	b2b6      	uxthmi	r6, r6
 8005b36:	e7e6      	b.n	8005b06 <_printf_i+0x182>
 8005b38:	4615      	mov	r5, r2
 8005b3a:	e7bb      	b.n	8005ab4 <_printf_i+0x130>
 8005b3c:	682b      	ldr	r3, [r5, #0]
 8005b3e:	6826      	ldr	r6, [r4, #0]
 8005b40:	6961      	ldr	r1, [r4, #20]
 8005b42:	1d18      	adds	r0, r3, #4
 8005b44:	6028      	str	r0, [r5, #0]
 8005b46:	0635      	lsls	r5, r6, #24
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	d501      	bpl.n	8005b50 <_printf_i+0x1cc>
 8005b4c:	6019      	str	r1, [r3, #0]
 8005b4e:	e002      	b.n	8005b56 <_printf_i+0x1d2>
 8005b50:	0670      	lsls	r0, r6, #25
 8005b52:	d5fb      	bpl.n	8005b4c <_printf_i+0x1c8>
 8005b54:	8019      	strh	r1, [r3, #0]
 8005b56:	2300      	movs	r3, #0
 8005b58:	6123      	str	r3, [r4, #16]
 8005b5a:	4615      	mov	r5, r2
 8005b5c:	e7ba      	b.n	8005ad4 <_printf_i+0x150>
 8005b5e:	682b      	ldr	r3, [r5, #0]
 8005b60:	1d1a      	adds	r2, r3, #4
 8005b62:	602a      	str	r2, [r5, #0]
 8005b64:	681d      	ldr	r5, [r3, #0]
 8005b66:	6862      	ldr	r2, [r4, #4]
 8005b68:	2100      	movs	r1, #0
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	f7fa fb30 	bl	80001d0 <memchr>
 8005b70:	b108      	cbz	r0, 8005b76 <_printf_i+0x1f2>
 8005b72:	1b40      	subs	r0, r0, r5
 8005b74:	6060      	str	r0, [r4, #4]
 8005b76:	6863      	ldr	r3, [r4, #4]
 8005b78:	6123      	str	r3, [r4, #16]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b80:	e7a8      	b.n	8005ad4 <_printf_i+0x150>
 8005b82:	6923      	ldr	r3, [r4, #16]
 8005b84:	462a      	mov	r2, r5
 8005b86:	4649      	mov	r1, r9
 8005b88:	4640      	mov	r0, r8
 8005b8a:	47d0      	blx	sl
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	d0ab      	beq.n	8005ae8 <_printf_i+0x164>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	079b      	lsls	r3, r3, #30
 8005b94:	d413      	bmi.n	8005bbe <_printf_i+0x23a>
 8005b96:	68e0      	ldr	r0, [r4, #12]
 8005b98:	9b03      	ldr	r3, [sp, #12]
 8005b9a:	4298      	cmp	r0, r3
 8005b9c:	bfb8      	it	lt
 8005b9e:	4618      	movlt	r0, r3
 8005ba0:	e7a4      	b.n	8005aec <_printf_i+0x168>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	4632      	mov	r2, r6
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	4640      	mov	r0, r8
 8005baa:	47d0      	blx	sl
 8005bac:	3001      	adds	r0, #1
 8005bae:	d09b      	beq.n	8005ae8 <_printf_i+0x164>
 8005bb0:	3501      	adds	r5, #1
 8005bb2:	68e3      	ldr	r3, [r4, #12]
 8005bb4:	9903      	ldr	r1, [sp, #12]
 8005bb6:	1a5b      	subs	r3, r3, r1
 8005bb8:	42ab      	cmp	r3, r5
 8005bba:	dcf2      	bgt.n	8005ba2 <_printf_i+0x21e>
 8005bbc:	e7eb      	b.n	8005b96 <_printf_i+0x212>
 8005bbe:	2500      	movs	r5, #0
 8005bc0:	f104 0619 	add.w	r6, r4, #25
 8005bc4:	e7f5      	b.n	8005bb2 <_printf_i+0x22e>
 8005bc6:	bf00      	nop
 8005bc8:	08005f85 	.word	0x08005f85
 8005bcc:	08005f96 	.word	0x08005f96

08005bd0 <_sbrk_r>:
 8005bd0:	b538      	push	{r3, r4, r5, lr}
 8005bd2:	4d06      	ldr	r5, [pc, #24]	; (8005bec <_sbrk_r+0x1c>)
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	4608      	mov	r0, r1
 8005bda:	602b      	str	r3, [r5, #0]
 8005bdc:	f7fb fb66 	bl	80012ac <_sbrk>
 8005be0:	1c43      	adds	r3, r0, #1
 8005be2:	d102      	bne.n	8005bea <_sbrk_r+0x1a>
 8005be4:	682b      	ldr	r3, [r5, #0]
 8005be6:	b103      	cbz	r3, 8005bea <_sbrk_r+0x1a>
 8005be8:	6023      	str	r3, [r4, #0]
 8005bea:	bd38      	pop	{r3, r4, r5, pc}
 8005bec:	20002108 	.word	0x20002108

08005bf0 <__sread>:
 8005bf0:	b510      	push	{r4, lr}
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf8:	f000 f8a0 	bl	8005d3c <_read_r>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	bfab      	itete	ge
 8005c00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c02:	89a3      	ldrhlt	r3, [r4, #12]
 8005c04:	181b      	addge	r3, r3, r0
 8005c06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c0a:	bfac      	ite	ge
 8005c0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c0e:	81a3      	strhlt	r3, [r4, #12]
 8005c10:	bd10      	pop	{r4, pc}

08005c12 <__swrite>:
 8005c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c16:	461f      	mov	r7, r3
 8005c18:	898b      	ldrh	r3, [r1, #12]
 8005c1a:	05db      	lsls	r3, r3, #23
 8005c1c:	4605      	mov	r5, r0
 8005c1e:	460c      	mov	r4, r1
 8005c20:	4616      	mov	r6, r2
 8005c22:	d505      	bpl.n	8005c30 <__swrite+0x1e>
 8005c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c28:	2302      	movs	r3, #2
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f000 f868 	bl	8005d00 <_lseek_r>
 8005c30:	89a3      	ldrh	r3, [r4, #12]
 8005c32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c3a:	81a3      	strh	r3, [r4, #12]
 8005c3c:	4632      	mov	r2, r6
 8005c3e:	463b      	mov	r3, r7
 8005c40:	4628      	mov	r0, r5
 8005c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c46:	f000 b817 	b.w	8005c78 <_write_r>

08005c4a <__sseek>:
 8005c4a:	b510      	push	{r4, lr}
 8005c4c:	460c      	mov	r4, r1
 8005c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c52:	f000 f855 	bl	8005d00 <_lseek_r>
 8005c56:	1c43      	adds	r3, r0, #1
 8005c58:	89a3      	ldrh	r3, [r4, #12]
 8005c5a:	bf15      	itete	ne
 8005c5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c66:	81a3      	strheq	r3, [r4, #12]
 8005c68:	bf18      	it	ne
 8005c6a:	81a3      	strhne	r3, [r4, #12]
 8005c6c:	bd10      	pop	{r4, pc}

08005c6e <__sclose>:
 8005c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c72:	f000 b813 	b.w	8005c9c <_close_r>
	...

08005c78 <_write_r>:
 8005c78:	b538      	push	{r3, r4, r5, lr}
 8005c7a:	4d07      	ldr	r5, [pc, #28]	; (8005c98 <_write_r+0x20>)
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	4608      	mov	r0, r1
 8005c80:	4611      	mov	r1, r2
 8005c82:	2200      	movs	r2, #0
 8005c84:	602a      	str	r2, [r5, #0]
 8005c86:	461a      	mov	r2, r3
 8005c88:	f7fa fec3 	bl	8000a12 <_write>
 8005c8c:	1c43      	adds	r3, r0, #1
 8005c8e:	d102      	bne.n	8005c96 <_write_r+0x1e>
 8005c90:	682b      	ldr	r3, [r5, #0]
 8005c92:	b103      	cbz	r3, 8005c96 <_write_r+0x1e>
 8005c94:	6023      	str	r3, [r4, #0]
 8005c96:	bd38      	pop	{r3, r4, r5, pc}
 8005c98:	20002108 	.word	0x20002108

08005c9c <_close_r>:
 8005c9c:	b538      	push	{r3, r4, r5, lr}
 8005c9e:	4d06      	ldr	r5, [pc, #24]	; (8005cb8 <_close_r+0x1c>)
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	4608      	mov	r0, r1
 8005ca6:	602b      	str	r3, [r5, #0]
 8005ca8:	f7fb facb 	bl	8001242 <_close>
 8005cac:	1c43      	adds	r3, r0, #1
 8005cae:	d102      	bne.n	8005cb6 <_close_r+0x1a>
 8005cb0:	682b      	ldr	r3, [r5, #0]
 8005cb2:	b103      	cbz	r3, 8005cb6 <_close_r+0x1a>
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	bd38      	pop	{r3, r4, r5, pc}
 8005cb8:	20002108 	.word	0x20002108

08005cbc <_fstat_r>:
 8005cbc:	b538      	push	{r3, r4, r5, lr}
 8005cbe:	4d07      	ldr	r5, [pc, #28]	; (8005cdc <_fstat_r+0x20>)
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	4604      	mov	r4, r0
 8005cc4:	4608      	mov	r0, r1
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	602b      	str	r3, [r5, #0]
 8005cca:	f7fb fac6 	bl	800125a <_fstat>
 8005cce:	1c43      	adds	r3, r0, #1
 8005cd0:	d102      	bne.n	8005cd8 <_fstat_r+0x1c>
 8005cd2:	682b      	ldr	r3, [r5, #0]
 8005cd4:	b103      	cbz	r3, 8005cd8 <_fstat_r+0x1c>
 8005cd6:	6023      	str	r3, [r4, #0]
 8005cd8:	bd38      	pop	{r3, r4, r5, pc}
 8005cda:	bf00      	nop
 8005cdc:	20002108 	.word	0x20002108

08005ce0 <_isatty_r>:
 8005ce0:	b538      	push	{r3, r4, r5, lr}
 8005ce2:	4d06      	ldr	r5, [pc, #24]	; (8005cfc <_isatty_r+0x1c>)
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	4608      	mov	r0, r1
 8005cea:	602b      	str	r3, [r5, #0]
 8005cec:	f7fb fac5 	bl	800127a <_isatty>
 8005cf0:	1c43      	adds	r3, r0, #1
 8005cf2:	d102      	bne.n	8005cfa <_isatty_r+0x1a>
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	b103      	cbz	r3, 8005cfa <_isatty_r+0x1a>
 8005cf8:	6023      	str	r3, [r4, #0]
 8005cfa:	bd38      	pop	{r3, r4, r5, pc}
 8005cfc:	20002108 	.word	0x20002108

08005d00 <_lseek_r>:
 8005d00:	b538      	push	{r3, r4, r5, lr}
 8005d02:	4d07      	ldr	r5, [pc, #28]	; (8005d20 <_lseek_r+0x20>)
 8005d04:	4604      	mov	r4, r0
 8005d06:	4608      	mov	r0, r1
 8005d08:	4611      	mov	r1, r2
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	602a      	str	r2, [r5, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f7fb fabe 	bl	8001290 <_lseek>
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	d102      	bne.n	8005d1e <_lseek_r+0x1e>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	b103      	cbz	r3, 8005d1e <_lseek_r+0x1e>
 8005d1c:	6023      	str	r3, [r4, #0]
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}
 8005d20:	20002108 	.word	0x20002108

08005d24 <__malloc_lock>:
 8005d24:	4801      	ldr	r0, [pc, #4]	; (8005d2c <__malloc_lock+0x8>)
 8005d26:	f7ff bb1d 	b.w	8005364 <__retarget_lock_acquire_recursive>
 8005d2a:	bf00      	nop
 8005d2c:	200020fc 	.word	0x200020fc

08005d30 <__malloc_unlock>:
 8005d30:	4801      	ldr	r0, [pc, #4]	; (8005d38 <__malloc_unlock+0x8>)
 8005d32:	f7ff bb18 	b.w	8005366 <__retarget_lock_release_recursive>
 8005d36:	bf00      	nop
 8005d38:	200020fc 	.word	0x200020fc

08005d3c <_read_r>:
 8005d3c:	b538      	push	{r3, r4, r5, lr}
 8005d3e:	4d07      	ldr	r5, [pc, #28]	; (8005d5c <_read_r+0x20>)
 8005d40:	4604      	mov	r4, r0
 8005d42:	4608      	mov	r0, r1
 8005d44:	4611      	mov	r1, r2
 8005d46:	2200      	movs	r2, #0
 8005d48:	602a      	str	r2, [r5, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f7fb fa5c 	bl	8001208 <_read>
 8005d50:	1c43      	adds	r3, r0, #1
 8005d52:	d102      	bne.n	8005d5a <_read_r+0x1e>
 8005d54:	682b      	ldr	r3, [r5, #0]
 8005d56:	b103      	cbz	r3, 8005d5a <_read_r+0x1e>
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	bd38      	pop	{r3, r4, r5, pc}
 8005d5c:	20002108 	.word	0x20002108

08005d60 <_init>:
 8005d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d62:	bf00      	nop
 8005d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d66:	bc08      	pop	{r3}
 8005d68:	469e      	mov	lr, r3
 8005d6a:	4770      	bx	lr

08005d6c <_fini>:
 8005d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6e:	bf00      	nop
 8005d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d72:	bc08      	pop	{r3}
 8005d74:	469e      	mov	lr, r3
 8005d76:	4770      	bx	lr
