
Coffee_Printer_Debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ee4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08009184  08009184  00019184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080093ec  080093ec  000193ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080093f4  080093f4  000193f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080093f8  080093f8  000193f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  080093fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0007a2d0  24000074  08009470  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2407a344  08009470  0002a344  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000178d2  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000290b  00000000  00000000  00037974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001160  00000000  00000000  0003a280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001068  00000000  00000000  0003b3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038113  00000000  00000000  0003c448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017aff  00000000  00000000  0007455b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016447d  00000000  00000000  0008c05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f04d7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000519c  00000000  00000000  001f0528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800916c 	.word	0x0800916c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	0800916c 	.word	0x0800916c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <convertStepsAndCommand>:
    	microDelay(delay);
	}
}
//------------------------------------------------------------------------------------------
void convertStepsAndCommand(uint8_t *data, uint16_t *steps, uint8_t *command)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
    *command = (data[1] & MASK_FOR_COMMAND)>>4;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3301      	adds	r3, #1
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	091b      	lsrs	r3, r3, #4
 8000698:	b2da      	uxtb	r2, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	701a      	strb	r2, [r3, #0]
    *steps = ((data[1] & MASK_FOR_STEPS)<<8) | data[0];
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	3301      	adds	r3, #1
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	021b      	lsls	r3, r3, #8
 80006a6:	b21b      	sxth	r3, r3
 80006a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80006ac:	b21a      	sxth	r2, r3
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b21b      	sxth	r3, r3
 80006b4:	4313      	orrs	r3, r2
 80006b6:	b21b      	sxth	r3, r3
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	801a      	strh	r2, [r3, #0]
}
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
	...

080006cc <commandHandler>:
//------------------------------------------------------------------------------------------
void commandHandler(uint16_t steps, uint8_t command)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	460a      	mov	r2, r1
 80006d6:	80fb      	strh	r3, [r7, #6]
 80006d8:	4613      	mov	r3, r2
 80006da:	717b      	strb	r3, [r7, #5]
	switch (command) {
 80006dc:	797b      	ldrb	r3, [r7, #5]
 80006de:	2b0f      	cmp	r3, #15
 80006e0:	d83f      	bhi.n	8000762 <commandHandler+0x96>
 80006e2:	a201      	add	r2, pc, #4	; (adr r2, 80006e8 <commandHandler+0x1c>)
 80006e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e8:	08000761 	.word	0x08000761
 80006ec:	08000763 	.word	0x08000763
 80006f0:	08000763 	.word	0x08000763
 80006f4:	08000739 	.word	0x08000739
 80006f8:	08000763 	.word	0x08000763
 80006fc:	08000749 	.word	0x08000749
 8000700:	08000751 	.word	0x08000751
 8000704:	08000763 	.word	0x08000763
 8000708:	08000763 	.word	0x08000763
 800070c:	08000759 	.word	0x08000759
 8000710:	08000741 	.word	0x08000741
 8000714:	08000763 	.word	0x08000763
 8000718:	08000731 	.word	0x08000731
 800071c:	08000763 	.word	0x08000763
 8000720:	08000763 	.word	0x08000763
 8000724:	08000729 	.word	0x08000729
	case CMD_MOVE_TO_STARTING_POINT:
		/*
		 * no limit switches in the prototype yet
		 * */
		printf("Case CMD_MOVE_TO_STARTING_POINT!!! \n");
 8000728:	4810      	ldr	r0, [pc, #64]	; (800076c <commandHandler+0xa0>)
 800072a:	f007 fda1 	bl	8008270 <puts>
	  break;
 800072e:	e018      	b.n	8000762 <commandHandler+0x96>
	case CMD_UP_THE_NEEDLE:
		printf("Case CMD_UP_THE_NEEDLE!!! \n");
 8000730:	480f      	ldr	r0, [pc, #60]	; (8000770 <commandHandler+0xa4>)
 8000732:	f007 fd9d 	bl	8008270 <puts>
		//stepMotorUpDown(steps, UP, SPEED_DELAY_FOR_UP_DOWN);
	  break;
 8000736:	e014      	b.n	8000762 <commandHandler+0x96>
	case CMD_DOWN_THE_NEEDLE:
		printf("Case CMD_DOWN_THE_NEEDLE!!! \n");
 8000738:	480e      	ldr	r0, [pc, #56]	; (8000774 <commandHandler+0xa8>)
 800073a:	f007 fd99 	bl	8008270 <puts>
		//stepMotorUpDown(steps, DOWN, SPEED_DELAY_FOR_UP_DOWN);
	  break;
 800073e:	e010      	b.n	8000762 <commandHandler+0x96>
	case CMD_ROTATION_CLOCKWISE:
		printf("Case CMD_ROTATION_CLOCKWISE!!! \n");
 8000740:	480d      	ldr	r0, [pc, #52]	; (8000778 <commandHandler+0xac>)
 8000742:	f007 fd95 	bl	8008270 <puts>
		//stepMotorRotation(steps, ROTATION_CLOCKWISE, SPEED_DELAY_FOR_ROTATION);
	  break;
 8000746:	e00c      	b.n	8000762 <commandHandler+0x96>
	case CMD_ROTATION_ANTICLOCKWISE:
		printf("Case CMD_ROTATION_ANTICLOCKWISE!!! \n");
 8000748:	480c      	ldr	r0, [pc, #48]	; (800077c <commandHandler+0xb0>)
 800074a:	f007 fd91 	bl	8008270 <puts>
		//stepMotorRotation(steps, ROTATION_ANTICLOCKWISE, SPEED_DELAY_FOR_ROTATION);
	  break;
 800074e:	e008      	b.n	8000762 <commandHandler+0x96>
	case CMD_MOVE_TO_CENTER:
		printf("Case CMD_MOVE_TO_CENTER!!! \n");
 8000750:	480b      	ldr	r0, [pc, #44]	; (8000780 <commandHandler+0xb4>)
 8000752:	f007 fd8d 	bl	8008270 <puts>
		//stepMotorVector(steps, MOVE_TO_CENTER, SPEED_DELAY_FOR_VECTOR);
	  break;
 8000756:	e004      	b.n	8000762 <commandHandler+0x96>
	case CMD_MOVE_FROM_CENTER:
		printf("Case CMD_MOVE_FROM_CENTER!!! \n");
 8000758:	480a      	ldr	r0, [pc, #40]	; (8000784 <commandHandler+0xb8>)
 800075a:	f007 fd89 	bl	8008270 <puts>
		//stepMotorVector(steps, MOVE_FROM_CENTER, SPEED_DELAY_FOR_VECTOR);
	  break;
 800075e:	e000      	b.n	8000762 <commandHandler+0x96>
	case CMD_END_PROGRAMM:
		/*
		 *
		 * */
	  break;
 8000760:	bf00      	nop
	}
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	080091f0 	.word	0x080091f0
 8000770:	08009214 	.word	0x08009214
 8000774:	08009230 	.word	0x08009230
 8000778:	08009250 	.word	0x08009250
 800077c:	08009270 	.word	0x08009270
 8000780:	08009294 	.word	0x08009294
 8000784:	080092b0 	.word	0x080092b0

08000788 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000790:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000794:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	2b00      	cmp	r3, #0
 800079e:	d013      	beq.n	80007c8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80007a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007a4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80007a8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d00b      	beq.n	80007c8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80007b0:	e000      	b.n	80007b4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80007b2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80007b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d0f9      	beq.n	80007b2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80007be:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	b2d2      	uxtb	r2, r2
 80007c6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80007c8:	687b      	ldr	r3, [r7, #4]
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <_write>:
uint8_t Package_Data[250000][2]={0};
uint32_t cnt = 0;
uint8_t accessFlag = 0;

int _write(int file, uint8_t *ptr, int len)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b086      	sub	sp, #24
 80007da:	af00      	add	r7, sp, #0
 80007dc:	60f8      	str	r0, [r7, #12]
 80007de:	60b9      	str	r1, [r7, #8]
 80007e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	e009      	b.n	80007fc <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	1c5a      	adds	r2, r3, #1
 80007ec:	60ba      	str	r2, [r7, #8]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ffc9 	bl	8000788 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	3301      	adds	r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697a      	ldr	r2, [r7, #20]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	429a      	cmp	r2, r3
 8000802:	dbf1      	blt.n	80007e8 <_write+0x12>
	}
	return len;
 8000804:	687b      	ldr	r3, [r7, #4]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
	uint16_t steps;
	uint32_t i;
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000816:	f000 fb69 	bl	8000eec <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081a:	f000 fe17 	bl	800144c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081e:	f000 f885 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000822:	f000 f9ed 	bl	8000c00 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000826:	f000 f8ff 	bl	8000a28 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800082a:	f000 f99d 	bl	8000b68 <MX_USART3_UART_Init>
  MX_UART4_Init();
 800082e:	f000 f94f 	bl	8000ad0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000832:	4b35      	ldr	r3, [pc, #212]	; (8000908 <main+0xf8>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b33      	ldr	r3, [pc, #204]	; (8000908 <main+0xf8>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f042 0220 	orr.w	r2, r2, #32
 8000840:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 8000842:	4b31      	ldr	r3, [pc, #196]	; (8000908 <main+0xf8>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4b2f      	ldr	r3, [pc, #188]	; (8000908 <main+0xf8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000850:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_RXNE);
 8000852:	4b2e      	ldr	r3, [pc, #184]	; (800090c <main+0xfc>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b2c      	ldr	r3, [pc, #176]	; (800090c <main+0xfc>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f042 0220 	orr.w	r2, r2, #32
 8000860:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_TC);
 8000862:	4b2a      	ldr	r3, [pc, #168]	; (800090c <main+0xfc>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b28      	ldr	r3, [pc, #160]	; (800090c <main+0xfc>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000870:	601a      	str	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_IT(&huart4, Package_Data[cnt], 2);
 8000872:	4b27      	ldr	r3, [pc, #156]	; (8000910 <main+0x100>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	4a26      	ldr	r2, [pc, #152]	; (8000914 <main+0x104>)
 800087a:	4413      	add	r3, r2
 800087c:	2202      	movs	r2, #2
 800087e:	4619      	mov	r1, r3
 8000880:	4822      	ldr	r0, [pc, #136]	; (800090c <main+0xfc>)
 8000882:	f007 fb9a 	bl	8007fba <HAL_UARTEx_ReceiveToIdle_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(accessFlag == 1)
 8000886:	4b24      	ldr	r3, [pc, #144]	; (8000918 <main+0x108>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d1fb      	bne.n	8000886 <main+0x76>
	  {
		  printf("Start of printing!!!\n\n");
 800088e:	4823      	ldr	r0, [pc, #140]	; (800091c <main+0x10c>)
 8000890:	f007 fcee 	bl	8008270 <puts>
		  for(i = 0; i < cnt; i++)
 8000894:	2300      	movs	r3, #0
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	e018      	b.n	80008cc <main+0xbc>
		  {
			  convertStepsAndCommand(Package_Data[i], &steps, &command);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	4a1d      	ldr	r2, [pc, #116]	; (8000914 <main+0x104>)
 80008a0:	4413      	add	r3, r2
 80008a2:	1cfa      	adds	r2, r7, #3
 80008a4:	4639      	mov	r1, r7
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff feec 	bl	8000684 <convertStepsAndCommand>
			  printf("command = %x, steps = %d\n", command, steps);
 80008ac:	78fb      	ldrb	r3, [r7, #3]
 80008ae:	4619      	mov	r1, r3
 80008b0:	883b      	ldrh	r3, [r7, #0]
 80008b2:	461a      	mov	r2, r3
 80008b4:	481a      	ldr	r0, [pc, #104]	; (8000920 <main+0x110>)
 80008b6:	f007 fc55 	bl	8008164 <iprintf>
			  commandHandler(steps, command);
 80008ba:	883b      	ldrh	r3, [r7, #0]
 80008bc:	78fa      	ldrb	r2, [r7, #3]
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff03 	bl	80006cc <commandHandler>
		  for(i = 0; i < cnt; i++)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	3301      	adds	r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <main+0x100>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d3e1      	bcc.n	800089a <main+0x8a>
		  }
		  accessFlag = 0;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <main+0x108>)
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
		  cnt = 0;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <main+0x100>)
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
		  memset(Package_Data, 0, sizeof(Package_Data));
 80008e2:	4a10      	ldr	r2, [pc, #64]	; (8000924 <main+0x114>)
 80008e4:	2100      	movs	r1, #0
 80008e6:	480b      	ldr	r0, [pc, #44]	; (8000914 <main+0x104>)
 80008e8:	f007 fc34 	bl	8008154 <memset>
		  printf("Ready to receive!!!\n\n");
 80008ec:	480e      	ldr	r0, [pc, #56]	; (8000928 <main+0x118>)
 80008ee:	f007 fcbf 	bl	8008270 <puts>
		  HAL_UARTEx_ReceiveToIdle_IT(&huart4, Package_Data[cnt], 2);
 80008f2:	4b07      	ldr	r3, [pc, #28]	; (8000910 <main+0x100>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	4a06      	ldr	r2, [pc, #24]	; (8000914 <main+0x104>)
 80008fa:	4413      	add	r3, r2
 80008fc:	2202      	movs	r2, #2
 80008fe:	4619      	mov	r1, r3
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <main+0xfc>)
 8000902:	f007 fb5a 	bl	8007fba <HAL_UARTEx_ReceiveToIdle_IT>
	  if(accessFlag == 1)
 8000906:	e7be      	b.n	8000886 <main+0x76>
 8000908:	24000170 	.word	0x24000170
 800090c:	240000dc 	.word	0x240000dc
 8000910:	2407a324 	.word	0x2407a324
 8000914:	24000204 	.word	0x24000204
 8000918:	2407a328 	.word	0x2407a328
 800091c:	080092d0 	.word	0x080092d0
 8000920:	080092e8 	.word	0x080092e8
 8000924:	0007a120 	.word	0x0007a120
 8000928:	08009304 	.word	0x08009304

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b09c      	sub	sp, #112	; 0x70
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000936:	224c      	movs	r2, #76	; 0x4c
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f007 fc0a 	bl	8008154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2220      	movs	r2, #32
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f007 fc04 	bl	8008154 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800094c:	2002      	movs	r0, #2
 800094e:	f001 fed5 	bl	80026fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b32      	ldr	r3, [pc, #200]	; (8000a20 <SystemClock_Config+0xf4>)
 8000958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800095a:	4a31      	ldr	r2, [pc, #196]	; (8000a20 <SystemClock_Config+0xf4>)
 800095c:	f023 0301 	bic.w	r3, r3, #1
 8000960:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000962:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <SystemClock_Config+0xf4>)
 8000964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <SystemClock_Config+0xf8>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000974:	4a2b      	ldr	r2, [pc, #172]	; (8000a24 <SystemClock_Config+0xf8>)
 8000976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <SystemClock_Config+0xf8>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000988:	bf00      	nop
 800098a:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <SystemClock_Config+0xf8>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000996:	d1f8      	bne.n	800098a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000998:	2302      	movs	r3, #2
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800099c:	2301      	movs	r3, #1
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a0:	2340      	movs	r3, #64	; 0x40
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a4:	2302      	movs	r3, #2
 80009a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a8:	2300      	movs	r3, #0
 80009aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009ac:	2304      	movs	r3, #4
 80009ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 80009b0:	2309      	movs	r3, #9
 80009b2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009bc:	2302      	movs	r3, #2
 80009be:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009c0:	230c      	movs	r3, #12
 80009c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80009c4:	2302      	movs	r3, #2
 80009c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80009c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 fecc 	bl	8002770 <HAL_RCC_OscConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80009de:	f000 fab1 	bl	8000f44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e2:	233f      	movs	r3, #63	; 0x3f
 80009e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e6:	2303      	movs	r3, #3
 80009e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009f6:	2340      	movs	r3, #64	; 0x40
 80009f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2101      	movs	r1, #1
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 fb0c 	bl	8003024 <HAL_RCC_ClockConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000a12:	f000 fa97 	bl	8000f44 <Error_Handler>
  }
}
 8000a16:	bf00      	nop
 8000a18:	3770      	adds	r7, #112	; 0x70
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	58000400 	.word	0x58000400
 8000a24:	58024800 	.word	0x58024800

08000a28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a46:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <MX_TIM1_Init+0xa0>)
 8000a48:	4a20      	ldr	r2, [pc, #128]	; (8000acc <MX_TIM1_Init+0xa4>)
 8000a4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <MX_TIM1_Init+0xa0>)
 8000a4e:	224a      	movs	r2, #74	; 0x4a
 8000a50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a52:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <MX_TIM1_Init+0xa0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <MX_TIM1_Init+0xa0>)
 8000a5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_TIM1_Init+0xa0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <MX_TIM1_Init+0xa0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <MX_TIM1_Init+0xa0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a72:	4815      	ldr	r0, [pc, #84]	; (8000ac8 <MX_TIM1_Init+0xa0>)
 8000a74:	f004 fc8e 	bl	8005394 <HAL_TIM_Base_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a7e:	f000 fa61 	bl	8000f44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480e      	ldr	r0, [pc, #56]	; (8000ac8 <MX_TIM1_Init+0xa0>)
 8000a90:	f004 fcd8 	bl	8005444 <HAL_TIM_ConfigClockSource>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000a9a:	f000 fa53 	bl	8000f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <MX_TIM1_Init+0xa0>)
 8000ab0:	f004 fef8 	bl	80058a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000aba:	f000 fa43 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	3720      	adds	r7, #32
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	24000090 	.word	0x24000090
 8000acc:	40010000 	.word	0x40010000

08000ad0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <MX_UART4_Init+0x90>)
 8000ad6:	4a23      	ldr	r2, [pc, #140]	; (8000b64 <MX_UART4_Init+0x94>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000ada:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <MX_UART4_Init+0x90>)
 8000adc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ae0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <MX_UART4_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <MX_UART4_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <MX_UART4_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_UART4_Init+0x90>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <MX_UART4_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <MX_UART4_Init+0x90>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b06:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <MX_UART4_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_UART4_Init+0x90>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <MX_UART4_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b18:	4811      	ldr	r0, [pc, #68]	; (8000b60 <MX_UART4_Init+0x90>)
 8000b1a:	f004 ff51 	bl	80059c0 <HAL_UART_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000b24:	f000 fa0e 	bl	8000f44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b28:	2100      	movs	r1, #0
 8000b2a:	480d      	ldr	r0, [pc, #52]	; (8000b60 <MX_UART4_Init+0x90>)
 8000b2c:	f007 f9c9 	bl	8007ec2 <HAL_UARTEx_SetTxFifoThreshold>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000b36:	f000 fa05 	bl	8000f44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4808      	ldr	r0, [pc, #32]	; (8000b60 <MX_UART4_Init+0x90>)
 8000b3e:	f007 f9fe 	bl	8007f3e <HAL_UARTEx_SetRxFifoThreshold>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000b48:	f000 f9fc 	bl	8000f44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_UART4_Init+0x90>)
 8000b4e:	f007 f97f 	bl	8007e50 <HAL_UARTEx_DisableFifoMode>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000b58:	f000 f9f4 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	240000dc 	.word	0x240000dc
 8000b64:	40004c00 	.word	0x40004c00

08000b68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b6c:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000b6e:	4a23      	ldr	r2, [pc, #140]	; (8000bfc <MX_USART3_UART_Init+0x94>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000b74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bb0:	4811      	ldr	r0, [pc, #68]	; (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000bb2:	f004 ff05 	bl	80059c0 <HAL_UART_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bbc:	f000 f9c2 	bl	8000f44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000bc4:	f007 f97d 	bl	8007ec2 <HAL_UARTEx_SetTxFifoThreshold>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bce:	f000 f9b9 	bl	8000f44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000bd6:	f007 f9b2 	bl	8007f3e <HAL_UARTEx_SetRxFifoThreshold>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000be0:	f000 f9b0 	bl	8000f44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000be6:	f007 f933 	bl	8007e50 <HAL_UARTEx_DisableFifoMode>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bf0:	f000 f9a8 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	24000170 	.word	0x24000170
 8000bfc:	40004800 	.word	0x40004800

08000c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08e      	sub	sp, #56	; 0x38
 8000c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c16:	4b91      	ldr	r3, [pc, #580]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	4a8f      	ldr	r2, [pc, #572]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000c1e:	f043 0310 	orr.w	r3, r3, #16
 8000c22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c26:	4b8d      	ldr	r3, [pc, #564]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	f003 0310 	and.w	r3, r3, #16
 8000c30:	623b      	str	r3, [r7, #32]
 8000c32:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c34:	4b89      	ldr	r3, [pc, #548]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	4a88      	ldr	r2, [pc, #544]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000c3c:	f043 0304 	orr.w	r3, r3, #4
 8000c40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c44:	4b85      	ldr	r3, [pc, #532]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	61fb      	str	r3, [r7, #28]
 8000c50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c52:	4b82      	ldr	r3, [pc, #520]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	4a80      	ldr	r2, [pc, #512]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000c5a:	f043 0320 	orr.w	r3, r3, #32
 8000c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c62:	4b7e      	ldr	r3, [pc, #504]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	f003 0320 	and.w	r3, r3, #32
 8000c6c:	61bb      	str	r3, [r7, #24]
 8000c6e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c70:	4b7a      	ldr	r3, [pc, #488]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	4a79      	ldr	r2, [pc, #484]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c80:	4b76      	ldr	r3, [pc, #472]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b73      	ldr	r3, [pc, #460]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	4a71      	ldr	r2, [pc, #452]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9e:	4b6f      	ldr	r3, [pc, #444]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cac:	4b6b      	ldr	r3, [pc, #428]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	4a6a      	ldr	r2, [pc, #424]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbc:	4b67      	ldr	r3, [pc, #412]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cca:	4b64      	ldr	r3, [pc, #400]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd0:	4a62      	ldr	r2, [pc, #392]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cda:	4b60      	ldr	r3, [pc, #384]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce8:	4b5c      	ldr	r3, [pc, #368]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cee:	4a5b      	ldr	r2, [pc, #364]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000cf0:	f043 0308 	orr.w	r3, r3, #8
 8000cf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf8:	4b58      	ldr	r3, [pc, #352]	; (8000e5c <MX_GPIO_Init+0x25c>)
 8000cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfe:	f003 0308 	and.w	r3, r3, #8
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_9
 8000d06:	2200      	movs	r2, #0
 8000d08:	f646 2170 	movw	r1, #27248	; 0x6a70
 8000d0c:	4854      	ldr	r0, [pc, #336]	; (8000e60 <MX_GPIO_Init+0x260>)
 8000d0e:	f001 fcdb 	bl	80026c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_9, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000d18:	4852      	ldr	r0, [pc, #328]	; (8000e64 <MX_GPIO_Init+0x264>)
 8000d1a:	f001 fcd5 	bl	80026c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	210d      	movs	r1, #13
 8000d22:	4851      	ldr	r0, [pc, #324]	; (8000e68 <MX_GPIO_Init+0x268>)
 8000d24:	f001 fcd0 	bl	80026c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2108      	movs	r1, #8
 8000d2c:	484f      	ldr	r0, [pc, #316]	; (8000e6c <MX_GPIO_Init+0x26c>)
 8000d2e:	f001 fccb 	bl	80026c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	21c2      	movs	r1, #194	; 0xc2
 8000d36:	484e      	ldr	r0, [pc, #312]	; (8000e70 <MX_GPIO_Init+0x270>)
 8000d38:	f001 fcc6 	bl	80026c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f245 010a 	movw	r1, #20490	; 0x500a
 8000d42:	484c      	ldr	r0, [pc, #304]	; (8000e74 <MX_GPIO_Init+0x274>)
 8000d44:	f001 fcc0 	bl	80026c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f248 0138 	movw	r1, #32824	; 0x8038
 8000d4e:	484a      	ldr	r0, [pc, #296]	; (8000e78 <MX_GPIO_Init+0x278>)
 8000d50:	f001 fcba 	bl	80026c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 PE6 PE9
                           PE11 PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_9
 8000d54:	f646 2370 	movw	r3, #27248	; 0x6a70
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	483c      	ldr	r0, [pc, #240]	; (8000e60 <MX_GPIO_Init+0x260>)
 8000d6e:	f001 fafb 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d84:	4619      	mov	r1, r3
 8000d86:	4838      	ldr	r0, [pc, #224]	; (8000e68 <MX_GPIO_Init+0x268>)
 8000d88:	f001 faee 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_9;
 8000d8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	482f      	ldr	r0, [pc, #188]	; (8000e64 <MX_GPIO_Init+0x264>)
 8000da6:	f001 fadf 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000daa:	230d      	movs	r3, #13
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4829      	ldr	r0, [pc, #164]	; (8000e68 <MX_GPIO_Init+0x268>)
 8000dc2:	f001 fad1 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dc6:	2308      	movs	r3, #8
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4823      	ldr	r0, [pc, #140]	; (8000e6c <MX_GPIO_Init+0x26c>)
 8000dde:	f001 fac3 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000de2:	23c2      	movs	r3, #194	; 0xc2
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df6:	4619      	mov	r1, r3
 8000df8:	481d      	ldr	r0, [pc, #116]	; (8000e70 <MX_GPIO_Init+0x270>)
 8000dfa:	f001 fab5 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG3 PG12 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_12|GPIO_PIN_14;
 8000dfe:	f245 030a 	movw	r3, #20490	; 0x500a
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e14:	4619      	mov	r1, r3
 8000e16:	4817      	ldr	r0, [pc, #92]	; (8000e74 <MX_GPIO_Init+0x274>)
 8000e18:	f001 faa6 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD3 PD4 PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000e1c:	f248 0338 	movw	r3, #32824	; 0x8038
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e32:	4619      	mov	r1, r3
 8000e34:	4810      	ldr	r0, [pc, #64]	; (8000e78 <MX_GPIO_Init+0x278>)
 8000e36:	f001 fa97 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e3e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4809      	ldr	r0, [pc, #36]	; (8000e74 <MX_GPIO_Init+0x274>)
 8000e50:	f001 fa8a 	bl	8002368 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e54:	bf00      	nop
 8000e56:	3738      	adds	r7, #56	; 0x38
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	58021000 	.word	0x58021000
 8000e64:	58021400 	.word	0x58021400
 8000e68:	58020800 	.word	0x58020800
 8000e6c:	58020000 	.word	0x58020000
 8000e70:	58020400 	.word	0x58020400
 8000e74:	58021800 	.word	0x58021800
 8000e78:	58020c00 	.word	0x58020c00

08000e7c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	807b      	strh	r3, [r7, #2]
	uint32_t j;
	 if (huart == &huart4)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a14      	ldr	r2, [pc, #80]	; (8000edc <HAL_UARTEx_RxEventCallback+0x60>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d121      	bne.n	8000ed4 <HAL_UARTEx_RxEventCallback+0x58>
	 {
		 //HAL_UART_Transmit_IT(&huart3, RX_data, Size);
		 //printf("callback, RX_data = %x %x\n", RX_data[0], RX_data[1]);

		 if(Package_Data[cnt][0] == 0x0F && Package_Data[cnt][1] == 0x0F)
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <HAL_UARTEx_RxEventCallback+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <HAL_UARTEx_RxEventCallback+0x68>)
 8000e96:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000e9a:	2b0f      	cmp	r3, #15
 8000e9c:	d10b      	bne.n	8000eb6 <HAL_UARTEx_RxEventCallback+0x3a>
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <HAL_UARTEx_RxEventCallback+0x64>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a10      	ldr	r2, [pc, #64]	; (8000ee4 <HAL_UARTEx_RxEventCallback+0x68>)
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	785b      	ldrb	r3, [r3, #1]
 8000eaa:	2b0f      	cmp	r3, #15
 8000eac:	d103      	bne.n	8000eb6 <HAL_UARTEx_RxEventCallback+0x3a>
			 /*printf("The end of array!, RX_data = %x %x\n", Package_Data[cnt][0], Package_Data[cnt][1]);
			 for(j = 0; j < cnt+1; j++)
			 {
				 printf("String of array[%d] = %x %x\n", j, Package_Data[j][0], Package_Data[j][1]);
			 }*/
			 accessFlag = 1;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	701a      	strb	r2, [r3, #0]
		 {
			 cnt++;
			 HAL_UARTEx_ReceiveToIdle_IT(&huart4, Package_Data[cnt], 2);
		 }
	 }
}
 8000eb4:	e00e      	b.n	8000ed4 <HAL_UARTEx_RxEventCallback+0x58>
			 cnt++;
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_UARTEx_RxEventCallback+0x64>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <HAL_UARTEx_RxEventCallback+0x64>)
 8000ebe:	6013      	str	r3, [r2, #0]
			 HAL_UARTEx_ReceiveToIdle_IT(&huart4, Package_Data[cnt], 2);
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <HAL_UARTEx_RxEventCallback+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <HAL_UARTEx_RxEventCallback+0x68>)
 8000ec8:	4413      	add	r3, r2
 8000eca:	2202      	movs	r2, #2
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4803      	ldr	r0, [pc, #12]	; (8000edc <HAL_UARTEx_RxEventCallback+0x60>)
 8000ed0:	f007 f873 	bl	8007fba <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	240000dc 	.word	0x240000dc
 8000ee0:	2407a324 	.word	0x2407a324
 8000ee4:	24000204 	.word	0x24000204
 8000ee8:	2407a328 	.word	0x2407a328

08000eec <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000efe:	f000 fc53 	bl	80017a8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f02:	2301      	movs	r3, #1
 8000f04:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f0e:	231f      	movs	r3, #31
 8000f10:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000f12:	2387      	movs	r3, #135	; 0x87
 8000f14:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f22:	2301      	movs	r3, #1
 8000f24:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f2e:	463b      	mov	r3, r7
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 fc71 	bl	8001818 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f36:	2004      	movs	r0, #4
 8000f38:	f000 fc4e 	bl	80017d8 <HAL_MPU_Enable>

}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f48:	b672      	cpsid	i
}
 8000f4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <Error_Handler+0x8>
	...

08000f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <HAL_MspInit+0x30>)
 8000f58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f5c:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <HAL_MspInit+0x30>)
 8000f5e:	f043 0302 	orr.w	r3, r3, #2
 8000f62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_MspInit+0x30>)
 8000f68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	58024400 	.word	0x58024400

08000f84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <HAL_TIM_Base_MspInit+0x3c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d10e      	bne.n	8000fb4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <HAL_TIM_Base_MspInit+0x40>)
 8000f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f9c:	4a09      	ldr	r2, [pc, #36]	; (8000fc4 <HAL_TIM_Base_MspInit+0x40>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <HAL_TIM_Base_MspInit+0x40>)
 8000fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	40010000 	.word	0x40010000
 8000fc4:	58024400 	.word	0x58024400

08000fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b0bc      	sub	sp, #240	; 0xf0
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe0:	f107 0318 	add.w	r3, r7, #24
 8000fe4:	22c0      	movs	r2, #192	; 0xc0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f007 f8b3 	bl	8008154 <memset>
  if(huart->Instance==UART4)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a55      	ldr	r2, [pc, #340]	; (8001148 <HAL_UART_MspInit+0x180>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d14f      	bne.n	8001098 <HAL_UART_MspInit+0xd0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000ff8:	f04f 0202 	mov.w	r2, #2
 8000ffc:	f04f 0300 	mov.w	r3, #0
 8001000:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001004:	2300      	movs	r3, #0
 8001006:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100a:	f107 0318 	add.w	r3, r7, #24
 800100e:	4618      	mov	r0, r3
 8001010:	f002 fb94 	bl	800373c <HAL_RCCEx_PeriphCLKConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800101a:	f7ff ff93 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800101e:	4b4b      	ldr	r3, [pc, #300]	; (800114c <HAL_UART_MspInit+0x184>)
 8001020:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001024:	4a49      	ldr	r2, [pc, #292]	; (800114c <HAL_UART_MspInit+0x184>)
 8001026:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800102a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800102e:	4b47      	ldr	r3, [pc, #284]	; (800114c <HAL_UART_MspInit+0x184>)
 8001030:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001034:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103c:	4b43      	ldr	r3, [pc, #268]	; (800114c <HAL_UART_MspInit+0x184>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001042:	4a42      	ldr	r2, [pc, #264]	; (800114c <HAL_UART_MspInit+0x184>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800104c:	4b3f      	ldr	r3, [pc, #252]	; (800114c <HAL_UART_MspInit+0x184>)
 800104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800105a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800105e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001074:	2308      	movs	r3, #8
 8001076:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800107e:	4619      	mov	r1, r3
 8001080:	4833      	ldr	r0, [pc, #204]	; (8001150 <HAL_UART_MspInit+0x188>)
 8001082:	f001 f971 	bl	8002368 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	2034      	movs	r0, #52	; 0x34
 800108c:	f000 fb57 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001090:	2034      	movs	r0, #52	; 0x34
 8001092:	f000 fb6e 	bl	8001772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001096:	e053      	b.n	8001140 <HAL_UART_MspInit+0x178>
  else if(huart->Instance==USART3)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a2d      	ldr	r2, [pc, #180]	; (8001154 <HAL_UART_MspInit+0x18c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d14e      	bne.n	8001140 <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010a2:	f04f 0202 	mov.w	r2, #2
 80010a6:	f04f 0300 	mov.w	r3, #0
 80010aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b4:	f107 0318 	add.w	r3, r7, #24
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 fb3f 	bl	800373c <HAL_RCCEx_PeriphCLKConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_UART_MspInit+0x100>
      Error_Handler();
 80010c4:	f7ff ff3e 	bl	8000f44 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010c8:	4b20      	ldr	r3, [pc, #128]	; (800114c <HAL_UART_MspInit+0x184>)
 80010ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010ce:	4a1f      	ldr	r2, [pc, #124]	; (800114c <HAL_UART_MspInit+0x184>)
 80010d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010d8:	4b1c      	ldr	r3, [pc, #112]	; (800114c <HAL_UART_MspInit+0x184>)
 80010da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <HAL_UART_MspInit+0x184>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ec:	4a17      	ldr	r2, [pc, #92]	; (800114c <HAL_UART_MspInit+0x184>)
 80010ee:	f043 0308 	orr.w	r3, r3, #8
 80010f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <HAL_UART_MspInit+0x184>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001104:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001108:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800111e:	2307      	movs	r3, #7
 8001120:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001124:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001128:	4619      	mov	r1, r3
 800112a:	480b      	ldr	r0, [pc, #44]	; (8001158 <HAL_UART_MspInit+0x190>)
 800112c:	f001 f91c 	bl	8002368 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	2027      	movs	r0, #39	; 0x27
 8001136:	f000 fb02 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800113a:	2027      	movs	r0, #39	; 0x27
 800113c:	f000 fb19 	bl	8001772 <HAL_NVIC_EnableIRQ>
}
 8001140:	bf00      	nop
 8001142:	37f0      	adds	r7, #240	; 0xf0
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40004c00 	.word	0x40004c00
 800114c:	58024400 	.word	0x58024400
 8001150:	58020400 	.word	0x58020400
 8001154:	40004800 	.word	0x40004800
 8001158:	58020c00 	.word	0x58020c00

0800115c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <NMI_Handler+0x4>

08001162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001166:	e7fe      	b.n	8001166 <HardFault_Handler+0x4>

08001168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800116c:	e7fe      	b.n	800116c <MemManage_Handler+0x4>

0800116e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <BusFault_Handler+0x4>

08001174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <UsageFault_Handler+0x4>

0800117a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a8:	f000 f9c2 	bl	8001530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <USART3_IRQHandler+0x10>)
 80011b6:	f004 fc53 	bl	8005a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	24000170 	.word	0x24000170

080011c4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <UART4_IRQHandler+0x10>)
 80011ca:	f004 fc49 	bl	8005a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	240000dc 	.word	0x240000dc

080011d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	e00a      	b.n	8001200 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011ea:	f3af 8000 	nop.w
 80011ee:	4601      	mov	r1, r0
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	60ba      	str	r2, [r7, #8]
 80011f6:	b2ca      	uxtb	r2, r1
 80011f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3301      	adds	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	429a      	cmp	r2, r3
 8001206:	dbf0      	blt.n	80011ea <_read+0x12>
  }

  return len;
 8001208:	687b      	ldr	r3, [r7, #4]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800123a:	605a      	str	r2, [r3, #4]
  return 0;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <_isatty>:

int _isatty(int file)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001284:	4a14      	ldr	r2, [pc, #80]	; (80012d8 <_sbrk+0x5c>)
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <_sbrk+0x60>)
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <_sbrk+0x64>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <_sbrk+0x64>)
 800129a:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <_sbrk+0x68>)
 800129c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <_sbrk+0x64>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d207      	bcs.n	80012bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012ac:	f006 ff28 	bl	8008100 <__errno>
 80012b0:	4603      	mov	r3, r0
 80012b2:	220c      	movs	r2, #12
 80012b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	e009      	b.n	80012d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <_sbrk+0x64>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <_sbrk+0x64>)
 80012cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ce:	68fb      	ldr	r3, [r7, #12]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	24080000 	.word	0x24080000
 80012dc:	00000400 	.word	0x00000400
 80012e0:	2407a32c 	.word	0x2407a32c
 80012e4:	2407a348 	.word	0x2407a348

080012e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012ec:	4b37      	ldr	r3, [pc, #220]	; (80013cc <SystemInit+0xe4>)
 80012ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f2:	4a36      	ldr	r2, [pc, #216]	; (80013cc <SystemInit+0xe4>)
 80012f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <SystemInit+0xe8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 030f 	and.w	r3, r3, #15
 8001304:	2b06      	cmp	r3, #6
 8001306:	d807      	bhi.n	8001318 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001308:	4b31      	ldr	r3, [pc, #196]	; (80013d0 <SystemInit+0xe8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f023 030f 	bic.w	r3, r3, #15
 8001310:	4a2f      	ldr	r2, [pc, #188]	; (80013d0 <SystemInit+0xe8>)
 8001312:	f043 0307 	orr.w	r3, r3, #7
 8001316:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001318:	4b2e      	ldr	r3, [pc, #184]	; (80013d4 <SystemInit+0xec>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a2d      	ldr	r2, [pc, #180]	; (80013d4 <SystemInit+0xec>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001324:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <SystemInit+0xec>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800132a:	4b2a      	ldr	r3, [pc, #168]	; (80013d4 <SystemInit+0xec>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4929      	ldr	r1, [pc, #164]	; (80013d4 <SystemInit+0xec>)
 8001330:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <SystemInit+0xf0>)
 8001332:	4013      	ands	r3, r2
 8001334:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <SystemInit+0xe8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d007      	beq.n	8001352 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <SystemInit+0xe8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 030f 	bic.w	r3, r3, #15
 800134a:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <SystemInit+0xe8>)
 800134c:	f043 0307 	orr.w	r3, r3, #7
 8001350:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <SystemInit+0xec>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001358:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <SystemInit+0xec>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <SystemInit+0xec>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <SystemInit+0xec>)
 8001366:	4a1d      	ldr	r2, [pc, #116]	; (80013dc <SystemInit+0xf4>)
 8001368:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <SystemInit+0xec>)
 800136c:	4a1c      	ldr	r2, [pc, #112]	; (80013e0 <SystemInit+0xf8>)
 800136e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <SystemInit+0xec>)
 8001372:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <SystemInit+0xfc>)
 8001374:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <SystemInit+0xec>)
 8001378:	2200      	movs	r2, #0
 800137a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800137c:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <SystemInit+0xec>)
 800137e:	4a19      	ldr	r2, [pc, #100]	; (80013e4 <SystemInit+0xfc>)
 8001380:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <SystemInit+0xec>)
 8001384:	2200      	movs	r2, #0
 8001386:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <SystemInit+0xec>)
 800138a:	4a16      	ldr	r2, [pc, #88]	; (80013e4 <SystemInit+0xfc>)
 800138c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <SystemInit+0xec>)
 8001390:	2200      	movs	r2, #0
 8001392:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <SystemInit+0xec>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <SystemInit+0xec>)
 800139a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <SystemInit+0xec>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <SystemInit+0x100>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <SystemInit+0x104>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013b2:	d202      	bcs.n	80013ba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <SystemInit+0x108>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <SystemInit+0x10c>)
 80013bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00
 80013d0:	52002000 	.word	0x52002000
 80013d4:	58024400 	.word	0x58024400
 80013d8:	eaf6ed7f 	.word	0xeaf6ed7f
 80013dc:	02020200 	.word	0x02020200
 80013e0:	01ff0000 	.word	0x01ff0000
 80013e4:	01010280 	.word	0x01010280
 80013e8:	5c001000 	.word	0x5c001000
 80013ec:	ffff0000 	.word	0xffff0000
 80013f0:	51008108 	.word	0x51008108
 80013f4:	52004000 	.word	0x52004000

080013f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001430 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013fc:	f7ff ff74 	bl	80012e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001400:	480c      	ldr	r0, [pc, #48]	; (8001434 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001402:	490d      	ldr	r1, [pc, #52]	; (8001438 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001404:	4a0d      	ldr	r2, [pc, #52]	; (800143c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001408:	e002      	b.n	8001410 <LoopCopyDataInit>

0800140a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800140c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140e:	3304      	adds	r3, #4

08001410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001414:	d3f9      	bcc.n	800140a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001418:	4c0a      	ldr	r4, [pc, #40]	; (8001444 <LoopFillZerobss+0x22>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800141c:	e001      	b.n	8001422 <LoopFillZerobss>

0800141e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001420:	3204      	adds	r2, #4

08001422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001424:	d3fb      	bcc.n	800141e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001426:	f006 fe71 	bl	800810c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142a:	f7ff f9f1 	bl	8000810 <main>
  bx  lr
 800142e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001430:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001434:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001438:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 800143c:	080093fc 	.word	0x080093fc
  ldr r2, =_sbss
 8001440:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001444:	2407a344 	.word	0x2407a344

08001448 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001448:	e7fe      	b.n	8001448 <ADC3_IRQHandler>
	...

0800144c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001452:	2003      	movs	r0, #3
 8001454:	f000 f968 	bl	8001728 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001458:	f001 ff9a 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 800145c:	4602      	mov	r2, r0
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_Init+0x68>)
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	f003 030f 	and.w	r3, r3, #15
 8001468:	4913      	ldr	r1, [pc, #76]	; (80014b8 <HAL_Init+0x6c>)
 800146a:	5ccb      	ldrb	r3, [r1, r3]
 800146c:	f003 031f 	and.w	r3, r3, #31
 8001470:	fa22 f303 	lsr.w	r3, r2, r3
 8001474:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_Init+0x68>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <HAL_Init+0x6c>)
 8001480:	5cd3      	ldrb	r3, [r2, r3]
 8001482:	f003 031f 	and.w	r3, r3, #31
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	fa22 f303 	lsr.w	r3, r2, r3
 800148c:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <HAL_Init+0x70>)
 800148e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001490:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <HAL_Init+0x74>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001496:	200f      	movs	r0, #15
 8001498:	f000 f814 	bl	80014c4 <HAL_InitTick>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e002      	b.n	80014ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014a6:	f7ff fd53 	bl	8000f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	58024400 	.word	0x58024400
 80014b8:	0800931c 	.word	0x0800931c
 80014bc:	24000004 	.word	0x24000004
 80014c0:	24000000 	.word	0x24000000

080014c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <HAL_InitTick+0x60>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e021      	b.n	800151c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <HAL_InitTick+0x64>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <HAL_InitTick+0x60>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f94d 	bl	800178e <HAL_SYSTICK_Config>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00e      	b.n	800151c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b0f      	cmp	r3, #15
 8001502:	d80a      	bhi.n	800151a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001504:	2200      	movs	r2, #0
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f000 f917 	bl	800173e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001510:	4a06      	ldr	r2, [pc, #24]	; (800152c <HAL_InitTick+0x68>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	e000      	b.n	800151c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	2400000c 	.word	0x2400000c
 8001528:	24000000 	.word	0x24000000
 800152c:	24000008 	.word	0x24000008

08001530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_IncTick+0x20>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_IncTick+0x24>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4413      	add	r3, r2
 8001540:	4a04      	ldr	r2, [pc, #16]	; (8001554 <HAL_IncTick+0x24>)
 8001542:	6013      	str	r3, [r2, #0]
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	2400000c 	.word	0x2400000c
 8001554:	2407a330 	.word	0x2407a330

08001558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return uwTick;
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <HAL_GetTick+0x14>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	2407a330 	.word	0x2407a330

08001570 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <HAL_GetREVID+0x14>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	0c1b      	lsrs	r3, r3, #16
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	5c001000 	.word	0x5c001000

08001588 <__NVIC_SetPriorityGrouping>:
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <__NVIC_SetPriorityGrouping+0x40>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a4:	4013      	ands	r3, r2
 80015a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <__NVIC_SetPriorityGrouping+0x40>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00
 80015cc:	05fa0000 	.word	0x05fa0000

080015d0 <__NVIC_GetPriorityGrouping>:
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <__NVIC_GetPriorityGrouping+0x18>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	f003 0307 	and.w	r3, r3, #7
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_EnableIRQ>:
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	db0b      	blt.n	8001616 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	f003 021f 	and.w	r2, r3, #31
 8001604:	4907      	ldr	r1, [pc, #28]	; (8001624 <__NVIC_EnableIRQ+0x38>)
 8001606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	2001      	movs	r0, #1
 800160e:	fa00 f202 	lsl.w	r2, r0, r2
 8001612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000e100 	.word	0xe000e100

08001628 <__NVIC_SetPriority>:
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001634:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db0a      	blt.n	8001652 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	490c      	ldr	r1, [pc, #48]	; (8001674 <__NVIC_SetPriority+0x4c>)
 8001642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001646:	0112      	lsls	r2, r2, #4
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	440b      	add	r3, r1
 800164c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001650:	e00a      	b.n	8001668 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4908      	ldr	r1, [pc, #32]	; (8001678 <__NVIC_SetPriority+0x50>)
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	3b04      	subs	r3, #4
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	440b      	add	r3, r1
 8001666:	761a      	strb	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000e100 	.word	0xe000e100
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <NVIC_EncodePriority>:
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	; 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f1c3 0307 	rsb	r3, r3, #7
 8001696:	2b04      	cmp	r3, #4
 8001698:	bf28      	it	cs
 800169a:	2304      	movcs	r3, #4
 800169c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3304      	adds	r3, #4
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d902      	bls.n	80016ac <NVIC_EncodePriority+0x30>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3b03      	subs	r3, #3
 80016aa:	e000      	b.n	80016ae <NVIC_EncodePriority+0x32>
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	4313      	orrs	r3, r2
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	; 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <SysTick_Config>:
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f4:	d301      	bcc.n	80016fa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00f      	b.n	800171a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <SysTick_Config+0x40>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001702:	210f      	movs	r1, #15
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f7ff ff8e 	bl	8001628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <SysTick_Config+0x40>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <SysTick_Config+0x40>)
 8001714:	2207      	movs	r2, #7
 8001716:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	e000e010 	.word	0xe000e010

08001728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ff29 	bl	8001588 <__NVIC_SetPriorityGrouping>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800174c:	f7ff ff40 	bl	80015d0 <__NVIC_GetPriorityGrouping>
 8001750:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	6978      	ldr	r0, [r7, #20]
 8001758:	f7ff ff90 	bl	800167c <NVIC_EncodePriority>
 800175c:	4602      	mov	r2, r0
 800175e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff5f 	bl	8001628 <__NVIC_SetPriority>
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff33 	bl	80015ec <__NVIC_EnableIRQ>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffa4 	bl	80016e4 <SysTick_Config>
 800179c:	4603      	mov	r3, r0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80017ac:	f3bf 8f5f 	dmb	sy
}
 80017b0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <HAL_MPU_Disable+0x28>)
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	4a06      	ldr	r2, [pc, #24]	; (80017d0 <HAL_MPU_Disable+0x28>)
 80017b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017bc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80017be:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_MPU_Disable+0x2c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	605a      	str	r2, [r3, #4]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00
 80017d4:	e000ed90 	.word	0xe000ed90

080017d8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80017e0:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <HAL_MPU_Enable+0x38>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_MPU_Enable+0x3c>)
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	4a09      	ldr	r2, [pc, #36]	; (8001814 <HAL_MPU_Enable+0x3c>)
 80017f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80017f6:	f3bf 8f4f 	dsb	sy
}
 80017fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017fc:	f3bf 8f6f 	isb	sy
}
 8001800:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000ed90 	.word	0xe000ed90
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	785a      	ldrb	r2, [r3, #1]
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <HAL_MPU_ConfigRegion+0x84>)
 8001826:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d029      	beq.n	8001884 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001830:	4a1a      	ldr	r2, [pc, #104]	; (800189c <HAL_MPU_ConfigRegion+0x84>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7b1b      	ldrb	r3, [r3, #12]
 800183c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	7adb      	ldrb	r3, [r3, #11]
 8001842:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001844:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	7a9b      	ldrb	r3, [r3, #10]
 800184a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800184c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	7b5b      	ldrb	r3, [r3, #13]
 8001852:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001854:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	7b9b      	ldrb	r3, [r3, #14]
 800185a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800185c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7bdb      	ldrb	r3, [r3, #15]
 8001862:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001864:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	7a5b      	ldrb	r3, [r3, #9]
 800186a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800186c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	7a1b      	ldrb	r3, [r3, #8]
 8001872:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001874:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	7812      	ldrb	r2, [r2, #0]
 800187a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800187c:	4a07      	ldr	r2, [pc, #28]	; (800189c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800187e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001880:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001882:	e005      	b.n	8001890 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_MPU_ConfigRegion+0x84>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800188a:	4b04      	ldr	r3, [pc, #16]	; (800189c <HAL_MPU_ConfigRegion+0x84>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed90 	.word	0xe000ed90

080018a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80018a8:	f7ff fe56 	bl	8001558 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e2dc      	b.n	8001e72 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d008      	beq.n	80018d6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2280      	movs	r2, #128	; 0x80
 80018c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e2cd      	b.n	8001e72 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a76      	ldr	r2, [pc, #472]	; (8001ab4 <HAL_DMA_Abort+0x214>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d04a      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a74      	ldr	r2, [pc, #464]	; (8001ab8 <HAL_DMA_Abort+0x218>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d045      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a73      	ldr	r2, [pc, #460]	; (8001abc <HAL_DMA_Abort+0x21c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d040      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a71      	ldr	r2, [pc, #452]	; (8001ac0 <HAL_DMA_Abort+0x220>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d03b      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a70      	ldr	r2, [pc, #448]	; (8001ac4 <HAL_DMA_Abort+0x224>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d036      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a6e      	ldr	r2, [pc, #440]	; (8001ac8 <HAL_DMA_Abort+0x228>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d031      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a6d      	ldr	r2, [pc, #436]	; (8001acc <HAL_DMA_Abort+0x22c>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d02c      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a6b      	ldr	r2, [pc, #428]	; (8001ad0 <HAL_DMA_Abort+0x230>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d027      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a6a      	ldr	r2, [pc, #424]	; (8001ad4 <HAL_DMA_Abort+0x234>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d022      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a68      	ldr	r2, [pc, #416]	; (8001ad8 <HAL_DMA_Abort+0x238>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d01d      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a67      	ldr	r2, [pc, #412]	; (8001adc <HAL_DMA_Abort+0x23c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d018      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a65      	ldr	r2, [pc, #404]	; (8001ae0 <HAL_DMA_Abort+0x240>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d013      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a64      	ldr	r2, [pc, #400]	; (8001ae4 <HAL_DMA_Abort+0x244>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d00e      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a62      	ldr	r2, [pc, #392]	; (8001ae8 <HAL_DMA_Abort+0x248>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d009      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a61      	ldr	r2, [pc, #388]	; (8001aec <HAL_DMA_Abort+0x24c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d004      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a5f      	ldr	r2, [pc, #380]	; (8001af0 <HAL_DMA_Abort+0x250>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d101      	bne.n	800197a <HAL_DMA_Abort+0xda>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <HAL_DMA_Abort+0xdc>
 800197a:	2300      	movs	r3, #0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d013      	beq.n	80019a8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 021e 	bic.w	r2, r2, #30
 800198e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800199e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	e00a      	b.n	80019be <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 020e 	bic.w	r2, r2, #14
 80019b6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a3c      	ldr	r2, [pc, #240]	; (8001ab4 <HAL_DMA_Abort+0x214>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d072      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a3a      	ldr	r2, [pc, #232]	; (8001ab8 <HAL_DMA_Abort+0x218>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d06d      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a39      	ldr	r2, [pc, #228]	; (8001abc <HAL_DMA_Abort+0x21c>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d068      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a37      	ldr	r2, [pc, #220]	; (8001ac0 <HAL_DMA_Abort+0x220>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d063      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a36      	ldr	r2, [pc, #216]	; (8001ac4 <HAL_DMA_Abort+0x224>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d05e      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a34      	ldr	r2, [pc, #208]	; (8001ac8 <HAL_DMA_Abort+0x228>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d059      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a33      	ldr	r2, [pc, #204]	; (8001acc <HAL_DMA_Abort+0x22c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d054      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a31      	ldr	r2, [pc, #196]	; (8001ad0 <HAL_DMA_Abort+0x230>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d04f      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a30      	ldr	r2, [pc, #192]	; (8001ad4 <HAL_DMA_Abort+0x234>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d04a      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a2e      	ldr	r2, [pc, #184]	; (8001ad8 <HAL_DMA_Abort+0x238>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d045      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a2d      	ldr	r2, [pc, #180]	; (8001adc <HAL_DMA_Abort+0x23c>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d040      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a2b      	ldr	r2, [pc, #172]	; (8001ae0 <HAL_DMA_Abort+0x240>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d03b      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a2a      	ldr	r2, [pc, #168]	; (8001ae4 <HAL_DMA_Abort+0x244>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d036      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a28      	ldr	r2, [pc, #160]	; (8001ae8 <HAL_DMA_Abort+0x248>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d031      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a27      	ldr	r2, [pc, #156]	; (8001aec <HAL_DMA_Abort+0x24c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d02c      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a25      	ldr	r2, [pc, #148]	; (8001af0 <HAL_DMA_Abort+0x250>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d027      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a24      	ldr	r2, [pc, #144]	; (8001af4 <HAL_DMA_Abort+0x254>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d022      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a22      	ldr	r2, [pc, #136]	; (8001af8 <HAL_DMA_Abort+0x258>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d01d      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a21      	ldr	r2, [pc, #132]	; (8001afc <HAL_DMA_Abort+0x25c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d018      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a1f      	ldr	r2, [pc, #124]	; (8001b00 <HAL_DMA_Abort+0x260>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d013      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <HAL_DMA_Abort+0x264>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d00e      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1c      	ldr	r2, [pc, #112]	; (8001b08 <HAL_DMA_Abort+0x268>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d009      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <HAL_DMA_Abort+0x26c>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d004      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a19      	ldr	r2, [pc, #100]	; (8001b10 <HAL_DMA_Abort+0x270>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d132      	bne.n	8001b14 <HAL_DMA_Abort+0x274>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e031      	b.n	8001b16 <HAL_DMA_Abort+0x276>
 8001ab2:	bf00      	nop
 8001ab4:	40020010 	.word	0x40020010
 8001ab8:	40020028 	.word	0x40020028
 8001abc:	40020040 	.word	0x40020040
 8001ac0:	40020058 	.word	0x40020058
 8001ac4:	40020070 	.word	0x40020070
 8001ac8:	40020088 	.word	0x40020088
 8001acc:	400200a0 	.word	0x400200a0
 8001ad0:	400200b8 	.word	0x400200b8
 8001ad4:	40020410 	.word	0x40020410
 8001ad8:	40020428 	.word	0x40020428
 8001adc:	40020440 	.word	0x40020440
 8001ae0:	40020458 	.word	0x40020458
 8001ae4:	40020470 	.word	0x40020470
 8001ae8:	40020488 	.word	0x40020488
 8001aec:	400204a0 	.word	0x400204a0
 8001af0:	400204b8 	.word	0x400204b8
 8001af4:	58025408 	.word	0x58025408
 8001af8:	5802541c 	.word	0x5802541c
 8001afc:	58025430 	.word	0x58025430
 8001b00:	58025444 	.word	0x58025444
 8001b04:	58025458 	.word	0x58025458
 8001b08:	5802546c 	.word	0x5802546c
 8001b0c:	58025480 	.word	0x58025480
 8001b10:	58025494 	.word	0x58025494
 8001b14:	2300      	movs	r3, #0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b28:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a6d      	ldr	r2, [pc, #436]	; (8001ce4 <HAL_DMA_Abort+0x444>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d04a      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a6b      	ldr	r2, [pc, #428]	; (8001ce8 <HAL_DMA_Abort+0x448>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d045      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a6a      	ldr	r2, [pc, #424]	; (8001cec <HAL_DMA_Abort+0x44c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d040      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a68      	ldr	r2, [pc, #416]	; (8001cf0 <HAL_DMA_Abort+0x450>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d03b      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a67      	ldr	r2, [pc, #412]	; (8001cf4 <HAL_DMA_Abort+0x454>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d036      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a65      	ldr	r2, [pc, #404]	; (8001cf8 <HAL_DMA_Abort+0x458>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d031      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a64      	ldr	r2, [pc, #400]	; (8001cfc <HAL_DMA_Abort+0x45c>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d02c      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a62      	ldr	r2, [pc, #392]	; (8001d00 <HAL_DMA_Abort+0x460>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d027      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a61      	ldr	r2, [pc, #388]	; (8001d04 <HAL_DMA_Abort+0x464>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d022      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a5f      	ldr	r2, [pc, #380]	; (8001d08 <HAL_DMA_Abort+0x468>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d01d      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a5e      	ldr	r2, [pc, #376]	; (8001d0c <HAL_DMA_Abort+0x46c>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d018      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a5c      	ldr	r2, [pc, #368]	; (8001d10 <HAL_DMA_Abort+0x470>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d013      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a5b      	ldr	r2, [pc, #364]	; (8001d14 <HAL_DMA_Abort+0x474>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d00e      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a59      	ldr	r2, [pc, #356]	; (8001d18 <HAL_DMA_Abort+0x478>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d009      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a58      	ldr	r2, [pc, #352]	; (8001d1c <HAL_DMA_Abort+0x47c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d004      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a56      	ldr	r2, [pc, #344]	; (8001d20 <HAL_DMA_Abort+0x480>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d108      	bne.n	8001bdc <HAL_DMA_Abort+0x33c>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0201 	bic.w	r2, r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	e007      	b.n	8001bec <HAL_DMA_Abort+0x34c>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0201 	bic.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001bec:	e013      	b.n	8001c16 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bee:	f7ff fcb3 	bl	8001558 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b05      	cmp	r3, #5
 8001bfa:	d90c      	bls.n	8001c16 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2203      	movs	r2, #3
 8001c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e12d      	b.n	8001e72 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1e5      	bne.n	8001bee <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a2f      	ldr	r2, [pc, #188]	; (8001ce4 <HAL_DMA_Abort+0x444>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d04a      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a2d      	ldr	r2, [pc, #180]	; (8001ce8 <HAL_DMA_Abort+0x448>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d045      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a2c      	ldr	r2, [pc, #176]	; (8001cec <HAL_DMA_Abort+0x44c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d040      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a2a      	ldr	r2, [pc, #168]	; (8001cf0 <HAL_DMA_Abort+0x450>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d03b      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a29      	ldr	r2, [pc, #164]	; (8001cf4 <HAL_DMA_Abort+0x454>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d036      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a27      	ldr	r2, [pc, #156]	; (8001cf8 <HAL_DMA_Abort+0x458>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d031      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a26      	ldr	r2, [pc, #152]	; (8001cfc <HAL_DMA_Abort+0x45c>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d02c      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a24      	ldr	r2, [pc, #144]	; (8001d00 <HAL_DMA_Abort+0x460>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d027      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a23      	ldr	r2, [pc, #140]	; (8001d04 <HAL_DMA_Abort+0x464>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d022      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a21      	ldr	r2, [pc, #132]	; (8001d08 <HAL_DMA_Abort+0x468>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d01d      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a20      	ldr	r2, [pc, #128]	; (8001d0c <HAL_DMA_Abort+0x46c>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d018      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1e      	ldr	r2, [pc, #120]	; (8001d10 <HAL_DMA_Abort+0x470>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d013      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1d      	ldr	r2, [pc, #116]	; (8001d14 <HAL_DMA_Abort+0x474>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d00e      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1b      	ldr	r2, [pc, #108]	; (8001d18 <HAL_DMA_Abort+0x478>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d009      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1a      	ldr	r2, [pc, #104]	; (8001d1c <HAL_DMA_Abort+0x47c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d004      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a18      	ldr	r2, [pc, #96]	; (8001d20 <HAL_DMA_Abort+0x480>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_DMA_Abort+0x426>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_DMA_Abort+0x428>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d02b      	beq.n	8001d24 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd6:	f003 031f 	and.w	r3, r3, #31
 8001cda:	223f      	movs	r2, #63	; 0x3f
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	e02a      	b.n	8001d3a <HAL_DMA_Abort+0x49a>
 8001ce4:	40020010 	.word	0x40020010
 8001ce8:	40020028 	.word	0x40020028
 8001cec:	40020040 	.word	0x40020040
 8001cf0:	40020058 	.word	0x40020058
 8001cf4:	40020070 	.word	0x40020070
 8001cf8:	40020088 	.word	0x40020088
 8001cfc:	400200a0 	.word	0x400200a0
 8001d00:	400200b8 	.word	0x400200b8
 8001d04:	40020410 	.word	0x40020410
 8001d08:	40020428 	.word	0x40020428
 8001d0c:	40020440 	.word	0x40020440
 8001d10:	40020458 	.word	0x40020458
 8001d14:	40020470 	.word	0x40020470
 8001d18:	40020488 	.word	0x40020488
 8001d1c:	400204a0 	.word	0x400204a0
 8001d20:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d28:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2e:	f003 031f 	and.w	r3, r3, #31
 8001d32:	2201      	movs	r2, #1
 8001d34:	409a      	lsls	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a4f      	ldr	r2, [pc, #316]	; (8001e7c <HAL_DMA_Abort+0x5dc>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d072      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a4d      	ldr	r2, [pc, #308]	; (8001e80 <HAL_DMA_Abort+0x5e0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d06d      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a4c      	ldr	r2, [pc, #304]	; (8001e84 <HAL_DMA_Abort+0x5e4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d068      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a4a      	ldr	r2, [pc, #296]	; (8001e88 <HAL_DMA_Abort+0x5e8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d063      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a49      	ldr	r2, [pc, #292]	; (8001e8c <HAL_DMA_Abort+0x5ec>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d05e      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a47      	ldr	r2, [pc, #284]	; (8001e90 <HAL_DMA_Abort+0x5f0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d059      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a46      	ldr	r2, [pc, #280]	; (8001e94 <HAL_DMA_Abort+0x5f4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d054      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a44      	ldr	r2, [pc, #272]	; (8001e98 <HAL_DMA_Abort+0x5f8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d04f      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a43      	ldr	r2, [pc, #268]	; (8001e9c <HAL_DMA_Abort+0x5fc>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d04a      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a41      	ldr	r2, [pc, #260]	; (8001ea0 <HAL_DMA_Abort+0x600>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d045      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a40      	ldr	r2, [pc, #256]	; (8001ea4 <HAL_DMA_Abort+0x604>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d040      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a3e      	ldr	r2, [pc, #248]	; (8001ea8 <HAL_DMA_Abort+0x608>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d03b      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a3d      	ldr	r2, [pc, #244]	; (8001eac <HAL_DMA_Abort+0x60c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d036      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a3b      	ldr	r2, [pc, #236]	; (8001eb0 <HAL_DMA_Abort+0x610>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d031      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a3a      	ldr	r2, [pc, #232]	; (8001eb4 <HAL_DMA_Abort+0x614>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d02c      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a38      	ldr	r2, [pc, #224]	; (8001eb8 <HAL_DMA_Abort+0x618>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d027      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a37      	ldr	r2, [pc, #220]	; (8001ebc <HAL_DMA_Abort+0x61c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d022      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a35      	ldr	r2, [pc, #212]	; (8001ec0 <HAL_DMA_Abort+0x620>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d01d      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a34      	ldr	r2, [pc, #208]	; (8001ec4 <HAL_DMA_Abort+0x624>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d018      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a32      	ldr	r2, [pc, #200]	; (8001ec8 <HAL_DMA_Abort+0x628>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a31      	ldr	r2, [pc, #196]	; (8001ecc <HAL_DMA_Abort+0x62c>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d00e      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a2f      	ldr	r2, [pc, #188]	; (8001ed0 <HAL_DMA_Abort+0x630>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d009      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a2e      	ldr	r2, [pc, #184]	; (8001ed4 <HAL_DMA_Abort+0x634>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d004      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a2c      	ldr	r2, [pc, #176]	; (8001ed8 <HAL_DMA_Abort+0x638>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d101      	bne.n	8001e2e <HAL_DMA_Abort+0x58e>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <HAL_DMA_Abort+0x590>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d015      	beq.n	8001e60 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e3c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00c      	beq.n	8001e60 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e54:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e5e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40020010 	.word	0x40020010
 8001e80:	40020028 	.word	0x40020028
 8001e84:	40020040 	.word	0x40020040
 8001e88:	40020058 	.word	0x40020058
 8001e8c:	40020070 	.word	0x40020070
 8001e90:	40020088 	.word	0x40020088
 8001e94:	400200a0 	.word	0x400200a0
 8001e98:	400200b8 	.word	0x400200b8
 8001e9c:	40020410 	.word	0x40020410
 8001ea0:	40020428 	.word	0x40020428
 8001ea4:	40020440 	.word	0x40020440
 8001ea8:	40020458 	.word	0x40020458
 8001eac:	40020470 	.word	0x40020470
 8001eb0:	40020488 	.word	0x40020488
 8001eb4:	400204a0 	.word	0x400204a0
 8001eb8:	400204b8 	.word	0x400204b8
 8001ebc:	58025408 	.word	0x58025408
 8001ec0:	5802541c 	.word	0x5802541c
 8001ec4:	58025430 	.word	0x58025430
 8001ec8:	58025444 	.word	0x58025444
 8001ecc:	58025458 	.word	0x58025458
 8001ed0:	5802546c 	.word	0x5802546c
 8001ed4:	58025480 	.word	0x58025480
 8001ed8:	58025494 	.word	0x58025494

08001edc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e237      	b.n	800235e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d004      	beq.n	8001f04 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2280      	movs	r2, #128	; 0x80
 8001efe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e22c      	b.n	800235e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a5c      	ldr	r2, [pc, #368]	; (800207c <HAL_DMA_Abort_IT+0x1a0>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d04a      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a5b      	ldr	r2, [pc, #364]	; (8002080 <HAL_DMA_Abort_IT+0x1a4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d045      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a59      	ldr	r2, [pc, #356]	; (8002084 <HAL_DMA_Abort_IT+0x1a8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d040      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a58      	ldr	r2, [pc, #352]	; (8002088 <HAL_DMA_Abort_IT+0x1ac>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d03b      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a56      	ldr	r2, [pc, #344]	; (800208c <HAL_DMA_Abort_IT+0x1b0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d036      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a55      	ldr	r2, [pc, #340]	; (8002090 <HAL_DMA_Abort_IT+0x1b4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d031      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a53      	ldr	r2, [pc, #332]	; (8002094 <HAL_DMA_Abort_IT+0x1b8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d02c      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a52      	ldr	r2, [pc, #328]	; (8002098 <HAL_DMA_Abort_IT+0x1bc>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d027      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a50      	ldr	r2, [pc, #320]	; (800209c <HAL_DMA_Abort_IT+0x1c0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d022      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a4f      	ldr	r2, [pc, #316]	; (80020a0 <HAL_DMA_Abort_IT+0x1c4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d01d      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a4d      	ldr	r2, [pc, #308]	; (80020a4 <HAL_DMA_Abort_IT+0x1c8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d018      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a4c      	ldr	r2, [pc, #304]	; (80020a8 <HAL_DMA_Abort_IT+0x1cc>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d013      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a4a      	ldr	r2, [pc, #296]	; (80020ac <HAL_DMA_Abort_IT+0x1d0>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00e      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a49      	ldr	r2, [pc, #292]	; (80020b0 <HAL_DMA_Abort_IT+0x1d4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d009      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a47      	ldr	r2, [pc, #284]	; (80020b4 <HAL_DMA_Abort_IT+0x1d8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d004      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a46      	ldr	r2, [pc, #280]	; (80020b8 <HAL_DMA_Abort_IT+0x1dc>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d101      	bne.n	8001fa8 <HAL_DMA_Abort_IT+0xcc>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_DMA_Abort_IT+0xce>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 8086 	beq.w	80020bc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a2f      	ldr	r2, [pc, #188]	; (800207c <HAL_DMA_Abort_IT+0x1a0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d04a      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a2e      	ldr	r2, [pc, #184]	; (8002080 <HAL_DMA_Abort_IT+0x1a4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d045      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a2c      	ldr	r2, [pc, #176]	; (8002084 <HAL_DMA_Abort_IT+0x1a8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d040      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a2b      	ldr	r2, [pc, #172]	; (8002088 <HAL_DMA_Abort_IT+0x1ac>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d03b      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a29      	ldr	r2, [pc, #164]	; (800208c <HAL_DMA_Abort_IT+0x1b0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d036      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a28      	ldr	r2, [pc, #160]	; (8002090 <HAL_DMA_Abort_IT+0x1b4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d031      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a26      	ldr	r2, [pc, #152]	; (8002094 <HAL_DMA_Abort_IT+0x1b8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d02c      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a25      	ldr	r2, [pc, #148]	; (8002098 <HAL_DMA_Abort_IT+0x1bc>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d027      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a23      	ldr	r2, [pc, #140]	; (800209c <HAL_DMA_Abort_IT+0x1c0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d022      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a22      	ldr	r2, [pc, #136]	; (80020a0 <HAL_DMA_Abort_IT+0x1c4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d01d      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a20      	ldr	r2, [pc, #128]	; (80020a4 <HAL_DMA_Abort_IT+0x1c8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d018      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1f      	ldr	r2, [pc, #124]	; (80020a8 <HAL_DMA_Abort_IT+0x1cc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d013      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1d      	ldr	r2, [pc, #116]	; (80020ac <HAL_DMA_Abort_IT+0x1d0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00e      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1c      	ldr	r2, [pc, #112]	; (80020b0 <HAL_DMA_Abort_IT+0x1d4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d009      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1a      	ldr	r2, [pc, #104]	; (80020b4 <HAL_DMA_Abort_IT+0x1d8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d004      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a19      	ldr	r2, [pc, #100]	; (80020b8 <HAL_DMA_Abort_IT+0x1dc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d108      	bne.n	800206a <HAL_DMA_Abort_IT+0x18e>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0201 	bic.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	e178      	b.n	800235c <HAL_DMA_Abort_IT+0x480>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0201 	bic.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	e16f      	b.n	800235c <HAL_DMA_Abort_IT+0x480>
 800207c:	40020010 	.word	0x40020010
 8002080:	40020028 	.word	0x40020028
 8002084:	40020040 	.word	0x40020040
 8002088:	40020058 	.word	0x40020058
 800208c:	40020070 	.word	0x40020070
 8002090:	40020088 	.word	0x40020088
 8002094:	400200a0 	.word	0x400200a0
 8002098:	400200b8 	.word	0x400200b8
 800209c:	40020410 	.word	0x40020410
 80020a0:	40020428 	.word	0x40020428
 80020a4:	40020440 	.word	0x40020440
 80020a8:	40020458 	.word	0x40020458
 80020ac:	40020470 	.word	0x40020470
 80020b0:	40020488 	.word	0x40020488
 80020b4:	400204a0 	.word	0x400204a0
 80020b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 020e 	bic.w	r2, r2, #14
 80020ca:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a6c      	ldr	r2, [pc, #432]	; (8002284 <HAL_DMA_Abort_IT+0x3a8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d04a      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a6b      	ldr	r2, [pc, #428]	; (8002288 <HAL_DMA_Abort_IT+0x3ac>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d045      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a69      	ldr	r2, [pc, #420]	; (800228c <HAL_DMA_Abort_IT+0x3b0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d040      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a68      	ldr	r2, [pc, #416]	; (8002290 <HAL_DMA_Abort_IT+0x3b4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d03b      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a66      	ldr	r2, [pc, #408]	; (8002294 <HAL_DMA_Abort_IT+0x3b8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d036      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a65      	ldr	r2, [pc, #404]	; (8002298 <HAL_DMA_Abort_IT+0x3bc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d031      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a63      	ldr	r2, [pc, #396]	; (800229c <HAL_DMA_Abort_IT+0x3c0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d02c      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a62      	ldr	r2, [pc, #392]	; (80022a0 <HAL_DMA_Abort_IT+0x3c4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d027      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a60      	ldr	r2, [pc, #384]	; (80022a4 <HAL_DMA_Abort_IT+0x3c8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d022      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a5f      	ldr	r2, [pc, #380]	; (80022a8 <HAL_DMA_Abort_IT+0x3cc>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d01d      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a5d      	ldr	r2, [pc, #372]	; (80022ac <HAL_DMA_Abort_IT+0x3d0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d018      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a5c      	ldr	r2, [pc, #368]	; (80022b0 <HAL_DMA_Abort_IT+0x3d4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d013      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a5a      	ldr	r2, [pc, #360]	; (80022b4 <HAL_DMA_Abort_IT+0x3d8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00e      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a59      	ldr	r2, [pc, #356]	; (80022b8 <HAL_DMA_Abort_IT+0x3dc>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d009      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a57      	ldr	r2, [pc, #348]	; (80022bc <HAL_DMA_Abort_IT+0x3e0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d004      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a56      	ldr	r2, [pc, #344]	; (80022c0 <HAL_DMA_Abort_IT+0x3e4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d108      	bne.n	800217e <HAL_DMA_Abort_IT+0x2a2>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0201 	bic.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	e007      	b.n	800218e <HAL_DMA_Abort_IT+0x2b2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0201 	bic.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a3c      	ldr	r2, [pc, #240]	; (8002284 <HAL_DMA_Abort_IT+0x3a8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d072      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a3a      	ldr	r2, [pc, #232]	; (8002288 <HAL_DMA_Abort_IT+0x3ac>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d06d      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a39      	ldr	r2, [pc, #228]	; (800228c <HAL_DMA_Abort_IT+0x3b0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d068      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a37      	ldr	r2, [pc, #220]	; (8002290 <HAL_DMA_Abort_IT+0x3b4>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d063      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a36      	ldr	r2, [pc, #216]	; (8002294 <HAL_DMA_Abort_IT+0x3b8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d05e      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a34      	ldr	r2, [pc, #208]	; (8002298 <HAL_DMA_Abort_IT+0x3bc>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d059      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a33      	ldr	r2, [pc, #204]	; (800229c <HAL_DMA_Abort_IT+0x3c0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d054      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a31      	ldr	r2, [pc, #196]	; (80022a0 <HAL_DMA_Abort_IT+0x3c4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d04f      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a30      	ldr	r2, [pc, #192]	; (80022a4 <HAL_DMA_Abort_IT+0x3c8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d04a      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a2e      	ldr	r2, [pc, #184]	; (80022a8 <HAL_DMA_Abort_IT+0x3cc>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d045      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a2d      	ldr	r2, [pc, #180]	; (80022ac <HAL_DMA_Abort_IT+0x3d0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d040      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a2b      	ldr	r2, [pc, #172]	; (80022b0 <HAL_DMA_Abort_IT+0x3d4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d03b      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a2a      	ldr	r2, [pc, #168]	; (80022b4 <HAL_DMA_Abort_IT+0x3d8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d036      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a28      	ldr	r2, [pc, #160]	; (80022b8 <HAL_DMA_Abort_IT+0x3dc>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d031      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a27      	ldr	r2, [pc, #156]	; (80022bc <HAL_DMA_Abort_IT+0x3e0>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d02c      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a25      	ldr	r2, [pc, #148]	; (80022c0 <HAL_DMA_Abort_IT+0x3e4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d027      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a24      	ldr	r2, [pc, #144]	; (80022c4 <HAL_DMA_Abort_IT+0x3e8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d022      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a22      	ldr	r2, [pc, #136]	; (80022c8 <HAL_DMA_Abort_IT+0x3ec>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d01d      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a21      	ldr	r2, [pc, #132]	; (80022cc <HAL_DMA_Abort_IT+0x3f0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d018      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1f      	ldr	r2, [pc, #124]	; (80022d0 <HAL_DMA_Abort_IT+0x3f4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d013      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a1e      	ldr	r2, [pc, #120]	; (80022d4 <HAL_DMA_Abort_IT+0x3f8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d00e      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a1c      	ldr	r2, [pc, #112]	; (80022d8 <HAL_DMA_Abort_IT+0x3fc>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d009      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a1b      	ldr	r2, [pc, #108]	; (80022dc <HAL_DMA_Abort_IT+0x400>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d004      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a19      	ldr	r2, [pc, #100]	; (80022e0 <HAL_DMA_Abort_IT+0x404>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d132      	bne.n	80022e4 <HAL_DMA_Abort_IT+0x408>
 800227e:	2301      	movs	r3, #1
 8002280:	e031      	b.n	80022e6 <HAL_DMA_Abort_IT+0x40a>
 8002282:	bf00      	nop
 8002284:	40020010 	.word	0x40020010
 8002288:	40020028 	.word	0x40020028
 800228c:	40020040 	.word	0x40020040
 8002290:	40020058 	.word	0x40020058
 8002294:	40020070 	.word	0x40020070
 8002298:	40020088 	.word	0x40020088
 800229c:	400200a0 	.word	0x400200a0
 80022a0:	400200b8 	.word	0x400200b8
 80022a4:	40020410 	.word	0x40020410
 80022a8:	40020428 	.word	0x40020428
 80022ac:	40020440 	.word	0x40020440
 80022b0:	40020458 	.word	0x40020458
 80022b4:	40020470 	.word	0x40020470
 80022b8:	40020488 	.word	0x40020488
 80022bc:	400204a0 	.word	0x400204a0
 80022c0:	400204b8 	.word	0x400204b8
 80022c4:	58025408 	.word	0x58025408
 80022c8:	5802541c 	.word	0x5802541c
 80022cc:	58025430 	.word	0x58025430
 80022d0:	58025444 	.word	0x58025444
 80022d4:	58025458 	.word	0x58025458
 80022d8:	5802546c 	.word	0x5802546c
 80022dc:	58025480 	.word	0x58025480
 80022e0:	58025494 	.word	0x58025494
 80022e4:	2300      	movs	r3, #0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d028      	beq.n	800233c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022f8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	2201      	movs	r2, #1
 800230a:	409a      	lsls	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002318:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00c      	beq.n	800233c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800232c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002330:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800233a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop

08002368 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002376:	4b89      	ldr	r3, [pc, #548]	; (800259c <HAL_GPIO_Init+0x234>)
 8002378:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800237a:	e194      	b.n	80026a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	2101      	movs	r1, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa01 f303 	lsl.w	r3, r1, r3
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 8186 	beq.w	80026a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d005      	beq.n	80023ac <HAL_GPIO_Init+0x44>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d130      	bne.n	800240e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	2203      	movs	r2, #3
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023e2:	2201      	movs	r2, #1
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	f003 0201 	and.w	r2, r3, #1
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b03      	cmp	r3, #3
 8002418:	d017      	beq.n	800244a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	2203      	movs	r2, #3
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d123      	bne.n	800249e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	08da      	lsrs	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3208      	adds	r2, #8
 800245e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	220f      	movs	r2, #15
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	691a      	ldr	r2, [r3, #16]
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	08da      	lsrs	r2, r3, #3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3208      	adds	r2, #8
 8002498:	69b9      	ldr	r1, [r7, #24]
 800249a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	2203      	movs	r2, #3
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 0203 	and.w	r2, r3, #3
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 80e0 	beq.w	80026a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e0:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <HAL_GPIO_Init+0x238>)
 80024e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024e6:	4a2e      	ldr	r2, [pc, #184]	; (80025a0 <HAL_GPIO_Init+0x238>)
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80024f0:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <HAL_GPIO_Init+0x238>)
 80024f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024fe:	4a29      	ldr	r2, [pc, #164]	; (80025a4 <HAL_GPIO_Init+0x23c>)
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	089b      	lsrs	r3, r3, #2
 8002504:	3302      	adds	r3, #2
 8002506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	220f      	movs	r2, #15
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a20      	ldr	r2, [pc, #128]	; (80025a8 <HAL_GPIO_Init+0x240>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d052      	beq.n	80025d0 <HAL_GPIO_Init+0x268>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a1f      	ldr	r2, [pc, #124]	; (80025ac <HAL_GPIO_Init+0x244>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d031      	beq.n	8002596 <HAL_GPIO_Init+0x22e>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a1e      	ldr	r2, [pc, #120]	; (80025b0 <HAL_GPIO_Init+0x248>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d02b      	beq.n	8002592 <HAL_GPIO_Init+0x22a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a1d      	ldr	r2, [pc, #116]	; (80025b4 <HAL_GPIO_Init+0x24c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d025      	beq.n	800258e <HAL_GPIO_Init+0x226>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a1c      	ldr	r2, [pc, #112]	; (80025b8 <HAL_GPIO_Init+0x250>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d01f      	beq.n	800258a <HAL_GPIO_Init+0x222>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a1b      	ldr	r2, [pc, #108]	; (80025bc <HAL_GPIO_Init+0x254>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d019      	beq.n	8002586 <HAL_GPIO_Init+0x21e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a1a      	ldr	r2, [pc, #104]	; (80025c0 <HAL_GPIO_Init+0x258>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d013      	beq.n	8002582 <HAL_GPIO_Init+0x21a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a19      	ldr	r2, [pc, #100]	; (80025c4 <HAL_GPIO_Init+0x25c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00d      	beq.n	800257e <HAL_GPIO_Init+0x216>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a18      	ldr	r2, [pc, #96]	; (80025c8 <HAL_GPIO_Init+0x260>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d007      	beq.n	800257a <HAL_GPIO_Init+0x212>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a17      	ldr	r2, [pc, #92]	; (80025cc <HAL_GPIO_Init+0x264>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d101      	bne.n	8002576 <HAL_GPIO_Init+0x20e>
 8002572:	2309      	movs	r3, #9
 8002574:	e02d      	b.n	80025d2 <HAL_GPIO_Init+0x26a>
 8002576:	230a      	movs	r3, #10
 8002578:	e02b      	b.n	80025d2 <HAL_GPIO_Init+0x26a>
 800257a:	2308      	movs	r3, #8
 800257c:	e029      	b.n	80025d2 <HAL_GPIO_Init+0x26a>
 800257e:	2307      	movs	r3, #7
 8002580:	e027      	b.n	80025d2 <HAL_GPIO_Init+0x26a>
 8002582:	2306      	movs	r3, #6
 8002584:	e025      	b.n	80025d2 <HAL_GPIO_Init+0x26a>
 8002586:	2305      	movs	r3, #5
 8002588:	e023      	b.n	80025d2 <HAL_GPIO_Init+0x26a>
 800258a:	2304      	movs	r3, #4
 800258c:	e021      	b.n	80025d2 <HAL_GPIO_Init+0x26a>
 800258e:	2303      	movs	r3, #3
 8002590:	e01f      	b.n	80025d2 <HAL_GPIO_Init+0x26a>
 8002592:	2302      	movs	r3, #2
 8002594:	e01d      	b.n	80025d2 <HAL_GPIO_Init+0x26a>
 8002596:	2301      	movs	r3, #1
 8002598:	e01b      	b.n	80025d2 <HAL_GPIO_Init+0x26a>
 800259a:	bf00      	nop
 800259c:	58000080 	.word	0x58000080
 80025a0:	58024400 	.word	0x58024400
 80025a4:	58000400 	.word	0x58000400
 80025a8:	58020000 	.word	0x58020000
 80025ac:	58020400 	.word	0x58020400
 80025b0:	58020800 	.word	0x58020800
 80025b4:	58020c00 	.word	0x58020c00
 80025b8:	58021000 	.word	0x58021000
 80025bc:	58021400 	.word	0x58021400
 80025c0:	58021800 	.word	0x58021800
 80025c4:	58021c00 	.word	0x58021c00
 80025c8:	58022000 	.word	0x58022000
 80025cc:	58022400 	.word	0x58022400
 80025d0:	2300      	movs	r3, #0
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	f002 0203 	and.w	r2, r2, #3
 80025d8:	0092      	lsls	r2, r2, #2
 80025da:	4093      	lsls	r3, r2
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025e2:	4938      	ldr	r1, [pc, #224]	; (80026c4 <HAL_GPIO_Init+0x35c>)
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	089b      	lsrs	r3, r3, #2
 80025e8:	3302      	adds	r3, #2
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002616:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800261e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002644:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	3301      	adds	r3, #1
 80026a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f47f ae63 	bne.w	800237c <HAL_GPIO_Init+0x14>
  }
}
 80026b6:	bf00      	nop
 80026b8:	bf00      	nop
 80026ba:	3724      	adds	r7, #36	; 0x24
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	58000400 	.word	0x58000400

080026c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	807b      	strh	r3, [r7, #2]
 80026d4:	4613      	mov	r3, r2
 80026d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026d8:	787b      	ldrb	r3, [r7, #1]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026de:	887a      	ldrh	r2, [r7, #2]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80026e4:	e003      	b.n	80026ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80026e6:	887b      	ldrh	r3, [r7, #2]
 80026e8:	041a      	lsls	r2, r3, #16
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	619a      	str	r2, [r3, #24]
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
	...

080026fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002704:	4b19      	ldr	r3, [pc, #100]	; (800276c <HAL_PWREx_ConfigSupply+0x70>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b04      	cmp	r3, #4
 800270e:	d00a      	beq.n	8002726 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002710:	4b16      	ldr	r3, [pc, #88]	; (800276c <HAL_PWREx_ConfigSupply+0x70>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	429a      	cmp	r2, r3
 800271c:	d001      	beq.n	8002722 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e01f      	b.n	8002762 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	e01d      	b.n	8002762 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002726:	4b11      	ldr	r3, [pc, #68]	; (800276c <HAL_PWREx_ConfigSupply+0x70>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f023 0207 	bic.w	r2, r3, #7
 800272e:	490f      	ldr	r1, [pc, #60]	; (800276c <HAL_PWREx_ConfigSupply+0x70>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4313      	orrs	r3, r2
 8002734:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002736:	f7fe ff0f 	bl	8001558 <HAL_GetTick>
 800273a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800273c:	e009      	b.n	8002752 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800273e:	f7fe ff0b 	bl	8001558 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800274c:	d901      	bls.n	8002752 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e007      	b.n	8002762 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_PWREx_ConfigSupply+0x70>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800275a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800275e:	d1ee      	bne.n	800273e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	58024800 	.word	0x58024800

08002770 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08c      	sub	sp, #48	; 0x30
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d102      	bne.n	8002784 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	f000 bc48 	b.w	8003014 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 8088 	beq.w	80028a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002792:	4b99      	ldr	r3, [pc, #612]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800279c:	4b96      	ldr	r3, [pc, #600]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 800279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a4:	2b10      	cmp	r3, #16
 80027a6:	d007      	beq.n	80027b8 <HAL_RCC_OscConfig+0x48>
 80027a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027aa:	2b18      	cmp	r3, #24
 80027ac:	d111      	bne.n	80027d2 <HAL_RCC_OscConfig+0x62>
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d10c      	bne.n	80027d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b8:	4b8f      	ldr	r3, [pc, #572]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d06d      	beq.n	80028a0 <HAL_RCC_OscConfig+0x130>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d169      	bne.n	80028a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	f000 bc21 	b.w	8003014 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027da:	d106      	bne.n	80027ea <HAL_RCC_OscConfig+0x7a>
 80027dc:	4b86      	ldr	r3, [pc, #536]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a85      	ldr	r2, [pc, #532]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 80027e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	e02e      	b.n	8002848 <HAL_RCC_OscConfig+0xd8>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10c      	bne.n	800280c <HAL_RCC_OscConfig+0x9c>
 80027f2:	4b81      	ldr	r3, [pc, #516]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a80      	ldr	r2, [pc, #512]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 80027f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	4b7e      	ldr	r3, [pc, #504]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a7d      	ldr	r2, [pc, #500]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002804:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	e01d      	b.n	8002848 <HAL_RCC_OscConfig+0xd8>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002814:	d10c      	bne.n	8002830 <HAL_RCC_OscConfig+0xc0>
 8002816:	4b78      	ldr	r3, [pc, #480]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a77      	ldr	r2, [pc, #476]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 800281c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	4b75      	ldr	r3, [pc, #468]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a74      	ldr	r2, [pc, #464]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	e00b      	b.n	8002848 <HAL_RCC_OscConfig+0xd8>
 8002830:	4b71      	ldr	r3, [pc, #452]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a70      	ldr	r2, [pc, #448]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800283a:	6013      	str	r3, [r2, #0]
 800283c:	4b6e      	ldr	r3, [pc, #440]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a6d      	ldr	r2, [pc, #436]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d013      	beq.n	8002878 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7fe fe82 	bl	8001558 <HAL_GetTick>
 8002854:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002858:	f7fe fe7e 	bl	8001558 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	; 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e3d4      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800286a:	4b63      	ldr	r3, [pc, #396]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f0      	beq.n	8002858 <HAL_RCC_OscConfig+0xe8>
 8002876:	e014      	b.n	80028a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7fe fe6e 	bl	8001558 <HAL_GetTick>
 800287c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002880:	f7fe fe6a 	bl	8001558 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b64      	cmp	r3, #100	; 0x64
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e3c0      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002892:	4b59      	ldr	r3, [pc, #356]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x110>
 800289e:	e000      	b.n	80028a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 80ca 	beq.w	8002a44 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b0:	4b51      	ldr	r3, [pc, #324]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028ba:	4b4f      	ldr	r3, [pc, #316]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d007      	beq.n	80028d6 <HAL_RCC_OscConfig+0x166>
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	2b18      	cmp	r3, #24
 80028ca:	d156      	bne.n	800297a <HAL_RCC_OscConfig+0x20a>
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d151      	bne.n	800297a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028d6:	4b48      	ldr	r3, [pc, #288]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <HAL_RCC_OscConfig+0x17e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e392      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028ee:	4b42      	ldr	r3, [pc, #264]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 0219 	bic.w	r2, r3, #25
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	493f      	ldr	r1, [pc, #252]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7fe fe2a 	bl	8001558 <HAL_GetTick>
 8002904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002908:	f7fe fe26 	bl	8001558 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e37c      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800291a:	4b37      	ldr	r3, [pc, #220]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002926:	f7fe fe23 	bl	8001570 <HAL_GetREVID>
 800292a:	4603      	mov	r3, r0
 800292c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002930:	4293      	cmp	r3, r2
 8002932:	d817      	bhi.n	8002964 <HAL_RCC_OscConfig+0x1f4>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2b40      	cmp	r3, #64	; 0x40
 800293a:	d108      	bne.n	800294e <HAL_RCC_OscConfig+0x1de>
 800293c:	4b2e      	ldr	r3, [pc, #184]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002944:	4a2c      	ldr	r2, [pc, #176]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800294c:	e07a      	b.n	8002a44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294e:	4b2a      	ldr	r3, [pc, #168]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	031b      	lsls	r3, r3, #12
 800295c:	4926      	ldr	r1, [pc, #152]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002962:	e06f      	b.n	8002a44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002964:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	061b      	lsls	r3, r3, #24
 8002972:	4921      	ldr	r1, [pc, #132]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002978:	e064      	b.n	8002a44 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d047      	beq.n	8002a12 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002982:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 0219 	bic.w	r2, r3, #25
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	491a      	ldr	r1, [pc, #104]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002990:	4313      	orrs	r3, r2
 8002992:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f7fe fde0 	bl	8001558 <HAL_GetTick>
 8002998:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800299c:	f7fe fddc 	bl	8001558 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e332      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029ae:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ba:	f7fe fdd9 	bl	8001570 <HAL_GetREVID>
 80029be:	4603      	mov	r3, r0
 80029c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d819      	bhi.n	80029fc <HAL_RCC_OscConfig+0x28c>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	2b40      	cmp	r3, #64	; 0x40
 80029ce:	d108      	bne.n	80029e2 <HAL_RCC_OscConfig+0x272>
 80029d0:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80029d8:	4a07      	ldr	r2, [pc, #28]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 80029da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029de:	6053      	str	r3, [r2, #4]
 80029e0:	e030      	b.n	8002a44 <HAL_RCC_OscConfig+0x2d4>
 80029e2:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	031b      	lsls	r3, r3, #12
 80029f0:	4901      	ldr	r1, [pc, #4]	; (80029f8 <HAL_RCC_OscConfig+0x288>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	604b      	str	r3, [r1, #4]
 80029f6:	e025      	b.n	8002a44 <HAL_RCC_OscConfig+0x2d4>
 80029f8:	58024400 	.word	0x58024400
 80029fc:	4b9a      	ldr	r3, [pc, #616]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	061b      	lsls	r3, r3, #24
 8002a0a:	4997      	ldr	r1, [pc, #604]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]
 8002a10:	e018      	b.n	8002a44 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a12:	4b95      	ldr	r3, [pc, #596]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a94      	ldr	r2, [pc, #592]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fd9b 	bl	8001558 <HAL_GetTick>
 8002a22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a26:	f7fe fd97 	bl	8001558 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e2ed      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a38:	4b8b      	ldr	r3, [pc, #556]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f0      	bne.n	8002a26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80a9 	beq.w	8002ba4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a52:	4b85      	ldr	r3, [pc, #532]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a5c:	4b82      	ldr	r3, [pc, #520]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d007      	beq.n	8002a78 <HAL_RCC_OscConfig+0x308>
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	2b18      	cmp	r3, #24
 8002a6c:	d13a      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x374>
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d135      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a78:	4b7b      	ldr	r3, [pc, #492]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_OscConfig+0x320>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	2b80      	cmp	r3, #128	; 0x80
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e2c1      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a90:	f7fe fd6e 	bl	8001570 <HAL_GetREVID>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d817      	bhi.n	8002ace <HAL_RCC_OscConfig+0x35e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	d108      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x348>
 8002aa6:	4b70      	ldr	r3, [pc, #448]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002aae:	4a6e      	ldr	r2, [pc, #440]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002ab0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ab4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ab6:	e075      	b.n	8002ba4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ab8:	4b6b      	ldr	r3, [pc, #428]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	069b      	lsls	r3, r3, #26
 8002ac6:	4968      	ldr	r1, [pc, #416]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002acc:	e06a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ace:	4b66      	ldr	r3, [pc, #408]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	061b      	lsls	r3, r3, #24
 8002adc:	4962      	ldr	r1, [pc, #392]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ae2:	e05f      	b.n	8002ba4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d042      	beq.n	8002b72 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002aec:	4b5e      	ldr	r3, [pc, #376]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a5d      	ldr	r2, [pc, #372]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7fe fd2e 	bl	8001558 <HAL_GetTick>
 8002afc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b00:	f7fe fd2a 	bl	8001558 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e280      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b12:	4b55      	ldr	r3, [pc, #340]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b1e:	f7fe fd27 	bl	8001570 <HAL_GetREVID>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d817      	bhi.n	8002b5c <HAL_RCC_OscConfig+0x3ec>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	2b20      	cmp	r3, #32
 8002b32:	d108      	bne.n	8002b46 <HAL_RCC_OscConfig+0x3d6>
 8002b34:	4b4c      	ldr	r3, [pc, #304]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b3c:	4a4a      	ldr	r2, [pc, #296]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002b3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b42:	6053      	str	r3, [r2, #4]
 8002b44:	e02e      	b.n	8002ba4 <HAL_RCC_OscConfig+0x434>
 8002b46:	4b48      	ldr	r3, [pc, #288]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	069b      	lsls	r3, r3, #26
 8002b54:	4944      	ldr	r1, [pc, #272]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	604b      	str	r3, [r1, #4]
 8002b5a:	e023      	b.n	8002ba4 <HAL_RCC_OscConfig+0x434>
 8002b5c:	4b42      	ldr	r3, [pc, #264]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	061b      	lsls	r3, r3, #24
 8002b6a:	493f      	ldr	r1, [pc, #252]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60cb      	str	r3, [r1, #12]
 8002b70:	e018      	b.n	8002ba4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b72:	4b3d      	ldr	r3, [pc, #244]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a3c      	ldr	r2, [pc, #240]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002b78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7e:	f7fe fceb 	bl	8001558 <HAL_GetTick>
 8002b82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b86:	f7fe fce7 	bl	8001558 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e23d      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b98:	4b33      	ldr	r3, [pc, #204]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f0      	bne.n	8002b86 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d036      	beq.n	8002c1e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d019      	beq.n	8002bec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bb8:	4b2b      	ldr	r3, [pc, #172]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bbc:	4a2a      	ldr	r2, [pc, #168]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc4:	f7fe fcc8 	bl	8001558 <HAL_GetTick>
 8002bc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bcc:	f7fe fcc4 	bl	8001558 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e21a      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bde:	4b22      	ldr	r3, [pc, #136]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x45c>
 8002bea:	e018      	b.n	8002c1e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bec:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf0:	4a1d      	ldr	r2, [pc, #116]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002bf2:	f023 0301 	bic.w	r3, r3, #1
 8002bf6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf8:	f7fe fcae 	bl	8001558 <HAL_GetTick>
 8002bfc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c00:	f7fe fcaa 	bl	8001558 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e200      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c12:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d039      	beq.n	8002c9e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d01c      	beq.n	8002c6c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c32:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a0c      	ldr	r2, [pc, #48]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002c38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c3e:	f7fe fc8b 	bl	8001558 <HAL_GetTick>
 8002c42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c46:	f7fe fc87 	bl	8001558 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e1dd      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0f0      	beq.n	8002c46 <HAL_RCC_OscConfig+0x4d6>
 8002c64:	e01b      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
 8002c66:	bf00      	nop
 8002c68:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c6c:	4b9b      	ldr	r3, [pc, #620]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a9a      	ldr	r2, [pc, #616]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002c72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c78:	f7fe fc6e 	bl	8001558 <HAL_GetTick>
 8002c7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c80:	f7fe fc6a 	bl	8001558 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e1c0      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c92:	4b92      	ldr	r3, [pc, #584]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 8081 	beq.w	8002dae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002cac:	4b8c      	ldr	r3, [pc, #560]	; (8002ee0 <HAL_RCC_OscConfig+0x770>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a8b      	ldr	r2, [pc, #556]	; (8002ee0 <HAL_RCC_OscConfig+0x770>)
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cb8:	f7fe fc4e 	bl	8001558 <HAL_GetTick>
 8002cbc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc0:	f7fe fc4a 	bl	8001558 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	; 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e1a0      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cd2:	4b83      	ldr	r3, [pc, #524]	; (8002ee0 <HAL_RCC_OscConfig+0x770>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d106      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x584>
 8002ce6:	4b7d      	ldr	r3, [pc, #500]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cea:	4a7c      	ldr	r2, [pc, #496]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf2:	e02d      	b.n	8002d50 <HAL_RCC_OscConfig+0x5e0>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10c      	bne.n	8002d16 <HAL_RCC_OscConfig+0x5a6>
 8002cfc:	4b77      	ldr	r3, [pc, #476]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d00:	4a76      	ldr	r2, [pc, #472]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d02:	f023 0301 	bic.w	r3, r3, #1
 8002d06:	6713      	str	r3, [r2, #112]	; 0x70
 8002d08:	4b74      	ldr	r3, [pc, #464]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	4a73      	ldr	r2, [pc, #460]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d0e:	f023 0304 	bic.w	r3, r3, #4
 8002d12:	6713      	str	r3, [r2, #112]	; 0x70
 8002d14:	e01c      	b.n	8002d50 <HAL_RCC_OscConfig+0x5e0>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2b05      	cmp	r3, #5
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x5c8>
 8002d1e:	4b6f      	ldr	r3, [pc, #444]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	4a6e      	ldr	r2, [pc, #440]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d24:	f043 0304 	orr.w	r3, r3, #4
 8002d28:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2a:	4b6c      	ldr	r3, [pc, #432]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2e:	4a6b      	ldr	r2, [pc, #428]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	6713      	str	r3, [r2, #112]	; 0x70
 8002d36:	e00b      	b.n	8002d50 <HAL_RCC_OscConfig+0x5e0>
 8002d38:	4b68      	ldr	r3, [pc, #416]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	4a67      	ldr	r2, [pc, #412]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	6713      	str	r3, [r2, #112]	; 0x70
 8002d44:	4b65      	ldr	r3, [pc, #404]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	4a64      	ldr	r2, [pc, #400]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d4a:	f023 0304 	bic.w	r3, r3, #4
 8002d4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d015      	beq.n	8002d84 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d58:	f7fe fbfe 	bl	8001558 <HAL_GetTick>
 8002d5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d5e:	e00a      	b.n	8002d76 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d60:	f7fe fbfa 	bl	8001558 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e14e      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d76:	4b59      	ldr	r3, [pc, #356]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0ee      	beq.n	8002d60 <HAL_RCC_OscConfig+0x5f0>
 8002d82:	e014      	b.n	8002dae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7fe fbe8 	bl	8001558 <HAL_GetTick>
 8002d88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d8a:	e00a      	b.n	8002da2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8c:	f7fe fbe4 	bl	8001558 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e138      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002da2:	4b4e      	ldr	r3, [pc, #312]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1ee      	bne.n	8002d8c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 812d 	beq.w	8003012 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002db8:	4b48      	ldr	r3, [pc, #288]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dc0:	2b18      	cmp	r3, #24
 8002dc2:	f000 80bd 	beq.w	8002f40 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	f040 809e 	bne.w	8002f0c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd0:	4b42      	ldr	r3, [pc, #264]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a41      	ldr	r2, [pc, #260]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fe fbbc 	bl	8001558 <HAL_GetTick>
 8002de0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de4:	f7fe fbb8 	bl	8001558 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e10e      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002df6:	4b39      	ldr	r3, [pc, #228]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e02:	4b36      	ldr	r3, [pc, #216]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e06:	4b37      	ldr	r3, [pc, #220]	; (8002ee4 <HAL_RCC_OscConfig+0x774>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e12:	0112      	lsls	r2, r2, #4
 8002e14:	430a      	orrs	r2, r1
 8002e16:	4931      	ldr	r1, [pc, #196]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	628b      	str	r3, [r1, #40]	; 0x28
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	3b01      	subs	r3, #1
 8002e22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	025b      	lsls	r3, r3, #9
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e36:	3b01      	subs	r3, #1
 8002e38:	041b      	lsls	r3, r3, #16
 8002e3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e44:	3b01      	subs	r3, #1
 8002e46:	061b      	lsls	r3, r3, #24
 8002e48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002e4c:	4923      	ldr	r1, [pc, #140]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002e52:	4b22      	ldr	r3, [pc, #136]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e56:	4a21      	ldr	r2, [pc, #132]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e58:	f023 0301 	bic.w	r3, r3, #1
 8002e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e5e:	4b1f      	ldr	r3, [pc, #124]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e62:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <HAL_RCC_OscConfig+0x778>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e6a:	00d2      	lsls	r2, r2, #3
 8002e6c:	491b      	ldr	r1, [pc, #108]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e72:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	f023 020c 	bic.w	r2, r3, #12
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	4917      	ldr	r1, [pc, #92]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e84:	4b15      	ldr	r3, [pc, #84]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	f023 0202 	bic.w	r2, r3, #2
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e90:	4912      	ldr	r1, [pc, #72]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e96:	4b11      	ldr	r3, [pc, #68]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9a:	4a10      	ldr	r2, [pc, #64]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ea2:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	4a0d      	ldr	r2, [pc, #52]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002eae:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	4a0a      	ldr	r2, [pc, #40]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002eba:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebe:	4a07      	ldr	r2, [pc, #28]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a04      	ldr	r2, [pc, #16]	; (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002ecc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed2:	f7fe fb41 	bl	8001558 <HAL_GetTick>
 8002ed6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ed8:	e011      	b.n	8002efe <HAL_RCC_OscConfig+0x78e>
 8002eda:	bf00      	nop
 8002edc:	58024400 	.word	0x58024400
 8002ee0:	58024800 	.word	0x58024800
 8002ee4:	fffffc0c 	.word	0xfffffc0c
 8002ee8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eec:	f7fe fb34 	bl	8001558 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e08a      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002efe:	4b47      	ldr	r3, [pc, #284]	; (800301c <HAL_RCC_OscConfig+0x8ac>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCC_OscConfig+0x77c>
 8002f0a:	e082      	b.n	8003012 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0c:	4b43      	ldr	r3, [pc, #268]	; (800301c <HAL_RCC_OscConfig+0x8ac>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a42      	ldr	r2, [pc, #264]	; (800301c <HAL_RCC_OscConfig+0x8ac>)
 8002f12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7fe fb1e 	bl	8001558 <HAL_GetTick>
 8002f1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f20:	f7fe fb1a 	bl	8001558 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e070      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f32:	4b3a      	ldr	r3, [pc, #232]	; (800301c <HAL_RCC_OscConfig+0x8ac>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x7b0>
 8002f3e:	e068      	b.n	8003012 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f40:	4b36      	ldr	r3, [pc, #216]	; (800301c <HAL_RCC_OscConfig+0x8ac>)
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f46:	4b35      	ldr	r3, [pc, #212]	; (800301c <HAL_RCC_OscConfig+0x8ac>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d031      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f003 0203 	and.w	r2, r3, #3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d12a      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d122      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d11a      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	0a5b      	lsrs	r3, r3, #9
 8002f86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d111      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	0c1b      	lsrs	r3, r3, #16
 8002f98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d108      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	0e1b      	lsrs	r3, r3, #24
 8002faa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e02b      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002fbc:	4b17      	ldr	r3, [pc, #92]	; (800301c <HAL_RCC_OscConfig+0x8ac>)
 8002fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc0:	08db      	lsrs	r3, r3, #3
 8002fc2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002fc6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d01f      	beq.n	8003012 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002fd2:	4b12      	ldr	r3, [pc, #72]	; (800301c <HAL_RCC_OscConfig+0x8ac>)
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	4a11      	ldr	r2, [pc, #68]	; (800301c <HAL_RCC_OscConfig+0x8ac>)
 8002fd8:	f023 0301 	bic.w	r3, r3, #1
 8002fdc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fde:	f7fe fabb 	bl	8001558 <HAL_GetTick>
 8002fe2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002fe4:	bf00      	nop
 8002fe6:	f7fe fab7 	bl	8001558 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d0f9      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	; (800301c <HAL_RCC_OscConfig+0x8ac>)
 8002ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <HAL_RCC_OscConfig+0x8b0>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ffe:	00d2      	lsls	r2, r2, #3
 8003000:	4906      	ldr	r1, [pc, #24]	; (800301c <HAL_RCC_OscConfig+0x8ac>)
 8003002:	4313      	orrs	r3, r2
 8003004:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003006:	4b05      	ldr	r3, [pc, #20]	; (800301c <HAL_RCC_OscConfig+0x8ac>)
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	4a04      	ldr	r2, [pc, #16]	; (800301c <HAL_RCC_OscConfig+0x8ac>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3730      	adds	r7, #48	; 0x30
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	58024400 	.word	0x58024400
 8003020:	ffff0007 	.word	0xffff0007

08003024 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e19c      	b.n	8003372 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003038:	4b8a      	ldr	r3, [pc, #552]	; (8003264 <HAL_RCC_ClockConfig+0x240>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d910      	bls.n	8003068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b87      	ldr	r3, [pc, #540]	; (8003264 <HAL_RCC_ClockConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f023 020f 	bic.w	r2, r3, #15
 800304e:	4985      	ldr	r1, [pc, #532]	; (8003264 <HAL_RCC_ClockConfig+0x240>)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003056:	4b83      	ldr	r3, [pc, #524]	; (8003264 <HAL_RCC_ClockConfig+0x240>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e184      	b.n	8003372 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d010      	beq.n	8003096 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	4b7b      	ldr	r3, [pc, #492]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003080:	429a      	cmp	r2, r3
 8003082:	d908      	bls.n	8003096 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003084:	4b78      	ldr	r3, [pc, #480]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	4975      	ldr	r1, [pc, #468]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 8003092:	4313      	orrs	r3, r2
 8003094:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d010      	beq.n	80030c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	4b70      	ldr	r3, [pc, #448]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d908      	bls.n	80030c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030b2:	4b6d      	ldr	r3, [pc, #436]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	496a      	ldr	r1, [pc, #424]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d010      	beq.n	80030f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	699a      	ldr	r2, [r3, #24]
 80030d4:	4b64      	ldr	r3, [pc, #400]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030dc:	429a      	cmp	r2, r3
 80030de:	d908      	bls.n	80030f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030e0:	4b61      	ldr	r3, [pc, #388]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	495e      	ldr	r1, [pc, #376]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d010      	beq.n	8003120 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69da      	ldr	r2, [r3, #28]
 8003102:	4b59      	ldr	r3, [pc, #356]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800310a:	429a      	cmp	r2, r3
 800310c:	d908      	bls.n	8003120 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800310e:	4b56      	ldr	r3, [pc, #344]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	4953      	ldr	r1, [pc, #332]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 800311c:	4313      	orrs	r3, r2
 800311e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d010      	beq.n	800314e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	4b4d      	ldr	r3, [pc, #308]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f003 030f 	and.w	r3, r3, #15
 8003138:	429a      	cmp	r2, r3
 800313a:	d908      	bls.n	800314e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800313c:	4b4a      	ldr	r3, [pc, #296]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f023 020f 	bic.w	r2, r3, #15
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4947      	ldr	r1, [pc, #284]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 800314a:	4313      	orrs	r3, r2
 800314c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d055      	beq.n	8003206 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800315a:	4b43      	ldr	r3, [pc, #268]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	4940      	ldr	r1, [pc, #256]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 8003168:	4313      	orrs	r3, r2
 800316a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b02      	cmp	r3, #2
 8003172:	d107      	bne.n	8003184 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003174:	4b3c      	ldr	r3, [pc, #240]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d121      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0f6      	b.n	8003372 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b03      	cmp	r3, #3
 800318a:	d107      	bne.n	800319c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800318c:	4b36      	ldr	r3, [pc, #216]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d115      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0ea      	b.n	8003372 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d107      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031a4:	4b30      	ldr	r3, [pc, #192]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d109      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e0de      	b.n	8003372 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031b4:	4b2c      	ldr	r3, [pc, #176]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0d6      	b.n	8003372 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031c4:	4b28      	ldr	r3, [pc, #160]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	f023 0207 	bic.w	r2, r3, #7
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	4925      	ldr	r1, [pc, #148]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d6:	f7fe f9bf 	bl	8001558 <HAL_GetTick>
 80031da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031dc:	e00a      	b.n	80031f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031de:	f7fe f9bb 	bl	8001558 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e0be      	b.n	8003372 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f4:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	429a      	cmp	r2, r3
 8003204:	d1eb      	bne.n	80031de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d010      	beq.n	8003234 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	4b14      	ldr	r3, [pc, #80]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	429a      	cmp	r2, r3
 8003220:	d208      	bcs.n	8003234 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003222:	4b11      	ldr	r3, [pc, #68]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	f023 020f 	bic.w	r2, r3, #15
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	490e      	ldr	r1, [pc, #56]	; (8003268 <HAL_RCC_ClockConfig+0x244>)
 8003230:	4313      	orrs	r3, r2
 8003232:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003234:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <HAL_RCC_ClockConfig+0x240>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d214      	bcs.n	800326c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b08      	ldr	r3, [pc, #32]	; (8003264 <HAL_RCC_ClockConfig+0x240>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 020f 	bic.w	r2, r3, #15
 800324a:	4906      	ldr	r1, [pc, #24]	; (8003264 <HAL_RCC_ClockConfig+0x240>)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	4313      	orrs	r3, r2
 8003250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003252:	4b04      	ldr	r3, [pc, #16]	; (8003264 <HAL_RCC_ClockConfig+0x240>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d005      	beq.n	800326c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e086      	b.n	8003372 <HAL_RCC_ClockConfig+0x34e>
 8003264:	52002000 	.word	0x52002000
 8003268:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d010      	beq.n	800329a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	4b3f      	ldr	r3, [pc, #252]	; (800337c <HAL_RCC_ClockConfig+0x358>)
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003284:	429a      	cmp	r2, r3
 8003286:	d208      	bcs.n	800329a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003288:	4b3c      	ldr	r3, [pc, #240]	; (800337c <HAL_RCC_ClockConfig+0x358>)
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	4939      	ldr	r1, [pc, #228]	; (800337c <HAL_RCC_ClockConfig+0x358>)
 8003296:	4313      	orrs	r3, r2
 8003298:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d010      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	4b34      	ldr	r3, [pc, #208]	; (800337c <HAL_RCC_ClockConfig+0x358>)
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d208      	bcs.n	80032c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032b6:	4b31      	ldr	r3, [pc, #196]	; (800337c <HAL_RCC_ClockConfig+0x358>)
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	492e      	ldr	r1, [pc, #184]	; (800337c <HAL_RCC_ClockConfig+0x358>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d010      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699a      	ldr	r2, [r3, #24]
 80032d8:	4b28      	ldr	r3, [pc, #160]	; (800337c <HAL_RCC_ClockConfig+0x358>)
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d208      	bcs.n	80032f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032e4:	4b25      	ldr	r3, [pc, #148]	; (800337c <HAL_RCC_ClockConfig+0x358>)
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	4922      	ldr	r1, [pc, #136]	; (800337c <HAL_RCC_ClockConfig+0x358>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d010      	beq.n	8003324 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69da      	ldr	r2, [r3, #28]
 8003306:	4b1d      	ldr	r3, [pc, #116]	; (800337c <HAL_RCC_ClockConfig+0x358>)
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800330e:	429a      	cmp	r2, r3
 8003310:	d208      	bcs.n	8003324 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003312:	4b1a      	ldr	r3, [pc, #104]	; (800337c <HAL_RCC_ClockConfig+0x358>)
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	4917      	ldr	r1, [pc, #92]	; (800337c <HAL_RCC_ClockConfig+0x358>)
 8003320:	4313      	orrs	r3, r2
 8003322:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003324:	f000 f834 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 8003328:	4602      	mov	r2, r0
 800332a:	4b14      	ldr	r3, [pc, #80]	; (800337c <HAL_RCC_ClockConfig+0x358>)
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	0a1b      	lsrs	r3, r3, #8
 8003330:	f003 030f 	and.w	r3, r3, #15
 8003334:	4912      	ldr	r1, [pc, #72]	; (8003380 <HAL_RCC_ClockConfig+0x35c>)
 8003336:	5ccb      	ldrb	r3, [r1, r3]
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	fa22 f303 	lsr.w	r3, r2, r3
 8003340:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003342:	4b0e      	ldr	r3, [pc, #56]	; (800337c <HAL_RCC_ClockConfig+0x358>)
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	4a0d      	ldr	r2, [pc, #52]	; (8003380 <HAL_RCC_ClockConfig+0x35c>)
 800334c:	5cd3      	ldrb	r3, [r2, r3]
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
 8003358:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <HAL_RCC_ClockConfig+0x360>)
 800335a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800335c:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <HAL_RCC_ClockConfig+0x364>)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003362:	4b0a      	ldr	r3, [pc, #40]	; (800338c <HAL_RCC_ClockConfig+0x368>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe f8ac 	bl	80014c4 <HAL_InitTick>
 800336c:	4603      	mov	r3, r0
 800336e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003370:	7bfb      	ldrb	r3, [r7, #15]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	58024400 	.word	0x58024400
 8003380:	0800931c 	.word	0x0800931c
 8003384:	24000004 	.word	0x24000004
 8003388:	24000000 	.word	0x24000000
 800338c:	24000008 	.word	0x24000008

08003390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003390:	b480      	push	{r7}
 8003392:	b089      	sub	sp, #36	; 0x24
 8003394:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003396:	4bb3      	ldr	r3, [pc, #716]	; (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800339e:	2b18      	cmp	r3, #24
 80033a0:	f200 8155 	bhi.w	800364e <HAL_RCC_GetSysClockFreq+0x2be>
 80033a4:	a201      	add	r2, pc, #4	; (adr r2, 80033ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80033a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033aa:	bf00      	nop
 80033ac:	08003411 	.word	0x08003411
 80033b0:	0800364f 	.word	0x0800364f
 80033b4:	0800364f 	.word	0x0800364f
 80033b8:	0800364f 	.word	0x0800364f
 80033bc:	0800364f 	.word	0x0800364f
 80033c0:	0800364f 	.word	0x0800364f
 80033c4:	0800364f 	.word	0x0800364f
 80033c8:	0800364f 	.word	0x0800364f
 80033cc:	08003437 	.word	0x08003437
 80033d0:	0800364f 	.word	0x0800364f
 80033d4:	0800364f 	.word	0x0800364f
 80033d8:	0800364f 	.word	0x0800364f
 80033dc:	0800364f 	.word	0x0800364f
 80033e0:	0800364f 	.word	0x0800364f
 80033e4:	0800364f 	.word	0x0800364f
 80033e8:	0800364f 	.word	0x0800364f
 80033ec:	0800343d 	.word	0x0800343d
 80033f0:	0800364f 	.word	0x0800364f
 80033f4:	0800364f 	.word	0x0800364f
 80033f8:	0800364f 	.word	0x0800364f
 80033fc:	0800364f 	.word	0x0800364f
 8003400:	0800364f 	.word	0x0800364f
 8003404:	0800364f 	.word	0x0800364f
 8003408:	0800364f 	.word	0x0800364f
 800340c:	08003443 	.word	0x08003443
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003410:	4b94      	ldr	r3, [pc, #592]	; (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b00      	cmp	r3, #0
 800341a:	d009      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800341c:	4b91      	ldr	r3, [pc, #580]	; (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	08db      	lsrs	r3, r3, #3
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	4a90      	ldr	r2, [pc, #576]	; (8003668 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003428:	fa22 f303 	lsr.w	r3, r2, r3
 800342c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800342e:	e111      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003430:	4b8d      	ldr	r3, [pc, #564]	; (8003668 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003432:	61bb      	str	r3, [r7, #24]
      break;
 8003434:	e10e      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003436:	4b8d      	ldr	r3, [pc, #564]	; (800366c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003438:	61bb      	str	r3, [r7, #24]
      break;
 800343a:	e10b      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800343c:	4b8c      	ldr	r3, [pc, #560]	; (8003670 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800343e:	61bb      	str	r3, [r7, #24]
      break;
 8003440:	e108      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003442:	4b88      	ldr	r3, [pc, #544]	; (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800344c:	4b85      	ldr	r3, [pc, #532]	; (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	091b      	lsrs	r3, r3, #4
 8003452:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003456:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003458:	4b82      	ldr	r3, [pc, #520]	; (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003462:	4b80      	ldr	r3, [pc, #512]	; (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003466:	08db      	lsrs	r3, r3, #3
 8003468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	fb02 f303 	mul.w	r3, r2, r3
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800347a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 80e1 	beq.w	8003648 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2b02      	cmp	r3, #2
 800348a:	f000 8083 	beq.w	8003594 <HAL_RCC_GetSysClockFreq+0x204>
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b02      	cmp	r3, #2
 8003492:	f200 80a1 	bhi.w	80035d8 <HAL_RCC_GetSysClockFreq+0x248>
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_RCC_GetSysClockFreq+0x114>
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d056      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0x1c0>
 80034a2:	e099      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034a4:	4b6f      	ldr	r3, [pc, #444]	; (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d02d      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80034b0:	4b6c      	ldr	r3, [pc, #432]	; (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	08db      	lsrs	r3, r3, #3
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	4a6b      	ldr	r2, [pc, #428]	; (8003668 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034bc:	fa22 f303 	lsr.w	r3, r2, r3
 80034c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	ee07 3a90 	vmov	s15, r3
 80034c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034da:	4b62      	ldr	r3, [pc, #392]	; (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003674 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003506:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800350a:	e087      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	ee07 3a90 	vmov	s15, r3
 8003512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003516:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003678 <HAL_RCC_GetSysClockFreq+0x2e8>
 800351a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800351e:	4b51      	ldr	r3, [pc, #324]	; (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003526:	ee07 3a90 	vmov	s15, r3
 800352a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800352e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003532:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003674 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800353a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800353e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800354e:	e065      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	ee07 3a90 	vmov	s15, r3
 8003556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800355a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800367c <HAL_RCC_GetSysClockFreq+0x2ec>
 800355e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003562:	4b40      	ldr	r3, [pc, #256]	; (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356a:	ee07 3a90 	vmov	s15, r3
 800356e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003572:	ed97 6a02 	vldr	s12, [r7, #8]
 8003576:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003674 <HAL_RCC_GetSysClockFreq+0x2e4>
 800357a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800357e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800358a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800358e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003592:	e043      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	ee07 3a90 	vmov	s15, r3
 800359a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800359e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003680 <HAL_RCC_GetSysClockFreq+0x2f0>
 80035a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035a6:	4b2f      	ldr	r3, [pc, #188]	; (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ae:	ee07 3a90 	vmov	s15, r3
 80035b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80035ba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003674 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035d6:	e021      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	ee07 3a90 	vmov	s15, r3
 80035de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800367c <HAL_RCC_GetSysClockFreq+0x2ec>
 80035e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ea:	4b1e      	ldr	r3, [pc, #120]	; (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f2:	ee07 3a90 	vmov	s15, r3
 80035f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80035fe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003674 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800360a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800360e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003616:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800361a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800361c:	4b11      	ldr	r3, [pc, #68]	; (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003620:	0a5b      	lsrs	r3, r3, #9
 8003622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003626:	3301      	adds	r3, #1
 8003628:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	ee07 3a90 	vmov	s15, r3
 8003630:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003634:	edd7 6a07 	vldr	s13, [r7, #28]
 8003638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800363c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003640:	ee17 3a90 	vmov	r3, s15
 8003644:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003646:	e005      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	61bb      	str	r3, [r7, #24]
      break;
 800364c:	e002      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800364e:	4b07      	ldr	r3, [pc, #28]	; (800366c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003650:	61bb      	str	r3, [r7, #24]
      break;
 8003652:	bf00      	nop
  }

  return sysclockfreq;
 8003654:	69bb      	ldr	r3, [r7, #24]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3724      	adds	r7, #36	; 0x24
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	58024400 	.word	0x58024400
 8003668:	03d09000 	.word	0x03d09000
 800366c:	003d0900 	.word	0x003d0900
 8003670:	017d7840 	.word	0x017d7840
 8003674:	46000000 	.word	0x46000000
 8003678:	4c742400 	.word	0x4c742400
 800367c:	4a742400 	.word	0x4a742400
 8003680:	4bbebc20 	.word	0x4bbebc20

08003684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800368a:	f7ff fe81 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 800368e:	4602      	mov	r2, r0
 8003690:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	0a1b      	lsrs	r3, r3, #8
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	490f      	ldr	r1, [pc, #60]	; (80036d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800369c:	5ccb      	ldrb	r3, [r1, r3]
 800369e:	f003 031f 	and.w	r3, r3, #31
 80036a2:	fa22 f303 	lsr.w	r3, r2, r3
 80036a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036a8:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	f003 030f 	and.w	r3, r3, #15
 80036b0:	4a09      	ldr	r2, [pc, #36]	; (80036d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80036b2:	5cd3      	ldrb	r3, [r2, r3]
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	fa22 f303 	lsr.w	r3, r2, r3
 80036be:	4a07      	ldr	r2, [pc, #28]	; (80036dc <HAL_RCC_GetHCLKFreq+0x58>)
 80036c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036c2:	4a07      	ldr	r2, [pc, #28]	; (80036e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80036c8:	4b04      	ldr	r3, [pc, #16]	; (80036dc <HAL_RCC_GetHCLKFreq+0x58>)
 80036ca:	681b      	ldr	r3, [r3, #0]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	58024400 	.word	0x58024400
 80036d8:	0800931c 	.word	0x0800931c
 80036dc:	24000004 	.word	0x24000004
 80036e0:	24000000 	.word	0x24000000

080036e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80036e8:	f7ff ffcc 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036ec:	4602      	mov	r2, r0
 80036ee:	4b06      	ldr	r3, [pc, #24]	; (8003708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	091b      	lsrs	r3, r3, #4
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	4904      	ldr	r1, [pc, #16]	; (800370c <HAL_RCC_GetPCLK1Freq+0x28>)
 80036fa:	5ccb      	ldrb	r3, [r1, r3]
 80036fc:	f003 031f 	and.w	r3, r3, #31
 8003700:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003704:	4618      	mov	r0, r3
 8003706:	bd80      	pop	{r7, pc}
 8003708:	58024400 	.word	0x58024400
 800370c:	0800931c 	.word	0x0800931c

08003710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003714:	f7ff ffb6 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 8003718:	4602      	mov	r2, r0
 800371a:	4b06      	ldr	r3, [pc, #24]	; (8003734 <HAL_RCC_GetPCLK2Freq+0x24>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	0a1b      	lsrs	r3, r3, #8
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	4904      	ldr	r1, [pc, #16]	; (8003738 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003726:	5ccb      	ldrb	r3, [r1, r3]
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003730:	4618      	mov	r0, r3
 8003732:	bd80      	pop	{r7, pc}
 8003734:	58024400 	.word	0x58024400
 8003738:	0800931c 	.word	0x0800931c

0800373c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800373c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003740:	b0ca      	sub	sp, #296	; 0x128
 8003742:	af00      	add	r7, sp, #0
 8003744:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003748:	2300      	movs	r3, #0
 800374a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800374e:	2300      	movs	r3, #0
 8003750:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003760:	2500      	movs	r5, #0
 8003762:	ea54 0305 	orrs.w	r3, r4, r5
 8003766:	d049      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800376c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800376e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003772:	d02f      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003774:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003778:	d828      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800377a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800377e:	d01a      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003780:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003784:	d822      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800378a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800378e:	d007      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003790:	e01c      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003792:	4bb8      	ldr	r3, [pc, #736]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	4ab7      	ldr	r2, [pc, #732]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800379c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800379e:	e01a      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037a4:	3308      	adds	r3, #8
 80037a6:	2102      	movs	r1, #2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f001 fc8f 	bl	80050cc <RCCEx_PLL2_Config>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037b4:	e00f      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ba:	3328      	adds	r3, #40	; 0x28
 80037bc:	2102      	movs	r1, #2
 80037be:	4618      	mov	r0, r3
 80037c0:	f001 fd36 	bl	8005230 <RCCEx_PLL3_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037ca:	e004      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037d2:	e000      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80037d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10a      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80037de:	4ba5      	ldr	r3, [pc, #660]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80037e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ec:	4aa1      	ldr	r2, [pc, #644]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037ee:	430b      	orrs	r3, r1
 80037f0:	6513      	str	r3, [r2, #80]	; 0x50
 80037f2:	e003      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003808:	f04f 0900 	mov.w	r9, #0
 800380c:	ea58 0309 	orrs.w	r3, r8, r9
 8003810:	d047      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003818:	2b04      	cmp	r3, #4
 800381a:	d82a      	bhi.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800381c:	a201      	add	r2, pc, #4	; (adr r2, 8003824 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800381e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003822:	bf00      	nop
 8003824:	08003839 	.word	0x08003839
 8003828:	08003847 	.word	0x08003847
 800382c:	0800385d 	.word	0x0800385d
 8003830:	0800387b 	.word	0x0800387b
 8003834:	0800387b 	.word	0x0800387b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003838:	4b8e      	ldr	r3, [pc, #568]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	4a8d      	ldr	r2, [pc, #564]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800383e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003842:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003844:	e01a      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800384a:	3308      	adds	r3, #8
 800384c:	2100      	movs	r1, #0
 800384e:	4618      	mov	r0, r3
 8003850:	f001 fc3c 	bl	80050cc <RCCEx_PLL2_Config>
 8003854:	4603      	mov	r3, r0
 8003856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800385a:	e00f      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800385c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003860:	3328      	adds	r3, #40	; 0x28
 8003862:	2100      	movs	r1, #0
 8003864:	4618      	mov	r0, r3
 8003866:	f001 fce3 	bl	8005230 <RCCEx_PLL3_Config>
 800386a:	4603      	mov	r3, r0
 800386c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003870:	e004      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003878:	e000      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800387a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800387c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10a      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003884:	4b7b      	ldr	r3, [pc, #492]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003888:	f023 0107 	bic.w	r1, r3, #7
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003892:	4a78      	ldr	r2, [pc, #480]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003894:	430b      	orrs	r3, r1
 8003896:	6513      	str	r3, [r2, #80]	; 0x50
 8003898:	e003      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800389e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80038a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038aa:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80038ae:	f04f 0b00 	mov.w	fp, #0
 80038b2:	ea5a 030b 	orrs.w	r3, sl, fp
 80038b6:	d04c      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80038b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c2:	d030      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80038c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c8:	d829      	bhi.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038ca:	2bc0      	cmp	r3, #192	; 0xc0
 80038cc:	d02d      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80038ce:	2bc0      	cmp	r3, #192	; 0xc0
 80038d0:	d825      	bhi.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038d2:	2b80      	cmp	r3, #128	; 0x80
 80038d4:	d018      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80038d6:	2b80      	cmp	r3, #128	; 0x80
 80038d8:	d821      	bhi.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80038de:	2b40      	cmp	r3, #64	; 0x40
 80038e0:	d007      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80038e2:	e01c      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e4:	4b63      	ldr	r3, [pc, #396]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	4a62      	ldr	r2, [pc, #392]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80038f0:	e01c      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f6:	3308      	adds	r3, #8
 80038f8:	2100      	movs	r1, #0
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 fbe6 	bl	80050cc <RCCEx_PLL2_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003906:	e011      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800390c:	3328      	adds	r3, #40	; 0x28
 800390e:	2100      	movs	r1, #0
 8003910:	4618      	mov	r0, r3
 8003912:	f001 fc8d 	bl	8005230 <RCCEx_PLL3_Config>
 8003916:	4603      	mov	r3, r0
 8003918:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800391c:	e006      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003924:	e002      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003926:	bf00      	nop
 8003928:	e000      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800392a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800392c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10a      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003934:	4b4f      	ldr	r3, [pc, #316]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003938:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800393c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003942:	4a4c      	ldr	r2, [pc, #304]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003944:	430b      	orrs	r3, r1
 8003946:	6513      	str	r3, [r2, #80]	; 0x50
 8003948:	e003      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800394e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800395e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003962:	2300      	movs	r3, #0
 8003964:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003968:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800396c:	460b      	mov	r3, r1
 800396e:	4313      	orrs	r3, r2
 8003970:	d053      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003976:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800397a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800397e:	d035      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003980:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003984:	d82e      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003986:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800398a:	d031      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800398c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003990:	d828      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003996:	d01a      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003998:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800399c:	d822      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80039a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039a6:	d007      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80039a8:	e01c      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039aa:	4b32      	ldr	r3, [pc, #200]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	4a31      	ldr	r2, [pc, #196]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039b6:	e01c      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039bc:	3308      	adds	r3, #8
 80039be:	2100      	movs	r1, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f001 fb83 	bl	80050cc <RCCEx_PLL2_Config>
 80039c6:	4603      	mov	r3, r0
 80039c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80039cc:	e011      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039d2:	3328      	adds	r3, #40	; 0x28
 80039d4:	2100      	movs	r1, #0
 80039d6:	4618      	mov	r0, r3
 80039d8:	f001 fc2a 	bl	8005230 <RCCEx_PLL3_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039e2:	e006      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039ea:	e002      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80039ec:	bf00      	nop
 80039ee:	e000      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80039f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10b      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80039fa:	4b1e      	ldr	r3, [pc, #120]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fe:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a0a:	4a1a      	ldr	r2, [pc, #104]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a10:	e003      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a22:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003a26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a30:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003a34:	460b      	mov	r3, r1
 8003a36:	4313      	orrs	r3, r2
 8003a38:	d056      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a46:	d038      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003a48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a4c:	d831      	bhi.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a52:	d034      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003a54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a58:	d82b      	bhi.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a5e:	d01d      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003a60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a64:	d825      	bhi.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d006      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003a6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a6e:	d00a      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003a70:	e01f      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a72:	bf00      	nop
 8003a74:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a78:	4ba2      	ldr	r3, [pc, #648]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	4aa1      	ldr	r2, [pc, #644]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a84:	e01c      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 fb1c 	bl	80050cc <RCCEx_PLL2_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a9a:	e011      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aa0:	3328      	adds	r3, #40	; 0x28
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f001 fbc3 	bl	8005230 <RCCEx_PLL3_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ab0:	e006      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ab8:	e002      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003aba:	bf00      	nop
 8003abc:	e000      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003abe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10b      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003ac8:	4b8e      	ldr	r3, [pc, #568]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003acc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ad8:	4a8a      	ldr	r2, [pc, #552]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ada:	430b      	orrs	r3, r1
 8003adc:	6593      	str	r3, [r2, #88]	; 0x58
 8003ade:	e003      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ae4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003af4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003af8:	2300      	movs	r3, #0
 8003afa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003afe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003b02:	460b      	mov	r3, r1
 8003b04:	4313      	orrs	r3, r2
 8003b06:	d03a      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0e:	2b30      	cmp	r3, #48	; 0x30
 8003b10:	d01f      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003b12:	2b30      	cmp	r3, #48	; 0x30
 8003b14:	d819      	bhi.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b16:	2b20      	cmp	r3, #32
 8003b18:	d00c      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d815      	bhi.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d019      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003b22:	2b10      	cmp	r3, #16
 8003b24:	d111      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b26:	4b77      	ldr	r3, [pc, #476]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	4a76      	ldr	r2, [pc, #472]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b32:	e011      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b38:	3308      	adds	r3, #8
 8003b3a:	2102      	movs	r1, #2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f001 fac5 	bl	80050cc <RCCEx_PLL2_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b48:	e006      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b50:	e002      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003b52:	bf00      	nop
 8003b54:	e000      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10a      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b60:	4b68      	ldr	r3, [pc, #416]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b64:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6e:	4a65      	ldr	r2, [pc, #404]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b70:	430b      	orrs	r3, r1
 8003b72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b74:	e003      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b86:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003b8a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003b94:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	d051      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ba8:	d035      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003baa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bae:	d82e      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003bb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bb4:	d031      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003bb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bba:	d828      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003bbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc0:	d01a      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc6:	d822      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd0:	d007      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003bd2:	e01c      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bd4:	4b4b      	ldr	r3, [pc, #300]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	4a4a      	ldr	r2, [pc, #296]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003be0:	e01c      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003be6:	3308      	adds	r3, #8
 8003be8:	2100      	movs	r1, #0
 8003bea:	4618      	mov	r0, r3
 8003bec:	f001 fa6e 	bl	80050cc <RCCEx_PLL2_Config>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003bf6:	e011      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bfc:	3328      	adds	r3, #40	; 0x28
 8003bfe:	2100      	movs	r1, #0
 8003c00:	4618      	mov	r0, r3
 8003c02:	f001 fb15 	bl	8005230 <RCCEx_PLL3_Config>
 8003c06:	4603      	mov	r3, r0
 8003c08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c0c:	e006      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c14:	e002      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c16:	bf00      	nop
 8003c18:	e000      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c24:	4b37      	ldr	r3, [pc, #220]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c28:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c32:	4a34      	ldr	r2, [pc, #208]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c34:	430b      	orrs	r3, r1
 8003c36:	6513      	str	r3, [r2, #80]	; 0x50
 8003c38:	e003      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003c4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c52:	2300      	movs	r3, #0
 8003c54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003c58:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	d056      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c6c:	d033      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003c6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c72:	d82c      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c78:	d02f      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003c7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c7e:	d826      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c84:	d02b      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003c86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c8a:	d820      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c90:	d012      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003c92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c96:	d81a      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d022      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca0:	d115      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	2101      	movs	r1, #1
 8003caa:	4618      	mov	r0, r3
 8003cac:	f001 fa0e 	bl	80050cc <RCCEx_PLL2_Config>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003cb6:	e015      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cbc:	3328      	adds	r3, #40	; 0x28
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f001 fab5 	bl	8005230 <RCCEx_PLL3_Config>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ccc:	e00a      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cd4:	e006      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cd6:	bf00      	nop
 8003cd8:	e004      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cda:	bf00      	nop
 8003cdc:	e002      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cde:	bf00      	nop
 8003ce0:	e000      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10d      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cfa:	4a02      	ldr	r2, [pc, #8]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	6513      	str	r3, [r2, #80]	; 0x50
 8003d00:	e006      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003d02:	bf00      	nop
 8003d04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d18:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d20:	2300      	movs	r3, #0
 8003d22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d26:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	d055      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d3c:	d033      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003d3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d42:	d82c      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d48:	d02f      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4e:	d826      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d54:	d02b      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003d56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d5a:	d820      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d60:	d012      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003d62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d66:	d81a      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d022      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003d6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d70:	d115      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d76:	3308      	adds	r3, #8
 8003d78:	2101      	movs	r1, #1
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f001 f9a6 	bl	80050cc <RCCEx_PLL2_Config>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d86:	e015      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d8c:	3328      	adds	r3, #40	; 0x28
 8003d8e:	2101      	movs	r1, #1
 8003d90:	4618      	mov	r0, r3
 8003d92:	f001 fa4d 	bl	8005230 <RCCEx_PLL3_Config>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d9c:	e00a      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003da4:	e006      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003da6:	bf00      	nop
 8003da8:	e004      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003daa:	bf00      	nop
 8003dac:	e002      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003dae:	bf00      	nop
 8003db0:	e000      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10b      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003dbc:	4ba3      	ldr	r3, [pc, #652]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dcc:	4a9f      	ldr	r2, [pc, #636]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	6593      	str	r3, [r2, #88]	; 0x58
 8003dd2:	e003      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003de8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003dec:	2300      	movs	r3, #0
 8003dee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003df2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003df6:	460b      	mov	r3, r1
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	d037      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e06:	d00e      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e0c:	d816      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d018      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003e12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e16:	d111      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e18:	4b8c      	ldr	r3, [pc, #560]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	4a8b      	ldr	r2, [pc, #556]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e24:	e00f      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 f94c 	bl	80050cc <RCCEx_PLL2_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e3a:	e004      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e42:	e000      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003e44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10a      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e4e:	4b7f      	ldr	r3, [pc, #508]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e52:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5c:	4a7b      	ldr	r2, [pc, #492]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e5e:	430b      	orrs	r3, r1
 8003e60:	6513      	str	r3, [r2, #80]	; 0x50
 8003e62:	e003      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003e78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003e82:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	d039      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d81c      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003e96:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9c:	08003ed9 	.word	0x08003ed9
 8003ea0:	08003ead 	.word	0x08003ead
 8003ea4:	08003ebb 	.word	0x08003ebb
 8003ea8:	08003ed9 	.word	0x08003ed9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eac:	4b67      	ldr	r3, [pc, #412]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	4a66      	ldr	r2, [pc, #408]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003eb8:	e00f      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f001 f902 	bl	80050cc <RCCEx_PLL2_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ece:	e004      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ed6:	e000      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10a      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ee2:	4b5a      	ldr	r3, [pc, #360]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee6:	f023 0103 	bic.w	r1, r3, #3
 8003eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef0:	4a56      	ldr	r2, [pc, #344]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ef2:	430b      	orrs	r3, r1
 8003ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ef6:	e003      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003efc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f08:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f10:	2300      	movs	r3, #0
 8003f12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f000 809f 	beq.w	8004060 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f22:	4b4b      	ldr	r3, [pc, #300]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a4a      	ldr	r2, [pc, #296]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f2e:	f7fd fb13 	bl	8001558 <HAL_GetTick>
 8003f32:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f36:	e00b      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f38:	f7fd fb0e 	bl	8001558 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b64      	cmp	r3, #100	; 0x64
 8003f46:	d903      	bls.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f4e:	e005      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f50:	4b3f      	ldr	r3, [pc, #252]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0ed      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d179      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f64:	4b39      	ldr	r3, [pc, #228]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f70:	4053      	eors	r3, r2
 8003f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d015      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f7a:	4b34      	ldr	r3, [pc, #208]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f82:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f86:	4b31      	ldr	r3, [pc, #196]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	4a30      	ldr	r2, [pc, #192]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f90:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f92:	4b2e      	ldr	r3, [pc, #184]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	4a2d      	ldr	r2, [pc, #180]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f9c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003f9e:	4a2b      	ldr	r2, [pc, #172]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fa4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003faa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb2:	d118      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb4:	f7fd fad0 	bl	8001558 <HAL_GetTick>
 8003fb8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fbc:	e00d      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fbe:	f7fd facb 	bl	8001558 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003fc8:	1ad2      	subs	r2, r2, r3
 8003fca:	f241 3388 	movw	r3, #5000	; 0x1388
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d903      	bls.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003fd8:	e005      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fda:	4b1c      	ldr	r3, [pc, #112]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0eb      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d129      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ff2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ffa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ffe:	d10e      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004000:	4b12      	ldr	r3, [pc, #72]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004010:	091a      	lsrs	r2, r3, #4
 8004012:	4b10      	ldr	r3, [pc, #64]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004014:	4013      	ands	r3, r2
 8004016:	4a0d      	ldr	r2, [pc, #52]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004018:	430b      	orrs	r3, r1
 800401a:	6113      	str	r3, [r2, #16]
 800401c:	e005      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800401e:	4b0b      	ldr	r3, [pc, #44]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	4a0a      	ldr	r2, [pc, #40]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004024:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004028:	6113      	str	r3, [r2, #16]
 800402a:	4b08      	ldr	r3, [pc, #32]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800402c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800402e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004032:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403a:	4a04      	ldr	r2, [pc, #16]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800403c:	430b      	orrs	r3, r1
 800403e:	6713      	str	r3, [r2, #112]	; 0x70
 8004040:	e00e      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004042:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004046:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800404a:	e009      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800404c:	58024400 	.word	0x58024400
 8004050:	58024800 	.word	0x58024800
 8004054:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004058:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800405c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004068:	f002 0301 	and.w	r3, r2, #1
 800406c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004070:	2300      	movs	r3, #0
 8004072:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004076:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800407a:	460b      	mov	r3, r1
 800407c:	4313      	orrs	r3, r2
 800407e:	f000 8089 	beq.w	8004194 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004088:	2b28      	cmp	r3, #40	; 0x28
 800408a:	d86b      	bhi.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800408c:	a201      	add	r2, pc, #4	; (adr r2, 8004094 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800408e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004092:	bf00      	nop
 8004094:	0800416d 	.word	0x0800416d
 8004098:	08004165 	.word	0x08004165
 800409c:	08004165 	.word	0x08004165
 80040a0:	08004165 	.word	0x08004165
 80040a4:	08004165 	.word	0x08004165
 80040a8:	08004165 	.word	0x08004165
 80040ac:	08004165 	.word	0x08004165
 80040b0:	08004165 	.word	0x08004165
 80040b4:	08004139 	.word	0x08004139
 80040b8:	08004165 	.word	0x08004165
 80040bc:	08004165 	.word	0x08004165
 80040c0:	08004165 	.word	0x08004165
 80040c4:	08004165 	.word	0x08004165
 80040c8:	08004165 	.word	0x08004165
 80040cc:	08004165 	.word	0x08004165
 80040d0:	08004165 	.word	0x08004165
 80040d4:	0800414f 	.word	0x0800414f
 80040d8:	08004165 	.word	0x08004165
 80040dc:	08004165 	.word	0x08004165
 80040e0:	08004165 	.word	0x08004165
 80040e4:	08004165 	.word	0x08004165
 80040e8:	08004165 	.word	0x08004165
 80040ec:	08004165 	.word	0x08004165
 80040f0:	08004165 	.word	0x08004165
 80040f4:	0800416d 	.word	0x0800416d
 80040f8:	08004165 	.word	0x08004165
 80040fc:	08004165 	.word	0x08004165
 8004100:	08004165 	.word	0x08004165
 8004104:	08004165 	.word	0x08004165
 8004108:	08004165 	.word	0x08004165
 800410c:	08004165 	.word	0x08004165
 8004110:	08004165 	.word	0x08004165
 8004114:	0800416d 	.word	0x0800416d
 8004118:	08004165 	.word	0x08004165
 800411c:	08004165 	.word	0x08004165
 8004120:	08004165 	.word	0x08004165
 8004124:	08004165 	.word	0x08004165
 8004128:	08004165 	.word	0x08004165
 800412c:	08004165 	.word	0x08004165
 8004130:	08004165 	.word	0x08004165
 8004134:	0800416d 	.word	0x0800416d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800413c:	3308      	adds	r3, #8
 800413e:	2101      	movs	r1, #1
 8004140:	4618      	mov	r0, r3
 8004142:	f000 ffc3 	bl	80050cc <RCCEx_PLL2_Config>
 8004146:	4603      	mov	r3, r0
 8004148:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800414c:	e00f      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800414e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004152:	3328      	adds	r3, #40	; 0x28
 8004154:	2101      	movs	r1, #1
 8004156:	4618      	mov	r0, r3
 8004158:	f001 f86a 	bl	8005230 <RCCEx_PLL3_Config>
 800415c:	4603      	mov	r3, r0
 800415e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004162:	e004      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800416a:	e000      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800416c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800416e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004176:	4bbf      	ldr	r3, [pc, #764]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800417e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004184:	4abb      	ldr	r2, [pc, #748]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004186:	430b      	orrs	r3, r1
 8004188:	6553      	str	r3, [r2, #84]	; 0x54
 800418a:	e003      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004190:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419c:	f002 0302 	and.w	r3, r2, #2
 80041a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041a4:	2300      	movs	r3, #0
 80041a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80041aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80041ae:	460b      	mov	r3, r1
 80041b0:	4313      	orrs	r3, r2
 80041b2:	d041      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80041b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ba:	2b05      	cmp	r3, #5
 80041bc:	d824      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80041be:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80041c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c4:	08004211 	.word	0x08004211
 80041c8:	080041dd 	.word	0x080041dd
 80041cc:	080041f3 	.word	0x080041f3
 80041d0:	08004211 	.word	0x08004211
 80041d4:	08004211 	.word	0x08004211
 80041d8:	08004211 	.word	0x08004211
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e0:	3308      	adds	r3, #8
 80041e2:	2101      	movs	r1, #1
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 ff71 	bl	80050cc <RCCEx_PLL2_Config>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80041f0:	e00f      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f6:	3328      	adds	r3, #40	; 0x28
 80041f8:	2101      	movs	r1, #1
 80041fa:	4618      	mov	r0, r3
 80041fc:	f001 f818 	bl	8005230 <RCCEx_PLL3_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004206:	e004      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800420e:	e000      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004212:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10a      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800421a:	4b96      	ldr	r3, [pc, #600]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800421c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421e:	f023 0107 	bic.w	r1, r3, #7
 8004222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004226:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004228:	4a92      	ldr	r2, [pc, #584]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800422a:	430b      	orrs	r3, r1
 800422c:	6553      	str	r3, [r2, #84]	; 0x54
 800422e:	e003      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004230:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004234:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800423c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004240:	f002 0304 	and.w	r3, r2, #4
 8004244:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004248:	2300      	movs	r3, #0
 800424a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800424e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004252:	460b      	mov	r3, r1
 8004254:	4313      	orrs	r3, r2
 8004256:	d044      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800425c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004260:	2b05      	cmp	r3, #5
 8004262:	d825      	bhi.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004264:	a201      	add	r2, pc, #4	; (adr r2, 800426c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426a:	bf00      	nop
 800426c:	080042b9 	.word	0x080042b9
 8004270:	08004285 	.word	0x08004285
 8004274:	0800429b 	.word	0x0800429b
 8004278:	080042b9 	.word	0x080042b9
 800427c:	080042b9 	.word	0x080042b9
 8004280:	080042b9 	.word	0x080042b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004288:	3308      	adds	r3, #8
 800428a:	2101      	movs	r1, #1
 800428c:	4618      	mov	r0, r3
 800428e:	f000 ff1d 	bl	80050cc <RCCEx_PLL2_Config>
 8004292:	4603      	mov	r3, r0
 8004294:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004298:	e00f      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800429a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800429e:	3328      	adds	r3, #40	; 0x28
 80042a0:	2101      	movs	r1, #1
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 ffc4 	bl	8005230 <RCCEx_PLL3_Config>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80042ae:	e004      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042b6:	e000      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80042b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10b      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042c2:	4b6c      	ldr	r3, [pc, #432]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c6:	f023 0107 	bic.w	r1, r3, #7
 80042ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d2:	4a68      	ldr	r2, [pc, #416]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042d4:	430b      	orrs	r3, r1
 80042d6:	6593      	str	r3, [r2, #88]	; 0x58
 80042d8:	e003      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ea:	f002 0320 	and.w	r3, r2, #32
 80042ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042f2:	2300      	movs	r3, #0
 80042f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80042fc:	460b      	mov	r3, r1
 80042fe:	4313      	orrs	r3, r2
 8004300:	d055      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800430e:	d033      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004310:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004314:	d82c      	bhi.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431a:	d02f      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800431c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004320:	d826      	bhi.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004322:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004326:	d02b      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004328:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800432c:	d820      	bhi.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800432e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004332:	d012      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004338:	d81a      	bhi.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800433a:	2b00      	cmp	r3, #0
 800433c:	d022      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800433e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004342:	d115      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004348:	3308      	adds	r3, #8
 800434a:	2100      	movs	r1, #0
 800434c:	4618      	mov	r0, r3
 800434e:	f000 febd 	bl	80050cc <RCCEx_PLL2_Config>
 8004352:	4603      	mov	r3, r0
 8004354:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004358:	e015      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800435a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800435e:	3328      	adds	r3, #40	; 0x28
 8004360:	2102      	movs	r1, #2
 8004362:	4618      	mov	r0, r3
 8004364:	f000 ff64 	bl	8005230 <RCCEx_PLL3_Config>
 8004368:	4603      	mov	r3, r0
 800436a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800436e:	e00a      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004376:	e006      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004378:	bf00      	nop
 800437a:	e004      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800437c:	bf00      	nop
 800437e:	e002      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004380:	bf00      	nop
 8004382:	e000      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004386:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10b      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800438e:	4b39      	ldr	r3, [pc, #228]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004392:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439e:	4a35      	ldr	r2, [pc, #212]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043a0:	430b      	orrs	r3, r1
 80043a2:	6553      	str	r3, [r2, #84]	; 0x54
 80043a4:	e003      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80043ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80043ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043be:	2300      	movs	r3, #0
 80043c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80043c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4313      	orrs	r3, r2
 80043cc:	d058      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80043ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80043da:	d033      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80043dc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80043e0:	d82c      	bhi.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e6:	d02f      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80043e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ec:	d826      	bhi.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043f2:	d02b      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80043f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043f8:	d820      	bhi.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043fe:	d012      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004400:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004404:	d81a      	bhi.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004406:	2b00      	cmp	r3, #0
 8004408:	d022      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800440a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800440e:	d115      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004414:	3308      	adds	r3, #8
 8004416:	2100      	movs	r1, #0
 8004418:	4618      	mov	r0, r3
 800441a:	f000 fe57 	bl	80050cc <RCCEx_PLL2_Config>
 800441e:	4603      	mov	r3, r0
 8004420:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004424:	e015      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800442a:	3328      	adds	r3, #40	; 0x28
 800442c:	2102      	movs	r1, #2
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fefe 	bl	8005230 <RCCEx_PLL3_Config>
 8004434:	4603      	mov	r3, r0
 8004436:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800443a:	e00a      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004442:	e006      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004444:	bf00      	nop
 8004446:	e004      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004448:	bf00      	nop
 800444a:	e002      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800444c:	bf00      	nop
 800444e:	e000      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004452:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10e      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800445a:	4b06      	ldr	r3, [pc, #24]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800445c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004466:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800446a:	4a02      	ldr	r2, [pc, #8]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800446c:	430b      	orrs	r3, r1
 800446e:	6593      	str	r3, [r2, #88]	; 0x58
 8004470:	e006      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004472:	bf00      	nop
 8004474:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800447c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800448c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004490:	2300      	movs	r3, #0
 8004492:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004496:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800449a:	460b      	mov	r3, r1
 800449c:	4313      	orrs	r3, r2
 800449e:	d055      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80044ac:	d033      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80044ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80044b2:	d82c      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b8:	d02f      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80044ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044be:	d826      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80044c4:	d02b      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80044c6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80044ca:	d820      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044d0:	d012      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80044d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044d6:	d81a      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d022      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80044dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e0:	d115      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e6:	3308      	adds	r3, #8
 80044e8:	2100      	movs	r1, #0
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fdee 	bl	80050cc <RCCEx_PLL2_Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80044f6:	e015      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044fc:	3328      	adds	r3, #40	; 0x28
 80044fe:	2102      	movs	r1, #2
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fe95 	bl	8005230 <RCCEx_PLL3_Config>
 8004506:	4603      	mov	r3, r0
 8004508:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800450c:	e00a      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004514:	e006      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004516:	bf00      	nop
 8004518:	e004      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800451a:	bf00      	nop
 800451c:	e002      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800451e:	bf00      	nop
 8004520:	e000      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004524:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10b      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800452c:	4ba1      	ldr	r3, [pc, #644]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800452e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004530:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004538:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800453c:	4a9d      	ldr	r2, [pc, #628]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800453e:	430b      	orrs	r3, r1
 8004540:	6593      	str	r3, [r2, #88]	; 0x58
 8004542:	e003      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004544:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004548:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800454c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	f002 0308 	and.w	r3, r2, #8
 8004558:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800455c:	2300      	movs	r3, #0
 800455e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004562:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004566:	460b      	mov	r3, r1
 8004568:	4313      	orrs	r3, r2
 800456a:	d01e      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800456c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004578:	d10c      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800457a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800457e:	3328      	adds	r3, #40	; 0x28
 8004580:	2102      	movs	r1, #2
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fe54 	bl	8005230 <RCCEx_PLL3_Config>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004594:	4b87      	ldr	r3, [pc, #540]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004598:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800459c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a4:	4a83      	ldr	r2, [pc, #524]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045a6:	430b      	orrs	r3, r1
 80045a8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	f002 0310 	and.w	r3, r2, #16
 80045b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045ba:	2300      	movs	r3, #0
 80045bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80045c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80045c4:	460b      	mov	r3, r1
 80045c6:	4313      	orrs	r3, r2
 80045c8:	d01e      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80045ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d6:	d10c      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045dc:	3328      	adds	r3, #40	; 0x28
 80045de:	2102      	movs	r1, #2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fe25 	bl	8005230 <RCCEx_PLL3_Config>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045f2:	4b70      	ldr	r3, [pc, #448]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004602:	4a6c      	ldr	r2, [pc, #432]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004604:	430b      	orrs	r3, r1
 8004606:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800460c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004610:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004614:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004618:	2300      	movs	r3, #0
 800461a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800461e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004622:	460b      	mov	r3, r1
 8004624:	4313      	orrs	r3, r2
 8004626:	d03e      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800462c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004630:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004634:	d022      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800463a:	d81b      	bhi.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004644:	d00b      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004646:	e015      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800464c:	3308      	adds	r3, #8
 800464e:	2100      	movs	r1, #0
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fd3b 	bl	80050cc <RCCEx_PLL2_Config>
 8004656:	4603      	mov	r3, r0
 8004658:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800465c:	e00f      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004662:	3328      	adds	r3, #40	; 0x28
 8004664:	2102      	movs	r1, #2
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fde2 	bl	8005230 <RCCEx_PLL3_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004672:	e004      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800467a:	e000      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800467c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800467e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10b      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004686:	4b4b      	ldr	r3, [pc, #300]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004692:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004696:	4a47      	ldr	r2, [pc, #284]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004698:	430b      	orrs	r3, r1
 800469a:	6593      	str	r3, [r2, #88]	; 0x58
 800469c:	e003      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ae:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80046b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80046b4:	2300      	movs	r3, #0
 80046b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80046b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80046bc:	460b      	mov	r3, r1
 80046be:	4313      	orrs	r3, r2
 80046c0:	d03b      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80046c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046ce:	d01f      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80046d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046d4:	d818      	bhi.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80046d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046da:	d003      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80046dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046e0:	d007      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80046e2:	e011      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046e4:	4b33      	ldr	r3, [pc, #204]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	4a32      	ldr	r2, [pc, #200]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80046f0:	e00f      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f6:	3328      	adds	r3, #40	; 0x28
 80046f8:	2101      	movs	r1, #1
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fd98 	bl	8005230 <RCCEx_PLL3_Config>
 8004700:	4603      	mov	r3, r0
 8004702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004706:	e004      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800470e:	e000      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004710:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004712:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10b      	bne.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800471a:	4b26      	ldr	r3, [pc, #152]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800471c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472a:	4a22      	ldr	r2, [pc, #136]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800472c:	430b      	orrs	r3, r1
 800472e:	6553      	str	r3, [r2, #84]	; 0x54
 8004730:	e003      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004732:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004736:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800473a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800473e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004742:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004746:	673b      	str	r3, [r7, #112]	; 0x70
 8004748:	2300      	movs	r3, #0
 800474a:	677b      	str	r3, [r7, #116]	; 0x74
 800474c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004750:	460b      	mov	r3, r1
 8004752:	4313      	orrs	r3, r2
 8004754:	d034      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800475a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004764:	d007      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004766:	e011      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004768:	4b12      	ldr	r3, [pc, #72]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476c:	4a11      	ldr	r2, [pc, #68]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800476e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004772:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004774:	e00e      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800477a:	3308      	adds	r3, #8
 800477c:	2102      	movs	r1, #2
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fca4 	bl	80050cc <RCCEx_PLL2_Config>
 8004784:	4603      	mov	r3, r0
 8004786:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800478a:	e003      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004792:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004794:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10d      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800479c:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800479e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047aa:	4a02      	ldr	r2, [pc, #8]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ac:	430b      	orrs	r3, r1
 80047ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047b0:	e006      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80047b2:	bf00      	nop
 80047b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80047cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80047ce:	2300      	movs	r3, #0
 80047d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80047d6:	460b      	mov	r3, r1
 80047d8:	4313      	orrs	r3, r2
 80047da:	d00c      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e0:	3328      	adds	r3, #40	; 0x28
 80047e2:	2102      	movs	r1, #2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fd23 	bl	8005230 <RCCEx_PLL3_Config>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80047f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fe:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004802:	663b      	str	r3, [r7, #96]	; 0x60
 8004804:	2300      	movs	r3, #0
 8004806:	667b      	str	r3, [r7, #100]	; 0x64
 8004808:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800480c:	460b      	mov	r3, r1
 800480e:	4313      	orrs	r3, r2
 8004810:	d038      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800481a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800481e:	d018      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004820:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004824:	d811      	bhi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800482a:	d014      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800482c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004830:	d80b      	bhi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004832:	2b00      	cmp	r3, #0
 8004834:	d011      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800483a:	d106      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800483c:	4bc3      	ldr	r3, [pc, #780]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	4ac2      	ldr	r2, [pc, #776]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004846:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004848:	e008      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004850:	e004      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004852:	bf00      	nop
 8004854:	e002      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004856:	bf00      	nop
 8004858:	e000      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800485a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800485c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10b      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004864:	4bb9      	ldr	r3, [pc, #740]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004868:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800486c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004874:	4ab5      	ldr	r2, [pc, #724]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004876:	430b      	orrs	r3, r1
 8004878:	6553      	str	r3, [r2, #84]	; 0x54
 800487a:	e003      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004880:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004890:	65bb      	str	r3, [r7, #88]	; 0x58
 8004892:	2300      	movs	r3, #0
 8004894:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004896:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800489a:	460b      	mov	r3, r1
 800489c:	4313      	orrs	r3, r2
 800489e:	d009      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048a0:	4baa      	ldr	r3, [pc, #680]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80048a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ae:	4aa7      	ldr	r2, [pc, #668]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048b0:	430b      	orrs	r3, r1
 80048b2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80048b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048bc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80048c0:	653b      	str	r3, [r7, #80]	; 0x50
 80048c2:	2300      	movs	r3, #0
 80048c4:	657b      	str	r3, [r7, #84]	; 0x54
 80048c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80048ca:	460b      	mov	r3, r1
 80048cc:	4313      	orrs	r3, r2
 80048ce:	d00a      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80048d0:	4b9e      	ldr	r3, [pc, #632]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80048d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80048e0:	4a9a      	ldr	r2, [pc, #616]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048e2:	430b      	orrs	r3, r1
 80048e4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80048f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80048f4:	2300      	movs	r3, #0
 80048f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048f8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80048fc:	460b      	mov	r3, r1
 80048fe:	4313      	orrs	r3, r2
 8004900:	d009      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004902:	4b92      	ldr	r3, [pc, #584]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004906:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800490a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800490e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004910:	4a8e      	ldr	r2, [pc, #568]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004912:	430b      	orrs	r3, r1
 8004914:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800491a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004922:	643b      	str	r3, [r7, #64]	; 0x40
 8004924:	2300      	movs	r3, #0
 8004926:	647b      	str	r3, [r7, #68]	; 0x44
 8004928:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800492c:	460b      	mov	r3, r1
 800492e:	4313      	orrs	r3, r2
 8004930:	d00e      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004932:	4b86      	ldr	r3, [pc, #536]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	4a85      	ldr	r2, [pc, #532]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004938:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800493c:	6113      	str	r3, [r2, #16]
 800493e:	4b83      	ldr	r3, [pc, #524]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004940:	6919      	ldr	r1, [r3, #16]
 8004942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004946:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800494a:	4a80      	ldr	r2, [pc, #512]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800494c:	430b      	orrs	r3, r1
 800494e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800495c:	63bb      	str	r3, [r7, #56]	; 0x38
 800495e:	2300      	movs	r3, #0
 8004960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004962:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004966:	460b      	mov	r3, r1
 8004968:	4313      	orrs	r3, r2
 800496a:	d009      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800496c:	4b77      	ldr	r3, [pc, #476]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800496e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004970:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497a:	4a74      	ldr	r2, [pc, #464]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800497c:	430b      	orrs	r3, r1
 800497e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004988:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800498c:	633b      	str	r3, [r7, #48]	; 0x30
 800498e:	2300      	movs	r3, #0
 8004990:	637b      	str	r3, [r7, #52]	; 0x34
 8004992:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004996:	460b      	mov	r3, r1
 8004998:	4313      	orrs	r3, r2
 800499a:	d00a      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800499c:	4b6b      	ldr	r3, [pc, #428]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800499e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80049a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049ac:	4a67      	ldr	r2, [pc, #412]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049ae:	430b      	orrs	r3, r1
 80049b0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80049b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ba:	2100      	movs	r1, #0
 80049bc:	62b9      	str	r1, [r7, #40]	; 0x28
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049c4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80049c8:	460b      	mov	r3, r1
 80049ca:	4313      	orrs	r3, r2
 80049cc:	d011      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049d2:	3308      	adds	r3, #8
 80049d4:	2100      	movs	r1, #0
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fb78 	bl	80050cc <RCCEx_PLL2_Config>
 80049dc:	4603      	mov	r3, r0
 80049de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80049e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80049f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fa:	2100      	movs	r1, #0
 80049fc:	6239      	str	r1, [r7, #32]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	627b      	str	r3, [r7, #36]	; 0x24
 8004a04:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	d011      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a12:	3308      	adds	r3, #8
 8004a14:	2101      	movs	r1, #1
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fb58 	bl	80050cc <RCCEx_PLL2_Config>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004a22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	61b9      	str	r1, [r7, #24]
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	61fb      	str	r3, [r7, #28]
 8004a44:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	d011      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a52:	3308      	adds	r3, #8
 8004a54:	2102      	movs	r1, #2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fb38 	bl	80050cc <RCCEx_PLL2_Config>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004a62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	6139      	str	r1, [r7, #16]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	d011      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a92:	3328      	adds	r3, #40	; 0x28
 8004a94:	2100      	movs	r1, #0
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fbca 	bl	8005230 <RCCEx_PLL3_Config>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aba:	2100      	movs	r1, #0
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	f003 0310 	and.w	r3, r3, #16
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4313      	orrs	r3, r2
 8004acc:	d011      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad2:	3328      	adds	r3, #40	; 0x28
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 fbaa 	bl	8005230 <RCCEx_PLL3_Config>
 8004adc:	4603      	mov	r3, r0
 8004ade:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afa:	2100      	movs	r1, #0
 8004afc:	6039      	str	r1, [r7, #0]
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	607b      	str	r3, [r7, #4]
 8004b04:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	d011      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b12:	3328      	adds	r3, #40	; 0x28
 8004b14:	2102      	movs	r1, #2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fb8a 	bl	8005230 <RCCEx_PLL3_Config>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004b22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004b32:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	e000      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004b46:	46bd      	mov	sp, r7
 8004b48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b4c:	58024400 	.word	0x58024400

08004b50 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004b54:	f7fe fd96 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	091b      	lsrs	r3, r3, #4
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	4904      	ldr	r1, [pc, #16]	; (8004b78 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004b66:	5ccb      	ldrb	r3, [r1, r3]
 8004b68:	f003 031f 	and.w	r3, r3, #31
 8004b6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	58024400 	.word	0x58024400
 8004b78:	0800931c 	.word	0x0800931c

08004b7c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b089      	sub	sp, #36	; 0x24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b84:	4ba1      	ldr	r3, [pc, #644]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	f003 0303 	and.w	r3, r3, #3
 8004b8c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004b8e:	4b9f      	ldr	r3, [pc, #636]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b92:	0b1b      	lsrs	r3, r3, #12
 8004b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b98:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b9a:	4b9c      	ldr	r3, [pc, #624]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9e:	091b      	lsrs	r3, r3, #4
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004ba6:	4b99      	ldr	r3, [pc, #612]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004baa:	08db      	lsrs	r3, r3, #3
 8004bac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 8111 	beq.w	8004dec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	f000 8083 	beq.w	8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	f200 80a1 	bhi.w	8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d056      	beq.n	8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004be6:	e099      	b.n	8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004be8:	4b88      	ldr	r3, [pc, #544]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0320 	and.w	r3, r3, #32
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d02d      	beq.n	8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bf4:	4b85      	ldr	r3, [pc, #532]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	08db      	lsrs	r3, r3, #3
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	4a84      	ldr	r2, [pc, #528]	; (8004e10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004c00:	fa22 f303 	lsr.w	r3, r2, r3
 8004c04:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	ee07 3a90 	vmov	s15, r3
 8004c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c1e:	4b7b      	ldr	r3, [pc, #492]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c26:	ee07 3a90 	vmov	s15, r3
 8004c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c32:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c4e:	e087      	b.n	8004d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c62:	4b6a      	ldr	r3, [pc, #424]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c76:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c92:	e065      	b.n	8004d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ca6:	4b59      	ldr	r3, [pc, #356]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cd6:	e043      	b.n	8004d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cea:	4b48      	ldr	r3, [pc, #288]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cfe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d1a:	e021      	b.n	8004d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d2e:	4b37      	ldr	r3, [pc, #220]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d42:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004d60:	4b2a      	ldr	r3, [pc, #168]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	0a5b      	lsrs	r3, r3, #9
 8004d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d6a:	ee07 3a90 	vmov	s15, r3
 8004d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d86:	ee17 2a90 	vmov	r2, s15
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004d8e:	4b1f      	ldr	r3, [pc, #124]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d92:	0c1b      	lsrs	r3, r3, #16
 8004d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d98:	ee07 3a90 	vmov	s15, r3
 8004d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004da4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004da8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004db4:	ee17 2a90 	vmov	r2, s15
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004dbc:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	0e1b      	lsrs	r3, r3, #24
 8004dc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dc6:	ee07 3a90 	vmov	s15, r3
 8004dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004de2:	ee17 2a90 	vmov	r2, s15
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004dea:	e008      	b.n	8004dfe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	609a      	str	r2, [r3, #8]
}
 8004dfe:	bf00      	nop
 8004e00:	3724      	adds	r7, #36	; 0x24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	58024400 	.word	0x58024400
 8004e10:	03d09000 	.word	0x03d09000
 8004e14:	46000000 	.word	0x46000000
 8004e18:	4c742400 	.word	0x4c742400
 8004e1c:	4a742400 	.word	0x4a742400
 8004e20:	4bbebc20 	.word	0x4bbebc20

08004e24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b089      	sub	sp, #36	; 0x24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e2c:	4ba1      	ldr	r3, [pc, #644]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004e36:	4b9f      	ldr	r3, [pc, #636]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	0d1b      	lsrs	r3, r3, #20
 8004e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004e42:	4b9c      	ldr	r3, [pc, #624]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	0a1b      	lsrs	r3, r3, #8
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004e4e:	4b99      	ldr	r3, [pc, #612]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e52:	08db      	lsrs	r3, r3, #3
 8004e54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	fb02 f303 	mul.w	r3, r2, r3
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8111 	beq.w	8005094 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	f000 8083 	beq.w	8004f80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	f200 80a1 	bhi.w	8004fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d056      	beq.n	8004f3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004e8e:	e099      	b.n	8004fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e90:	4b88      	ldr	r3, [pc, #544]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d02d      	beq.n	8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e9c:	4b85      	ldr	r3, [pc, #532]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	08db      	lsrs	r3, r3, #3
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	4a84      	ldr	r2, [pc, #528]	; (80050b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8004eac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	ee07 3a90 	vmov	s15, r3
 8004eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ec6:	4b7b      	ldr	r3, [pc, #492]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eda:	eddf 5a78 	vldr	s11, [pc, #480]	; 80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004ef6:	e087      	b.n	8005008 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	ee07 3a90 	vmov	s15, r3
 8004efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80050c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f0a:	4b6a      	ldr	r3, [pc, #424]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f3a:	e065      	b.n	8005008 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80050c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f4e:	4b59      	ldr	r3, [pc, #356]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f62:	eddf 5a56 	vldr	s11, [pc, #344]	; 80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f7e:	e043      	b.n	8005008 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80050c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f92:	4b48      	ldr	r3, [pc, #288]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fa6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fc2:	e021      	b.n	8005008 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80050c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fd6:	4b37      	ldr	r3, [pc, #220]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005006:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005008:	4b2a      	ldr	r3, [pc, #168]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	0a5b      	lsrs	r3, r3, #9
 800500e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800501e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005022:	edd7 6a07 	vldr	s13, [r7, #28]
 8005026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800502a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800502e:	ee17 2a90 	vmov	r2, s15
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005036:	4b1f      	ldr	r3, [pc, #124]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	0c1b      	lsrs	r3, r3, #16
 800503c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005040:	ee07 3a90 	vmov	s15, r3
 8005044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005048:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800504c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005050:	edd7 6a07 	vldr	s13, [r7, #28]
 8005054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800505c:	ee17 2a90 	vmov	r2, s15
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005064:	4b13      	ldr	r3, [pc, #76]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	0e1b      	lsrs	r3, r3, #24
 800506a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005076:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800507a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800507e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800508a:	ee17 2a90 	vmov	r2, s15
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005092:	e008      	b.n	80050a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	609a      	str	r2, [r3, #8]
}
 80050a6:	bf00      	nop
 80050a8:	3724      	adds	r7, #36	; 0x24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	58024400 	.word	0x58024400
 80050b8:	03d09000 	.word	0x03d09000
 80050bc:	46000000 	.word	0x46000000
 80050c0:	4c742400 	.word	0x4c742400
 80050c4:	4a742400 	.word	0x4a742400
 80050c8:	4bbebc20 	.word	0x4bbebc20

080050cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050da:	4b53      	ldr	r3, [pc, #332]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80050dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	2b03      	cmp	r3, #3
 80050e4:	d101      	bne.n	80050ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e099      	b.n	800521e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80050ea:	4b4f      	ldr	r3, [pc, #316]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a4e      	ldr	r2, [pc, #312]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80050f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050f6:	f7fc fa2f 	bl	8001558 <HAL_GetTick>
 80050fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050fc:	e008      	b.n	8005110 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050fe:	f7fc fa2b 	bl	8001558 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e086      	b.n	800521e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005110:	4b45      	ldr	r3, [pc, #276]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1f0      	bne.n	80050fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800511c:	4b42      	ldr	r3, [pc, #264]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 800511e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005120:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	031b      	lsls	r3, r3, #12
 800512a:	493f      	ldr	r1, [pc, #252]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 800512c:	4313      	orrs	r3, r2
 800512e:	628b      	str	r3, [r1, #40]	; 0x28
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	3b01      	subs	r3, #1
 8005136:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	3b01      	subs	r3, #1
 8005140:	025b      	lsls	r3, r3, #9
 8005142:	b29b      	uxth	r3, r3
 8005144:	431a      	orrs	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	3b01      	subs	r3, #1
 800514c:	041b      	lsls	r3, r3, #16
 800514e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	3b01      	subs	r3, #1
 800515a:	061b      	lsls	r3, r3, #24
 800515c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005160:	4931      	ldr	r1, [pc, #196]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005162:	4313      	orrs	r3, r2
 8005164:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005166:	4b30      	ldr	r3, [pc, #192]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	492d      	ldr	r1, [pc, #180]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005174:	4313      	orrs	r3, r2
 8005176:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005178:	4b2b      	ldr	r3, [pc, #172]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 800517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517c:	f023 0220 	bic.w	r2, r3, #32
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	4928      	ldr	r1, [pc, #160]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005186:	4313      	orrs	r3, r2
 8005188:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800518a:	4b27      	ldr	r3, [pc, #156]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 800518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518e:	4a26      	ldr	r2, [pc, #152]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005190:	f023 0310 	bic.w	r3, r3, #16
 8005194:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005196:	4b24      	ldr	r3, [pc, #144]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800519a:	4b24      	ldr	r3, [pc, #144]	; (800522c <RCCEx_PLL2_Config+0x160>)
 800519c:	4013      	ands	r3, r2
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	69d2      	ldr	r2, [r2, #28]
 80051a2:	00d2      	lsls	r2, r2, #3
 80051a4:	4920      	ldr	r1, [pc, #128]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80051aa:	4b1f      	ldr	r3, [pc, #124]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	4a1e      	ldr	r2, [pc, #120]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051b0:	f043 0310 	orr.w	r3, r3, #16
 80051b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d106      	bne.n	80051ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80051bc:	4b1a      	ldr	r3, [pc, #104]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c0:	4a19      	ldr	r2, [pc, #100]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051c8:	e00f      	b.n	80051ea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d106      	bne.n	80051de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80051d0:	4b15      	ldr	r3, [pc, #84]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	4a14      	ldr	r2, [pc, #80]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051dc:	e005      	b.n	80051ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80051de:	4b12      	ldr	r3, [pc, #72]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e2:	4a11      	ldr	r2, [pc, #68]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80051ea:	4b0f      	ldr	r3, [pc, #60]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a0e      	ldr	r2, [pc, #56]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f6:	f7fc f9af 	bl	8001558 <HAL_GetTick>
 80051fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051fc:	e008      	b.n	8005210 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80051fe:	f7fc f9ab 	bl	8001558 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e006      	b.n	800521e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005210:	4b05      	ldr	r3, [pc, #20]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0f0      	beq.n	80051fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800521c:	7bfb      	ldrb	r3, [r7, #15]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	58024400 	.word	0x58024400
 800522c:	ffff0007 	.word	0xffff0007

08005230 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800523e:	4b53      	ldr	r3, [pc, #332]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	2b03      	cmp	r3, #3
 8005248:	d101      	bne.n	800524e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e099      	b.n	8005382 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800524e:	4b4f      	ldr	r3, [pc, #316]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a4e      	ldr	r2, [pc, #312]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800525a:	f7fc f97d 	bl	8001558 <HAL_GetTick>
 800525e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005260:	e008      	b.n	8005274 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005262:	f7fc f979 	bl	8001558 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e086      	b.n	8005382 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005274:	4b45      	ldr	r3, [pc, #276]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1f0      	bne.n	8005262 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005280:	4b42      	ldr	r3, [pc, #264]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005284:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	051b      	lsls	r3, r3, #20
 800528e:	493f      	ldr	r1, [pc, #252]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005290:	4313      	orrs	r3, r2
 8005292:	628b      	str	r3, [r1, #40]	; 0x28
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	3b01      	subs	r3, #1
 800529a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	025b      	lsls	r3, r3, #9
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	041b      	lsls	r3, r3, #16
 80052b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	3b01      	subs	r3, #1
 80052be:	061b      	lsls	r3, r3, #24
 80052c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052c4:	4931      	ldr	r1, [pc, #196]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80052ca:	4b30      	ldr	r3, [pc, #192]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 80052cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	492d      	ldr	r1, [pc, #180]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80052dc:	4b2b      	ldr	r3, [pc, #172]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 80052de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	4928      	ldr	r1, [pc, #160]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80052ee:	4b27      	ldr	r3, [pc, #156]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 80052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f2:	4a26      	ldr	r2, [pc, #152]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 80052f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80052fa:	4b24      	ldr	r3, [pc, #144]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 80052fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052fe:	4b24      	ldr	r3, [pc, #144]	; (8005390 <RCCEx_PLL3_Config+0x160>)
 8005300:	4013      	ands	r3, r2
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	69d2      	ldr	r2, [r2, #28]
 8005306:	00d2      	lsls	r2, r2, #3
 8005308:	4920      	ldr	r1, [pc, #128]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 800530a:	4313      	orrs	r3, r2
 800530c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800530e:	4b1f      	ldr	r3, [pc, #124]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	4a1e      	ldr	r2, [pc, #120]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005318:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d106      	bne.n	800532e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005320:	4b1a      	ldr	r3, [pc, #104]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	4a19      	ldr	r2, [pc, #100]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005326:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800532a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800532c:	e00f      	b.n	800534e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d106      	bne.n	8005342 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005334:	4b15      	ldr	r3, [pc, #84]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	4a14      	ldr	r2, [pc, #80]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 800533a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800533e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005340:	e005      	b.n	800534e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005342:	4b12      	ldr	r3, [pc, #72]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	4a11      	ldr	r2, [pc, #68]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005348:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800534c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800534e:	4b0f      	ldr	r3, [pc, #60]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a0e      	ldr	r2, [pc, #56]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005358:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800535a:	f7fc f8fd 	bl	8001558 <HAL_GetTick>
 800535e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005360:	e008      	b.n	8005374 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005362:	f7fc f8f9 	bl	8001558 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d901      	bls.n	8005374 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e006      	b.n	8005382 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005374:	4b05      	ldr	r3, [pc, #20]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d0f0      	beq.n	8005362 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005380:	7bfb      	ldrb	r3, [r7, #15]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	58024400 	.word	0x58024400
 8005390:	ffff0007 	.word	0xffff0007

08005394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e049      	b.n	800543a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d106      	bne.n	80053c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7fb fde2 	bl	8000f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3304      	adds	r3, #4
 80053d0:	4619      	mov	r1, r3
 80053d2:	4610      	mov	r0, r2
 80053d4:	f000 f92e 	bl	8005634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
	...

08005444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800544e:	2300      	movs	r3, #0
 8005450:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005458:	2b01      	cmp	r3, #1
 800545a:	d101      	bne.n	8005460 <HAL_TIM_ConfigClockSource+0x1c>
 800545c:	2302      	movs	r3, #2
 800545e:	e0dc      	b.n	800561a <HAL_TIM_ConfigClockSource+0x1d6>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	4b6a      	ldr	r3, [pc, #424]	; (8005624 <HAL_TIM_ConfigClockSource+0x1e0>)
 800547c:	4013      	ands	r3, r2
 800547e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005486:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a64      	ldr	r2, [pc, #400]	; (8005628 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	f000 80a9 	beq.w	80055ee <HAL_TIM_ConfigClockSource+0x1aa>
 800549c:	4a62      	ldr	r2, [pc, #392]	; (8005628 <HAL_TIM_ConfigClockSource+0x1e4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	f200 80ae 	bhi.w	8005600 <HAL_TIM_ConfigClockSource+0x1bc>
 80054a4:	4a61      	ldr	r2, [pc, #388]	; (800562c <HAL_TIM_ConfigClockSource+0x1e8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	f000 80a1 	beq.w	80055ee <HAL_TIM_ConfigClockSource+0x1aa>
 80054ac:	4a5f      	ldr	r2, [pc, #380]	; (800562c <HAL_TIM_ConfigClockSource+0x1e8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	f200 80a6 	bhi.w	8005600 <HAL_TIM_ConfigClockSource+0x1bc>
 80054b4:	4a5e      	ldr	r2, [pc, #376]	; (8005630 <HAL_TIM_ConfigClockSource+0x1ec>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	f000 8099 	beq.w	80055ee <HAL_TIM_ConfigClockSource+0x1aa>
 80054bc:	4a5c      	ldr	r2, [pc, #368]	; (8005630 <HAL_TIM_ConfigClockSource+0x1ec>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	f200 809e 	bhi.w	8005600 <HAL_TIM_ConfigClockSource+0x1bc>
 80054c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80054c8:	f000 8091 	beq.w	80055ee <HAL_TIM_ConfigClockSource+0x1aa>
 80054cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80054d0:	f200 8096 	bhi.w	8005600 <HAL_TIM_ConfigClockSource+0x1bc>
 80054d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054d8:	f000 8089 	beq.w	80055ee <HAL_TIM_ConfigClockSource+0x1aa>
 80054dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054e0:	f200 808e 	bhi.w	8005600 <HAL_TIM_ConfigClockSource+0x1bc>
 80054e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e8:	d03e      	beq.n	8005568 <HAL_TIM_ConfigClockSource+0x124>
 80054ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ee:	f200 8087 	bhi.w	8005600 <HAL_TIM_ConfigClockSource+0x1bc>
 80054f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f6:	f000 8086 	beq.w	8005606 <HAL_TIM_ConfigClockSource+0x1c2>
 80054fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fe:	d87f      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x1bc>
 8005500:	2b70      	cmp	r3, #112	; 0x70
 8005502:	d01a      	beq.n	800553a <HAL_TIM_ConfigClockSource+0xf6>
 8005504:	2b70      	cmp	r3, #112	; 0x70
 8005506:	d87b      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x1bc>
 8005508:	2b60      	cmp	r3, #96	; 0x60
 800550a:	d050      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0x16a>
 800550c:	2b60      	cmp	r3, #96	; 0x60
 800550e:	d877      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x1bc>
 8005510:	2b50      	cmp	r3, #80	; 0x50
 8005512:	d03c      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x14a>
 8005514:	2b50      	cmp	r3, #80	; 0x50
 8005516:	d873      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x1bc>
 8005518:	2b40      	cmp	r3, #64	; 0x40
 800551a:	d058      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0x18a>
 800551c:	2b40      	cmp	r3, #64	; 0x40
 800551e:	d86f      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x1bc>
 8005520:	2b30      	cmp	r3, #48	; 0x30
 8005522:	d064      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x1aa>
 8005524:	2b30      	cmp	r3, #48	; 0x30
 8005526:	d86b      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x1bc>
 8005528:	2b20      	cmp	r3, #32
 800552a:	d060      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x1aa>
 800552c:	2b20      	cmp	r3, #32
 800552e:	d867      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x1bc>
 8005530:	2b00      	cmp	r3, #0
 8005532:	d05c      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x1aa>
 8005534:	2b10      	cmp	r3, #16
 8005536:	d05a      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x1aa>
 8005538:	e062      	b.n	8005600 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6899      	ldr	r1, [r3, #8]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f000 f98b 	bl	8005864 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800555c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	609a      	str	r2, [r3, #8]
      break;
 8005566:	e04f      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	6899      	ldr	r1, [r3, #8]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f000 f974 	bl	8005864 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800558a:	609a      	str	r2, [r3, #8]
      break;
 800558c:	e03c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6859      	ldr	r1, [r3, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	461a      	mov	r2, r3
 800559c:	f000 f8e4 	bl	8005768 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2150      	movs	r1, #80	; 0x50
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 f93e 	bl	8005828 <TIM_ITRx_SetConfig>
      break;
 80055ac:	e02c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6859      	ldr	r1, [r3, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	461a      	mov	r2, r3
 80055bc:	f000 f903 	bl	80057c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2160      	movs	r1, #96	; 0x60
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 f92e 	bl	8005828 <TIM_ITRx_SetConfig>
      break;
 80055cc:	e01c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6859      	ldr	r1, [r3, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	461a      	mov	r2, r3
 80055dc:	f000 f8c4 	bl	8005768 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2140      	movs	r1, #64	; 0x40
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 f91e 	bl	8005828 <TIM_ITRx_SetConfig>
      break;
 80055ec:	e00c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4619      	mov	r1, r3
 80055f8:	4610      	mov	r0, r2
 80055fa:	f000 f915 	bl	8005828 <TIM_ITRx_SetConfig>
      break;
 80055fe:	e003      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	73fb      	strb	r3, [r7, #15]
      break;
 8005604:	e000      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005606:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005618:	7bfb      	ldrb	r3, [r7, #15]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	ffceff88 	.word	0xffceff88
 8005628:	00100040 	.word	0x00100040
 800562c:	00100030 	.word	0x00100030
 8005630:	00100020 	.word	0x00100020

08005634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a40      	ldr	r2, [pc, #256]	; (8005748 <TIM_Base_SetConfig+0x114>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d013      	beq.n	8005674 <TIM_Base_SetConfig+0x40>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005652:	d00f      	beq.n	8005674 <TIM_Base_SetConfig+0x40>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a3d      	ldr	r2, [pc, #244]	; (800574c <TIM_Base_SetConfig+0x118>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00b      	beq.n	8005674 <TIM_Base_SetConfig+0x40>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a3c      	ldr	r2, [pc, #240]	; (8005750 <TIM_Base_SetConfig+0x11c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d007      	beq.n	8005674 <TIM_Base_SetConfig+0x40>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a3b      	ldr	r2, [pc, #236]	; (8005754 <TIM_Base_SetConfig+0x120>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d003      	beq.n	8005674 <TIM_Base_SetConfig+0x40>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a3a      	ldr	r2, [pc, #232]	; (8005758 <TIM_Base_SetConfig+0x124>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d108      	bne.n	8005686 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a2f      	ldr	r2, [pc, #188]	; (8005748 <TIM_Base_SetConfig+0x114>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d01f      	beq.n	80056ce <TIM_Base_SetConfig+0x9a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005694:	d01b      	beq.n	80056ce <TIM_Base_SetConfig+0x9a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a2c      	ldr	r2, [pc, #176]	; (800574c <TIM_Base_SetConfig+0x118>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d017      	beq.n	80056ce <TIM_Base_SetConfig+0x9a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a2b      	ldr	r2, [pc, #172]	; (8005750 <TIM_Base_SetConfig+0x11c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d013      	beq.n	80056ce <TIM_Base_SetConfig+0x9a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a2a      	ldr	r2, [pc, #168]	; (8005754 <TIM_Base_SetConfig+0x120>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00f      	beq.n	80056ce <TIM_Base_SetConfig+0x9a>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a29      	ldr	r2, [pc, #164]	; (8005758 <TIM_Base_SetConfig+0x124>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d00b      	beq.n	80056ce <TIM_Base_SetConfig+0x9a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a28      	ldr	r2, [pc, #160]	; (800575c <TIM_Base_SetConfig+0x128>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d007      	beq.n	80056ce <TIM_Base_SetConfig+0x9a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a27      	ldr	r2, [pc, #156]	; (8005760 <TIM_Base_SetConfig+0x12c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d003      	beq.n	80056ce <TIM_Base_SetConfig+0x9a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a26      	ldr	r2, [pc, #152]	; (8005764 <TIM_Base_SetConfig+0x130>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d108      	bne.n	80056e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4313      	orrs	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a10      	ldr	r2, [pc, #64]	; (8005748 <TIM_Base_SetConfig+0x114>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00f      	beq.n	800572c <TIM_Base_SetConfig+0xf8>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a12      	ldr	r2, [pc, #72]	; (8005758 <TIM_Base_SetConfig+0x124>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00b      	beq.n	800572c <TIM_Base_SetConfig+0xf8>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a11      	ldr	r2, [pc, #68]	; (800575c <TIM_Base_SetConfig+0x128>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d007      	beq.n	800572c <TIM_Base_SetConfig+0xf8>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a10      	ldr	r2, [pc, #64]	; (8005760 <TIM_Base_SetConfig+0x12c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d003      	beq.n	800572c <TIM_Base_SetConfig+0xf8>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a0f      	ldr	r2, [pc, #60]	; (8005764 <TIM_Base_SetConfig+0x130>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d103      	bne.n	8005734 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	615a      	str	r2, [r3, #20]
}
 800573a:	bf00      	nop
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	40010000 	.word	0x40010000
 800574c:	40000400 	.word	0x40000400
 8005750:	40000800 	.word	0x40000800
 8005754:	40000c00 	.word	0x40000c00
 8005758:	40010400 	.word	0x40010400
 800575c:	40014000 	.word	0x40014000
 8005760:	40014400 	.word	0x40014400
 8005764:	40014800 	.word	0x40014800

08005768 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	f023 0201 	bic.w	r2, r3, #1
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f023 030a 	bic.w	r3, r3, #10
 80057a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	621a      	str	r2, [r3, #32]
}
 80057ba:	bf00      	nop
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b087      	sub	sp, #28
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	f023 0210 	bic.w	r2, r3, #16
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	031b      	lsls	r3, r3, #12
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005802:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	621a      	str	r2, [r3, #32]
}
 800581a:	bf00      	nop
 800581c:	371c      	adds	r7, #28
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
	...

08005828 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4b09      	ldr	r3, [pc, #36]	; (8005860 <TIM_ITRx_SetConfig+0x38>)
 800583c:	4013      	ands	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4313      	orrs	r3, r2
 8005846:	f043 0307 	orr.w	r3, r3, #7
 800584a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	609a      	str	r2, [r3, #8]
}
 8005852:	bf00      	nop
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	ffcfff8f 	.word	0xffcfff8f

08005864 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
 8005870:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800587e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	021a      	lsls	r2, r3, #8
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	431a      	orrs	r2, r3
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	4313      	orrs	r3, r2
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	4313      	orrs	r3, r2
 8005890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	609a      	str	r2, [r3, #8]
}
 8005898:	bf00      	nop
 800589a:	371c      	adds	r7, #28
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e06d      	b.n	8005998 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a30      	ldr	r2, [pc, #192]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d004      	beq.n	80058f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a2f      	ldr	r2, [pc, #188]	; (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d108      	bne.n	8005902 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005908:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4313      	orrs	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a20      	ldr	r2, [pc, #128]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d022      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592e:	d01d      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1d      	ldr	r2, [pc, #116]	; (80059ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d018      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1c      	ldr	r2, [pc, #112]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d013      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a1a      	ldr	r2, [pc, #104]	; (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00e      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a15      	ldr	r2, [pc, #84]	; (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d009      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a16      	ldr	r2, [pc, #88]	; (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d004      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a15      	ldr	r2, [pc, #84]	; (80059bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d10c      	bne.n	8005986 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005972:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	4313      	orrs	r3, r2
 800597c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	40010000 	.word	0x40010000
 80059a8:	40010400 	.word	0x40010400
 80059ac:	40000400 	.word	0x40000400
 80059b0:	40000800 	.word	0x40000800
 80059b4:	40000c00 	.word	0x40000c00
 80059b8:	40001800 	.word	0x40001800
 80059bc:	40014000 	.word	0x40014000

080059c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e042      	b.n	8005a58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d106      	bne.n	80059ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7fb faef 	bl	8000fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2224      	movs	r2, #36	; 0x24
 80059ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 0201 	bic.w	r2, r2, #1
 8005a00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fc04 	bl	8006210 <UART_SetConfig>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d101      	bne.n	8005a12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e022      	b.n	8005a58 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f001 f960 	bl	8006ce0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f001 f9e7 	bl	8006e24 <UART_CheckIdleState>
 8005a56:	4603      	mov	r3, r0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b0ba      	sub	sp, #232	; 0xe8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005a8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005a8e:	4013      	ands	r3, r2
 8005a90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005a94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d11b      	bne.n	8005ad4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa0:	f003 0320 	and.w	r3, r3, #32
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d015      	beq.n	8005ad4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aac:	f003 0320 	and.w	r3, r3, #32
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d105      	bne.n	8005ac0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d009      	beq.n	8005ad4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 8377 	beq.w	80061b8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	4798      	blx	r3
      }
      return;
 8005ad2:	e371      	b.n	80061b8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ad4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 8123 	beq.w	8005d24 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005ade:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005ae2:	4b8d      	ldr	r3, [pc, #564]	; (8005d18 <HAL_UART_IRQHandler+0x2b8>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d106      	bne.n	8005af8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005aea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005aee:	4b8b      	ldr	r3, [pc, #556]	; (8005d1c <HAL_UART_IRQHandler+0x2bc>)
 8005af0:	4013      	ands	r3, r2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 8116 	beq.w	8005d24 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d011      	beq.n	8005b28 <HAL_UART_IRQHandler+0xc8>
 8005b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00b      	beq.n	8005b28 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2201      	movs	r2, #1
 8005b16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1e:	f043 0201 	orr.w	r2, r3, #1
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d011      	beq.n	8005b58 <HAL_UART_IRQHandler+0xf8>
 8005b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00b      	beq.n	8005b58 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2202      	movs	r2, #2
 8005b46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b4e:	f043 0204 	orr.w	r2, r3, #4
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d011      	beq.n	8005b88 <HAL_UART_IRQHandler+0x128>
 8005b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00b      	beq.n	8005b88 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2204      	movs	r2, #4
 8005b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7e:	f043 0202 	orr.w	r2, r3, #2
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b8c:	f003 0308 	and.w	r3, r3, #8
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d017      	beq.n	8005bc4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b98:	f003 0320 	and.w	r3, r3, #32
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d105      	bne.n	8005bac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005ba0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005ba4:	4b5c      	ldr	r3, [pc, #368]	; (8005d18 <HAL_UART_IRQHandler+0x2b8>)
 8005ba6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00b      	beq.n	8005bc4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2208      	movs	r2, #8
 8005bb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bba:	f043 0208 	orr.w	r2, r3, #8
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d012      	beq.n	8005bf6 <HAL_UART_IRQHandler+0x196>
 8005bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00c      	beq.n	8005bf6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005be4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bec:	f043 0220 	orr.w	r2, r3, #32
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 82dd 	beq.w	80061bc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c06:	f003 0320 	and.w	r3, r3, #32
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d013      	beq.n	8005c36 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c12:	f003 0320 	and.w	r3, r3, #32
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d105      	bne.n	8005c26 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d007      	beq.n	8005c36 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4a:	2b40      	cmp	r3, #64	; 0x40
 8005c4c:	d005      	beq.n	8005c5a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d054      	beq.n	8005d04 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f001 fb16 	bl	800728c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6a:	2b40      	cmp	r3, #64	; 0x40
 8005c6c:	d146      	bne.n	8005cfc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3308      	adds	r3, #8
 8005c74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3308      	adds	r3, #8
 8005c96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ca6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005caa:	e841 2300 	strex	r3, r2, [r1]
 8005cae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005cb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1d9      	bne.n	8005c6e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d017      	beq.n	8005cf4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cca:	4a15      	ldr	r2, [pc, #84]	; (8005d20 <HAL_UART_IRQHandler+0x2c0>)
 8005ccc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fc f901 	bl	8001edc <HAL_DMA_Abort_IT>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d019      	beq.n	8005d14 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005cee:	4610      	mov	r0, r2
 8005cf0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf2:	e00f      	b.n	8005d14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fa81 	bl	80061fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfa:	e00b      	b.n	8005d14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fa7d 	bl	80061fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d02:	e007      	b.n	8005d14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fa79 	bl	80061fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005d12:	e253      	b.n	80061bc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d14:	bf00      	nop
    return;
 8005d16:	e251      	b.n	80061bc <HAL_UART_IRQHandler+0x75c>
 8005d18:	10000001 	.word	0x10000001
 8005d1c:	04000120 	.word	0x04000120
 8005d20:	08007359 	.word	0x08007359

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	f040 81e7 	bne.w	80060fc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d32:	f003 0310 	and.w	r3, r3, #16
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 81e0 	beq.w	80060fc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d40:	f003 0310 	and.w	r3, r3, #16
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 81d9 	beq.w	80060fc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2210      	movs	r2, #16
 8005d50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5c:	2b40      	cmp	r3, #64	; 0x40
 8005d5e:	f040 8151 	bne.w	8006004 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a96      	ldr	r2, [pc, #600]	; (8005fc4 <HAL_UART_IRQHandler+0x564>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d068      	beq.n	8005e42 <HAL_UART_IRQHandler+0x3e2>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a93      	ldr	r2, [pc, #588]	; (8005fc8 <HAL_UART_IRQHandler+0x568>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d061      	beq.n	8005e42 <HAL_UART_IRQHandler+0x3e2>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a91      	ldr	r2, [pc, #580]	; (8005fcc <HAL_UART_IRQHandler+0x56c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d05a      	beq.n	8005e42 <HAL_UART_IRQHandler+0x3e2>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a8e      	ldr	r2, [pc, #568]	; (8005fd0 <HAL_UART_IRQHandler+0x570>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d053      	beq.n	8005e42 <HAL_UART_IRQHandler+0x3e2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a8c      	ldr	r2, [pc, #560]	; (8005fd4 <HAL_UART_IRQHandler+0x574>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d04c      	beq.n	8005e42 <HAL_UART_IRQHandler+0x3e2>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a89      	ldr	r2, [pc, #548]	; (8005fd8 <HAL_UART_IRQHandler+0x578>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d045      	beq.n	8005e42 <HAL_UART_IRQHandler+0x3e2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a87      	ldr	r2, [pc, #540]	; (8005fdc <HAL_UART_IRQHandler+0x57c>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d03e      	beq.n	8005e42 <HAL_UART_IRQHandler+0x3e2>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a84      	ldr	r2, [pc, #528]	; (8005fe0 <HAL_UART_IRQHandler+0x580>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d037      	beq.n	8005e42 <HAL_UART_IRQHandler+0x3e2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a82      	ldr	r2, [pc, #520]	; (8005fe4 <HAL_UART_IRQHandler+0x584>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d030      	beq.n	8005e42 <HAL_UART_IRQHandler+0x3e2>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a7f      	ldr	r2, [pc, #508]	; (8005fe8 <HAL_UART_IRQHandler+0x588>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d029      	beq.n	8005e42 <HAL_UART_IRQHandler+0x3e2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a7d      	ldr	r2, [pc, #500]	; (8005fec <HAL_UART_IRQHandler+0x58c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d022      	beq.n	8005e42 <HAL_UART_IRQHandler+0x3e2>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a7a      	ldr	r2, [pc, #488]	; (8005ff0 <HAL_UART_IRQHandler+0x590>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d01b      	beq.n	8005e42 <HAL_UART_IRQHandler+0x3e2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a78      	ldr	r2, [pc, #480]	; (8005ff4 <HAL_UART_IRQHandler+0x594>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d014      	beq.n	8005e42 <HAL_UART_IRQHandler+0x3e2>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a75      	ldr	r2, [pc, #468]	; (8005ff8 <HAL_UART_IRQHandler+0x598>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00d      	beq.n	8005e42 <HAL_UART_IRQHandler+0x3e2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a73      	ldr	r2, [pc, #460]	; (8005ffc <HAL_UART_IRQHandler+0x59c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d006      	beq.n	8005e42 <HAL_UART_IRQHandler+0x3e2>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a70      	ldr	r2, [pc, #448]	; (8006000 <HAL_UART_IRQHandler+0x5a0>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d106      	bne.n	8005e50 <HAL_UART_IRQHandler+0x3f0>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	e005      	b.n	8005e5c <HAL_UART_IRQHandler+0x3fc>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 81ab 	beq.w	80061c0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e74:	429a      	cmp	r2, r3
 8005e76:	f080 81a3 	bcs.w	80061c0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e90:	f000 8087 	beq.w	8005fa2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ea0:	e853 3f00 	ldrex	r3, [r3]
 8005ea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ebe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ec2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005eca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ece:	e841 2300 	strex	r3, r2, [r1]
 8005ed2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ed6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1da      	bne.n	8005e94 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3308      	adds	r3, #8
 8005ee4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ee8:	e853 3f00 	ldrex	r3, [r3]
 8005eec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005eee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ef0:	f023 0301 	bic.w	r3, r3, #1
 8005ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3308      	adds	r3, #8
 8005efe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f0e:	e841 2300 	strex	r3, r2, [r1]
 8005f12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1e1      	bne.n	8005ede <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3308      	adds	r3, #8
 8005f20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3308      	adds	r3, #8
 8005f3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f46:	e841 2300 	strex	r3, r2, [r1]
 8005f4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1e3      	bne.n	8005f1a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f68:	e853 3f00 	ldrex	r3, [r3]
 8005f6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f70:	f023 0310 	bic.w	r3, r3, #16
 8005f74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f82:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f84:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f8a:	e841 2300 	strex	r3, r2, [r1]
 8005f8e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1e4      	bne.n	8005f60 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7fb fc7f 	bl	80018a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7fa ff5d 	bl	8000e7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fc2:	e0fd      	b.n	80061c0 <HAL_UART_IRQHandler+0x760>
 8005fc4:	40020010 	.word	0x40020010
 8005fc8:	40020028 	.word	0x40020028
 8005fcc:	40020040 	.word	0x40020040
 8005fd0:	40020058 	.word	0x40020058
 8005fd4:	40020070 	.word	0x40020070
 8005fd8:	40020088 	.word	0x40020088
 8005fdc:	400200a0 	.word	0x400200a0
 8005fe0:	400200b8 	.word	0x400200b8
 8005fe4:	40020410 	.word	0x40020410
 8005fe8:	40020428 	.word	0x40020428
 8005fec:	40020440 	.word	0x40020440
 8005ff0:	40020458 	.word	0x40020458
 8005ff4:	40020470 	.word	0x40020470
 8005ff8:	40020488 	.word	0x40020488
 8005ffc:	400204a0 	.word	0x400204a0
 8006000:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006010:	b29b      	uxth	r3, r3
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800601e:	b29b      	uxth	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 80cf 	beq.w	80061c4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006026:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800602a:	2b00      	cmp	r3, #0
 800602c:	f000 80ca 	beq.w	80061c4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006038:	e853 3f00 	ldrex	r3, [r3]
 800603c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800603e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006040:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006044:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	461a      	mov	r2, r3
 800604e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006052:	647b      	str	r3, [r7, #68]	; 0x44
 8006054:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006056:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006058:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800605a:	e841 2300 	strex	r3, r2, [r1]
 800605e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1e4      	bne.n	8006030 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3308      	adds	r3, #8
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	e853 3f00 	ldrex	r3, [r3]
 8006074:	623b      	str	r3, [r7, #32]
   return(result);
 8006076:	6a3a      	ldr	r2, [r7, #32]
 8006078:	4b55      	ldr	r3, [pc, #340]	; (80061d0 <HAL_UART_IRQHandler+0x770>)
 800607a:	4013      	ands	r3, r2
 800607c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3308      	adds	r3, #8
 8006086:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800608a:	633a      	str	r2, [r7, #48]	; 0x30
 800608c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e3      	bne.n	8006066 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	e853 3f00 	ldrex	r3, [r3]
 80060be:	60fb      	str	r3, [r7, #12]
   return(result);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0310 	bic.w	r3, r3, #16
 80060c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060d4:	61fb      	str	r3, [r7, #28]
 80060d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d8:	69b9      	ldr	r1, [r7, #24]
 80060da:	69fa      	ldr	r2, [r7, #28]
 80060dc:	e841 2300 	strex	r3, r2, [r1]
 80060e0:	617b      	str	r3, [r7, #20]
   return(result);
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1e4      	bne.n	80060b2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060f2:	4619      	mov	r1, r3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7fa fec1 	bl	8000e7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060fa:	e063      	b.n	80061c4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80060fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006100:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00e      	beq.n	8006126 <HAL_UART_IRQHandler+0x6c6>
 8006108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800610c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d008      	beq.n	8006126 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800611c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f001 fe78 	bl	8007e14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006124:	e051      	b.n	80061ca <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612e:	2b00      	cmp	r3, #0
 8006130:	d014      	beq.n	800615c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800613a:	2b00      	cmp	r3, #0
 800613c:	d105      	bne.n	800614a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800613e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006142:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d008      	beq.n	800615c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800614e:	2b00      	cmp	r3, #0
 8006150:	d03a      	beq.n	80061c8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	4798      	blx	r3
    }
    return;
 800615a:	e035      	b.n	80061c8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800615c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006164:	2b00      	cmp	r3, #0
 8006166:	d009      	beq.n	800617c <HAL_UART_IRQHandler+0x71c>
 8006168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800616c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f001 f905 	bl	8007384 <UART_EndTransmit_IT>
    return;
 800617a:	e026      	b.n	80061ca <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800617c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006180:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d009      	beq.n	800619c <HAL_UART_IRQHandler+0x73c>
 8006188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800618c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f001 fe51 	bl	8007e3c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800619a:	e016      	b.n	80061ca <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800619c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d010      	beq.n	80061ca <HAL_UART_IRQHandler+0x76a>
 80061a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	da0c      	bge.n	80061ca <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f001 fe39 	bl	8007e28 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061b6:	e008      	b.n	80061ca <HAL_UART_IRQHandler+0x76a>
      return;
 80061b8:	bf00      	nop
 80061ba:	e006      	b.n	80061ca <HAL_UART_IRQHandler+0x76a>
    return;
 80061bc:	bf00      	nop
 80061be:	e004      	b.n	80061ca <HAL_UART_IRQHandler+0x76a>
      return;
 80061c0:	bf00      	nop
 80061c2:	e002      	b.n	80061ca <HAL_UART_IRQHandler+0x76a>
      return;
 80061c4:	bf00      	nop
 80061c6:	e000      	b.n	80061ca <HAL_UART_IRQHandler+0x76a>
    return;
 80061c8:	bf00      	nop
  }
}
 80061ca:	37e8      	adds	r7, #232	; 0xe8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	effffffe 	.word	0xeffffffe

080061d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006214:	b092      	sub	sp, #72	; 0x48
 8006216:	af00      	add	r7, sp, #0
 8006218:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	431a      	orrs	r2, r3
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	431a      	orrs	r2, r3
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	4313      	orrs	r3, r2
 8006236:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	4bbe      	ldr	r3, [pc, #760]	; (8006538 <UART_SetConfig+0x328>)
 8006240:	4013      	ands	r3, r2
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	6812      	ldr	r2, [r2, #0]
 8006246:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006248:	430b      	orrs	r3, r1
 800624a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	68da      	ldr	r2, [r3, #12]
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4ab3      	ldr	r2, [pc, #716]	; (800653c <UART_SetConfig+0x32c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d004      	beq.n	800627c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006278:	4313      	orrs	r3, r2
 800627a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689a      	ldr	r2, [r3, #8]
 8006282:	4baf      	ldr	r3, [pc, #700]	; (8006540 <UART_SetConfig+0x330>)
 8006284:	4013      	ands	r3, r2
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	6812      	ldr	r2, [r2, #0]
 800628a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800628c:	430b      	orrs	r3, r1
 800628e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006296:	f023 010f 	bic.w	r1, r3, #15
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4aa6      	ldr	r2, [pc, #664]	; (8006544 <UART_SetConfig+0x334>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d177      	bne.n	80063a0 <UART_SetConfig+0x190>
 80062b0:	4ba5      	ldr	r3, [pc, #660]	; (8006548 <UART_SetConfig+0x338>)
 80062b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062b8:	2b28      	cmp	r3, #40	; 0x28
 80062ba:	d86d      	bhi.n	8006398 <UART_SetConfig+0x188>
 80062bc:	a201      	add	r2, pc, #4	; (adr r2, 80062c4 <UART_SetConfig+0xb4>)
 80062be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c2:	bf00      	nop
 80062c4:	08006369 	.word	0x08006369
 80062c8:	08006399 	.word	0x08006399
 80062cc:	08006399 	.word	0x08006399
 80062d0:	08006399 	.word	0x08006399
 80062d4:	08006399 	.word	0x08006399
 80062d8:	08006399 	.word	0x08006399
 80062dc:	08006399 	.word	0x08006399
 80062e0:	08006399 	.word	0x08006399
 80062e4:	08006371 	.word	0x08006371
 80062e8:	08006399 	.word	0x08006399
 80062ec:	08006399 	.word	0x08006399
 80062f0:	08006399 	.word	0x08006399
 80062f4:	08006399 	.word	0x08006399
 80062f8:	08006399 	.word	0x08006399
 80062fc:	08006399 	.word	0x08006399
 8006300:	08006399 	.word	0x08006399
 8006304:	08006379 	.word	0x08006379
 8006308:	08006399 	.word	0x08006399
 800630c:	08006399 	.word	0x08006399
 8006310:	08006399 	.word	0x08006399
 8006314:	08006399 	.word	0x08006399
 8006318:	08006399 	.word	0x08006399
 800631c:	08006399 	.word	0x08006399
 8006320:	08006399 	.word	0x08006399
 8006324:	08006381 	.word	0x08006381
 8006328:	08006399 	.word	0x08006399
 800632c:	08006399 	.word	0x08006399
 8006330:	08006399 	.word	0x08006399
 8006334:	08006399 	.word	0x08006399
 8006338:	08006399 	.word	0x08006399
 800633c:	08006399 	.word	0x08006399
 8006340:	08006399 	.word	0x08006399
 8006344:	08006389 	.word	0x08006389
 8006348:	08006399 	.word	0x08006399
 800634c:	08006399 	.word	0x08006399
 8006350:	08006399 	.word	0x08006399
 8006354:	08006399 	.word	0x08006399
 8006358:	08006399 	.word	0x08006399
 800635c:	08006399 	.word	0x08006399
 8006360:	08006399 	.word	0x08006399
 8006364:	08006391 	.word	0x08006391
 8006368:	2301      	movs	r3, #1
 800636a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800636e:	e222      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006370:	2304      	movs	r3, #4
 8006372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006376:	e21e      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006378:	2308      	movs	r3, #8
 800637a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800637e:	e21a      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006380:	2310      	movs	r3, #16
 8006382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006386:	e216      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006388:	2320      	movs	r3, #32
 800638a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800638e:	e212      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006390:	2340      	movs	r3, #64	; 0x40
 8006392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006396:	e20e      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006398:	2380      	movs	r3, #128	; 0x80
 800639a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800639e:	e20a      	b.n	80067b6 <UART_SetConfig+0x5a6>
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a69      	ldr	r2, [pc, #420]	; (800654c <UART_SetConfig+0x33c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d130      	bne.n	800640c <UART_SetConfig+0x1fc>
 80063aa:	4b67      	ldr	r3, [pc, #412]	; (8006548 <UART_SetConfig+0x338>)
 80063ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ae:	f003 0307 	and.w	r3, r3, #7
 80063b2:	2b05      	cmp	r3, #5
 80063b4:	d826      	bhi.n	8006404 <UART_SetConfig+0x1f4>
 80063b6:	a201      	add	r2, pc, #4	; (adr r2, 80063bc <UART_SetConfig+0x1ac>)
 80063b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063bc:	080063d5 	.word	0x080063d5
 80063c0:	080063dd 	.word	0x080063dd
 80063c4:	080063e5 	.word	0x080063e5
 80063c8:	080063ed 	.word	0x080063ed
 80063cc:	080063f5 	.word	0x080063f5
 80063d0:	080063fd 	.word	0x080063fd
 80063d4:	2300      	movs	r3, #0
 80063d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063da:	e1ec      	b.n	80067b6 <UART_SetConfig+0x5a6>
 80063dc:	2304      	movs	r3, #4
 80063de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063e2:	e1e8      	b.n	80067b6 <UART_SetConfig+0x5a6>
 80063e4:	2308      	movs	r3, #8
 80063e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ea:	e1e4      	b.n	80067b6 <UART_SetConfig+0x5a6>
 80063ec:	2310      	movs	r3, #16
 80063ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063f2:	e1e0      	b.n	80067b6 <UART_SetConfig+0x5a6>
 80063f4:	2320      	movs	r3, #32
 80063f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063fa:	e1dc      	b.n	80067b6 <UART_SetConfig+0x5a6>
 80063fc:	2340      	movs	r3, #64	; 0x40
 80063fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006402:	e1d8      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006404:	2380      	movs	r3, #128	; 0x80
 8006406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800640a:	e1d4      	b.n	80067b6 <UART_SetConfig+0x5a6>
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a4f      	ldr	r2, [pc, #316]	; (8006550 <UART_SetConfig+0x340>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d130      	bne.n	8006478 <UART_SetConfig+0x268>
 8006416:	4b4c      	ldr	r3, [pc, #304]	; (8006548 <UART_SetConfig+0x338>)
 8006418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641a:	f003 0307 	and.w	r3, r3, #7
 800641e:	2b05      	cmp	r3, #5
 8006420:	d826      	bhi.n	8006470 <UART_SetConfig+0x260>
 8006422:	a201      	add	r2, pc, #4	; (adr r2, 8006428 <UART_SetConfig+0x218>)
 8006424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006428:	08006441 	.word	0x08006441
 800642c:	08006449 	.word	0x08006449
 8006430:	08006451 	.word	0x08006451
 8006434:	08006459 	.word	0x08006459
 8006438:	08006461 	.word	0x08006461
 800643c:	08006469 	.word	0x08006469
 8006440:	2300      	movs	r3, #0
 8006442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006446:	e1b6      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006448:	2304      	movs	r3, #4
 800644a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800644e:	e1b2      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006450:	2308      	movs	r3, #8
 8006452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006456:	e1ae      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006458:	2310      	movs	r3, #16
 800645a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800645e:	e1aa      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006460:	2320      	movs	r3, #32
 8006462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006466:	e1a6      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006468:	2340      	movs	r3, #64	; 0x40
 800646a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800646e:	e1a2      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006470:	2380      	movs	r3, #128	; 0x80
 8006472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006476:	e19e      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a35      	ldr	r2, [pc, #212]	; (8006554 <UART_SetConfig+0x344>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d130      	bne.n	80064e4 <UART_SetConfig+0x2d4>
 8006482:	4b31      	ldr	r3, [pc, #196]	; (8006548 <UART_SetConfig+0x338>)
 8006484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006486:	f003 0307 	and.w	r3, r3, #7
 800648a:	2b05      	cmp	r3, #5
 800648c:	d826      	bhi.n	80064dc <UART_SetConfig+0x2cc>
 800648e:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <UART_SetConfig+0x284>)
 8006490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006494:	080064ad 	.word	0x080064ad
 8006498:	080064b5 	.word	0x080064b5
 800649c:	080064bd 	.word	0x080064bd
 80064a0:	080064c5 	.word	0x080064c5
 80064a4:	080064cd 	.word	0x080064cd
 80064a8:	080064d5 	.word	0x080064d5
 80064ac:	2300      	movs	r3, #0
 80064ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064b2:	e180      	b.n	80067b6 <UART_SetConfig+0x5a6>
 80064b4:	2304      	movs	r3, #4
 80064b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ba:	e17c      	b.n	80067b6 <UART_SetConfig+0x5a6>
 80064bc:	2308      	movs	r3, #8
 80064be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064c2:	e178      	b.n	80067b6 <UART_SetConfig+0x5a6>
 80064c4:	2310      	movs	r3, #16
 80064c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ca:	e174      	b.n	80067b6 <UART_SetConfig+0x5a6>
 80064cc:	2320      	movs	r3, #32
 80064ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064d2:	e170      	b.n	80067b6 <UART_SetConfig+0x5a6>
 80064d4:	2340      	movs	r3, #64	; 0x40
 80064d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064da:	e16c      	b.n	80067b6 <UART_SetConfig+0x5a6>
 80064dc:	2380      	movs	r3, #128	; 0x80
 80064de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064e2:	e168      	b.n	80067b6 <UART_SetConfig+0x5a6>
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a1b      	ldr	r2, [pc, #108]	; (8006558 <UART_SetConfig+0x348>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d142      	bne.n	8006574 <UART_SetConfig+0x364>
 80064ee:	4b16      	ldr	r3, [pc, #88]	; (8006548 <UART_SetConfig+0x338>)
 80064f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f2:	f003 0307 	and.w	r3, r3, #7
 80064f6:	2b05      	cmp	r3, #5
 80064f8:	d838      	bhi.n	800656c <UART_SetConfig+0x35c>
 80064fa:	a201      	add	r2, pc, #4	; (adr r2, 8006500 <UART_SetConfig+0x2f0>)
 80064fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006500:	08006519 	.word	0x08006519
 8006504:	08006521 	.word	0x08006521
 8006508:	08006529 	.word	0x08006529
 800650c:	08006531 	.word	0x08006531
 8006510:	0800655d 	.word	0x0800655d
 8006514:	08006565 	.word	0x08006565
 8006518:	2300      	movs	r3, #0
 800651a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800651e:	e14a      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006520:	2304      	movs	r3, #4
 8006522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006526:	e146      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006528:	2308      	movs	r3, #8
 800652a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800652e:	e142      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006530:	2310      	movs	r3, #16
 8006532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006536:	e13e      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006538:	cfff69f3 	.word	0xcfff69f3
 800653c:	58000c00 	.word	0x58000c00
 8006540:	11fff4ff 	.word	0x11fff4ff
 8006544:	40011000 	.word	0x40011000
 8006548:	58024400 	.word	0x58024400
 800654c:	40004400 	.word	0x40004400
 8006550:	40004800 	.word	0x40004800
 8006554:	40004c00 	.word	0x40004c00
 8006558:	40005000 	.word	0x40005000
 800655c:	2320      	movs	r3, #32
 800655e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006562:	e128      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006564:	2340      	movs	r3, #64	; 0x40
 8006566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800656a:	e124      	b.n	80067b6 <UART_SetConfig+0x5a6>
 800656c:	2380      	movs	r3, #128	; 0x80
 800656e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006572:	e120      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4acb      	ldr	r2, [pc, #812]	; (80068a8 <UART_SetConfig+0x698>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d176      	bne.n	800666c <UART_SetConfig+0x45c>
 800657e:	4bcb      	ldr	r3, [pc, #812]	; (80068ac <UART_SetConfig+0x69c>)
 8006580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006582:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006586:	2b28      	cmp	r3, #40	; 0x28
 8006588:	d86c      	bhi.n	8006664 <UART_SetConfig+0x454>
 800658a:	a201      	add	r2, pc, #4	; (adr r2, 8006590 <UART_SetConfig+0x380>)
 800658c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006590:	08006635 	.word	0x08006635
 8006594:	08006665 	.word	0x08006665
 8006598:	08006665 	.word	0x08006665
 800659c:	08006665 	.word	0x08006665
 80065a0:	08006665 	.word	0x08006665
 80065a4:	08006665 	.word	0x08006665
 80065a8:	08006665 	.word	0x08006665
 80065ac:	08006665 	.word	0x08006665
 80065b0:	0800663d 	.word	0x0800663d
 80065b4:	08006665 	.word	0x08006665
 80065b8:	08006665 	.word	0x08006665
 80065bc:	08006665 	.word	0x08006665
 80065c0:	08006665 	.word	0x08006665
 80065c4:	08006665 	.word	0x08006665
 80065c8:	08006665 	.word	0x08006665
 80065cc:	08006665 	.word	0x08006665
 80065d0:	08006645 	.word	0x08006645
 80065d4:	08006665 	.word	0x08006665
 80065d8:	08006665 	.word	0x08006665
 80065dc:	08006665 	.word	0x08006665
 80065e0:	08006665 	.word	0x08006665
 80065e4:	08006665 	.word	0x08006665
 80065e8:	08006665 	.word	0x08006665
 80065ec:	08006665 	.word	0x08006665
 80065f0:	0800664d 	.word	0x0800664d
 80065f4:	08006665 	.word	0x08006665
 80065f8:	08006665 	.word	0x08006665
 80065fc:	08006665 	.word	0x08006665
 8006600:	08006665 	.word	0x08006665
 8006604:	08006665 	.word	0x08006665
 8006608:	08006665 	.word	0x08006665
 800660c:	08006665 	.word	0x08006665
 8006610:	08006655 	.word	0x08006655
 8006614:	08006665 	.word	0x08006665
 8006618:	08006665 	.word	0x08006665
 800661c:	08006665 	.word	0x08006665
 8006620:	08006665 	.word	0x08006665
 8006624:	08006665 	.word	0x08006665
 8006628:	08006665 	.word	0x08006665
 800662c:	08006665 	.word	0x08006665
 8006630:	0800665d 	.word	0x0800665d
 8006634:	2301      	movs	r3, #1
 8006636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800663a:	e0bc      	b.n	80067b6 <UART_SetConfig+0x5a6>
 800663c:	2304      	movs	r3, #4
 800663e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006642:	e0b8      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006644:	2308      	movs	r3, #8
 8006646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800664a:	e0b4      	b.n	80067b6 <UART_SetConfig+0x5a6>
 800664c:	2310      	movs	r3, #16
 800664e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006652:	e0b0      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006654:	2320      	movs	r3, #32
 8006656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800665a:	e0ac      	b.n	80067b6 <UART_SetConfig+0x5a6>
 800665c:	2340      	movs	r3, #64	; 0x40
 800665e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006662:	e0a8      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006664:	2380      	movs	r3, #128	; 0x80
 8006666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800666a:	e0a4      	b.n	80067b6 <UART_SetConfig+0x5a6>
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a8f      	ldr	r2, [pc, #572]	; (80068b0 <UART_SetConfig+0x6a0>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d130      	bne.n	80066d8 <UART_SetConfig+0x4c8>
 8006676:	4b8d      	ldr	r3, [pc, #564]	; (80068ac <UART_SetConfig+0x69c>)
 8006678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667a:	f003 0307 	and.w	r3, r3, #7
 800667e:	2b05      	cmp	r3, #5
 8006680:	d826      	bhi.n	80066d0 <UART_SetConfig+0x4c0>
 8006682:	a201      	add	r2, pc, #4	; (adr r2, 8006688 <UART_SetConfig+0x478>)
 8006684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006688:	080066a1 	.word	0x080066a1
 800668c:	080066a9 	.word	0x080066a9
 8006690:	080066b1 	.word	0x080066b1
 8006694:	080066b9 	.word	0x080066b9
 8006698:	080066c1 	.word	0x080066c1
 800669c:	080066c9 	.word	0x080066c9
 80066a0:	2300      	movs	r3, #0
 80066a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066a6:	e086      	b.n	80067b6 <UART_SetConfig+0x5a6>
 80066a8:	2304      	movs	r3, #4
 80066aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ae:	e082      	b.n	80067b6 <UART_SetConfig+0x5a6>
 80066b0:	2308      	movs	r3, #8
 80066b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066b6:	e07e      	b.n	80067b6 <UART_SetConfig+0x5a6>
 80066b8:	2310      	movs	r3, #16
 80066ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066be:	e07a      	b.n	80067b6 <UART_SetConfig+0x5a6>
 80066c0:	2320      	movs	r3, #32
 80066c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066c6:	e076      	b.n	80067b6 <UART_SetConfig+0x5a6>
 80066c8:	2340      	movs	r3, #64	; 0x40
 80066ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ce:	e072      	b.n	80067b6 <UART_SetConfig+0x5a6>
 80066d0:	2380      	movs	r3, #128	; 0x80
 80066d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066d6:	e06e      	b.n	80067b6 <UART_SetConfig+0x5a6>
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a75      	ldr	r2, [pc, #468]	; (80068b4 <UART_SetConfig+0x6a4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d130      	bne.n	8006744 <UART_SetConfig+0x534>
 80066e2:	4b72      	ldr	r3, [pc, #456]	; (80068ac <UART_SetConfig+0x69c>)
 80066e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	2b05      	cmp	r3, #5
 80066ec:	d826      	bhi.n	800673c <UART_SetConfig+0x52c>
 80066ee:	a201      	add	r2, pc, #4	; (adr r2, 80066f4 <UART_SetConfig+0x4e4>)
 80066f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f4:	0800670d 	.word	0x0800670d
 80066f8:	08006715 	.word	0x08006715
 80066fc:	0800671d 	.word	0x0800671d
 8006700:	08006725 	.word	0x08006725
 8006704:	0800672d 	.word	0x0800672d
 8006708:	08006735 	.word	0x08006735
 800670c:	2300      	movs	r3, #0
 800670e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006712:	e050      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006714:	2304      	movs	r3, #4
 8006716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800671a:	e04c      	b.n	80067b6 <UART_SetConfig+0x5a6>
 800671c:	2308      	movs	r3, #8
 800671e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006722:	e048      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006724:	2310      	movs	r3, #16
 8006726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800672a:	e044      	b.n	80067b6 <UART_SetConfig+0x5a6>
 800672c:	2320      	movs	r3, #32
 800672e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006732:	e040      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006734:	2340      	movs	r3, #64	; 0x40
 8006736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800673a:	e03c      	b.n	80067b6 <UART_SetConfig+0x5a6>
 800673c:	2380      	movs	r3, #128	; 0x80
 800673e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006742:	e038      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a5b      	ldr	r2, [pc, #364]	; (80068b8 <UART_SetConfig+0x6a8>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d130      	bne.n	80067b0 <UART_SetConfig+0x5a0>
 800674e:	4b57      	ldr	r3, [pc, #348]	; (80068ac <UART_SetConfig+0x69c>)
 8006750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	2b05      	cmp	r3, #5
 8006758:	d826      	bhi.n	80067a8 <UART_SetConfig+0x598>
 800675a:	a201      	add	r2, pc, #4	; (adr r2, 8006760 <UART_SetConfig+0x550>)
 800675c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006760:	08006779 	.word	0x08006779
 8006764:	08006781 	.word	0x08006781
 8006768:	08006789 	.word	0x08006789
 800676c:	08006791 	.word	0x08006791
 8006770:	08006799 	.word	0x08006799
 8006774:	080067a1 	.word	0x080067a1
 8006778:	2302      	movs	r3, #2
 800677a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800677e:	e01a      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006780:	2304      	movs	r3, #4
 8006782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006786:	e016      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006788:	2308      	movs	r3, #8
 800678a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678e:	e012      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006790:	2310      	movs	r3, #16
 8006792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006796:	e00e      	b.n	80067b6 <UART_SetConfig+0x5a6>
 8006798:	2320      	movs	r3, #32
 800679a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800679e:	e00a      	b.n	80067b6 <UART_SetConfig+0x5a6>
 80067a0:	2340      	movs	r3, #64	; 0x40
 80067a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067a6:	e006      	b.n	80067b6 <UART_SetConfig+0x5a6>
 80067a8:	2380      	movs	r3, #128	; 0x80
 80067aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ae:	e002      	b.n	80067b6 <UART_SetConfig+0x5a6>
 80067b0:	2380      	movs	r3, #128	; 0x80
 80067b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a3f      	ldr	r2, [pc, #252]	; (80068b8 <UART_SetConfig+0x6a8>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	f040 80f8 	bne.w	80069b2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80067c6:	2b20      	cmp	r3, #32
 80067c8:	dc46      	bgt.n	8006858 <UART_SetConfig+0x648>
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	f2c0 8082 	blt.w	80068d4 <UART_SetConfig+0x6c4>
 80067d0:	3b02      	subs	r3, #2
 80067d2:	2b1e      	cmp	r3, #30
 80067d4:	d87e      	bhi.n	80068d4 <UART_SetConfig+0x6c4>
 80067d6:	a201      	add	r2, pc, #4	; (adr r2, 80067dc <UART_SetConfig+0x5cc>)
 80067d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067dc:	0800685f 	.word	0x0800685f
 80067e0:	080068d5 	.word	0x080068d5
 80067e4:	08006867 	.word	0x08006867
 80067e8:	080068d5 	.word	0x080068d5
 80067ec:	080068d5 	.word	0x080068d5
 80067f0:	080068d5 	.word	0x080068d5
 80067f4:	08006877 	.word	0x08006877
 80067f8:	080068d5 	.word	0x080068d5
 80067fc:	080068d5 	.word	0x080068d5
 8006800:	080068d5 	.word	0x080068d5
 8006804:	080068d5 	.word	0x080068d5
 8006808:	080068d5 	.word	0x080068d5
 800680c:	080068d5 	.word	0x080068d5
 8006810:	080068d5 	.word	0x080068d5
 8006814:	08006887 	.word	0x08006887
 8006818:	080068d5 	.word	0x080068d5
 800681c:	080068d5 	.word	0x080068d5
 8006820:	080068d5 	.word	0x080068d5
 8006824:	080068d5 	.word	0x080068d5
 8006828:	080068d5 	.word	0x080068d5
 800682c:	080068d5 	.word	0x080068d5
 8006830:	080068d5 	.word	0x080068d5
 8006834:	080068d5 	.word	0x080068d5
 8006838:	080068d5 	.word	0x080068d5
 800683c:	080068d5 	.word	0x080068d5
 8006840:	080068d5 	.word	0x080068d5
 8006844:	080068d5 	.word	0x080068d5
 8006848:	080068d5 	.word	0x080068d5
 800684c:	080068d5 	.word	0x080068d5
 8006850:	080068d5 	.word	0x080068d5
 8006854:	080068c7 	.word	0x080068c7
 8006858:	2b40      	cmp	r3, #64	; 0x40
 800685a:	d037      	beq.n	80068cc <UART_SetConfig+0x6bc>
 800685c:	e03a      	b.n	80068d4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800685e:	f7fe f977 	bl	8004b50 <HAL_RCCEx_GetD3PCLK1Freq>
 8006862:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006864:	e03c      	b.n	80068e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800686a:	4618      	mov	r0, r3
 800686c:	f7fe f986 	bl	8004b7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006874:	e034      	b.n	80068e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006876:	f107 0318 	add.w	r3, r7, #24
 800687a:	4618      	mov	r0, r3
 800687c:	f7fe fad2 	bl	8004e24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006884:	e02c      	b.n	80068e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006886:	4b09      	ldr	r3, [pc, #36]	; (80068ac <UART_SetConfig+0x69c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0320 	and.w	r3, r3, #32
 800688e:	2b00      	cmp	r3, #0
 8006890:	d016      	beq.n	80068c0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006892:	4b06      	ldr	r3, [pc, #24]	; (80068ac <UART_SetConfig+0x69c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	08db      	lsrs	r3, r3, #3
 8006898:	f003 0303 	and.w	r3, r3, #3
 800689c:	4a07      	ldr	r2, [pc, #28]	; (80068bc <UART_SetConfig+0x6ac>)
 800689e:	fa22 f303 	lsr.w	r3, r2, r3
 80068a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80068a4:	e01c      	b.n	80068e0 <UART_SetConfig+0x6d0>
 80068a6:	bf00      	nop
 80068a8:	40011400 	.word	0x40011400
 80068ac:	58024400 	.word	0x58024400
 80068b0:	40007800 	.word	0x40007800
 80068b4:	40007c00 	.word	0x40007c00
 80068b8:	58000c00 	.word	0x58000c00
 80068bc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80068c0:	4b9d      	ldr	r3, [pc, #628]	; (8006b38 <UART_SetConfig+0x928>)
 80068c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068c4:	e00c      	b.n	80068e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80068c6:	4b9d      	ldr	r3, [pc, #628]	; (8006b3c <UART_SetConfig+0x92c>)
 80068c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068ca:	e009      	b.n	80068e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068d2:	e005      	b.n	80068e0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80068de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 81de 	beq.w	8006ca4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ec:	4a94      	ldr	r2, [pc, #592]	; (8006b40 <UART_SetConfig+0x930>)
 80068ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068f2:	461a      	mov	r2, r3
 80068f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80068fa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	4613      	mov	r3, r2
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	4413      	add	r3, r2
 8006906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006908:	429a      	cmp	r2, r3
 800690a:	d305      	bcc.n	8006918 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006914:	429a      	cmp	r2, r3
 8006916:	d903      	bls.n	8006920 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800691e:	e1c1      	b.n	8006ca4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006922:	2200      	movs	r2, #0
 8006924:	60bb      	str	r3, [r7, #8]
 8006926:	60fa      	str	r2, [r7, #12]
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692c:	4a84      	ldr	r2, [pc, #528]	; (8006b40 <UART_SetConfig+0x930>)
 800692e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006932:	b29b      	uxth	r3, r3
 8006934:	2200      	movs	r2, #0
 8006936:	603b      	str	r3, [r7, #0]
 8006938:	607a      	str	r2, [r7, #4]
 800693a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800693e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006942:	f7f9 fd1d 	bl	8000380 <__aeabi_uldivmod>
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	4610      	mov	r0, r2
 800694c:	4619      	mov	r1, r3
 800694e:	f04f 0200 	mov.w	r2, #0
 8006952:	f04f 0300 	mov.w	r3, #0
 8006956:	020b      	lsls	r3, r1, #8
 8006958:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800695c:	0202      	lsls	r2, r0, #8
 800695e:	6979      	ldr	r1, [r7, #20]
 8006960:	6849      	ldr	r1, [r1, #4]
 8006962:	0849      	lsrs	r1, r1, #1
 8006964:	2000      	movs	r0, #0
 8006966:	460c      	mov	r4, r1
 8006968:	4605      	mov	r5, r0
 800696a:	eb12 0804 	adds.w	r8, r2, r4
 800696e:	eb43 0905 	adc.w	r9, r3, r5
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	469a      	mov	sl, r3
 800697a:	4693      	mov	fp, r2
 800697c:	4652      	mov	r2, sl
 800697e:	465b      	mov	r3, fp
 8006980:	4640      	mov	r0, r8
 8006982:	4649      	mov	r1, r9
 8006984:	f7f9 fcfc 	bl	8000380 <__aeabi_uldivmod>
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	4613      	mov	r3, r2
 800698e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006996:	d308      	bcc.n	80069aa <UART_SetConfig+0x79a>
 8006998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800699e:	d204      	bcs.n	80069aa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069a6:	60da      	str	r2, [r3, #12]
 80069a8:	e17c      	b.n	8006ca4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80069b0:	e178      	b.n	8006ca4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ba:	f040 80c5 	bne.w	8006b48 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80069be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80069c2:	2b20      	cmp	r3, #32
 80069c4:	dc48      	bgt.n	8006a58 <UART_SetConfig+0x848>
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	db7b      	blt.n	8006ac2 <UART_SetConfig+0x8b2>
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d879      	bhi.n	8006ac2 <UART_SetConfig+0x8b2>
 80069ce:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <UART_SetConfig+0x7c4>)
 80069d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d4:	08006a5f 	.word	0x08006a5f
 80069d8:	08006a67 	.word	0x08006a67
 80069dc:	08006ac3 	.word	0x08006ac3
 80069e0:	08006ac3 	.word	0x08006ac3
 80069e4:	08006a6f 	.word	0x08006a6f
 80069e8:	08006ac3 	.word	0x08006ac3
 80069ec:	08006ac3 	.word	0x08006ac3
 80069f0:	08006ac3 	.word	0x08006ac3
 80069f4:	08006a7f 	.word	0x08006a7f
 80069f8:	08006ac3 	.word	0x08006ac3
 80069fc:	08006ac3 	.word	0x08006ac3
 8006a00:	08006ac3 	.word	0x08006ac3
 8006a04:	08006ac3 	.word	0x08006ac3
 8006a08:	08006ac3 	.word	0x08006ac3
 8006a0c:	08006ac3 	.word	0x08006ac3
 8006a10:	08006ac3 	.word	0x08006ac3
 8006a14:	08006a8f 	.word	0x08006a8f
 8006a18:	08006ac3 	.word	0x08006ac3
 8006a1c:	08006ac3 	.word	0x08006ac3
 8006a20:	08006ac3 	.word	0x08006ac3
 8006a24:	08006ac3 	.word	0x08006ac3
 8006a28:	08006ac3 	.word	0x08006ac3
 8006a2c:	08006ac3 	.word	0x08006ac3
 8006a30:	08006ac3 	.word	0x08006ac3
 8006a34:	08006ac3 	.word	0x08006ac3
 8006a38:	08006ac3 	.word	0x08006ac3
 8006a3c:	08006ac3 	.word	0x08006ac3
 8006a40:	08006ac3 	.word	0x08006ac3
 8006a44:	08006ac3 	.word	0x08006ac3
 8006a48:	08006ac3 	.word	0x08006ac3
 8006a4c:	08006ac3 	.word	0x08006ac3
 8006a50:	08006ac3 	.word	0x08006ac3
 8006a54:	08006ab5 	.word	0x08006ab5
 8006a58:	2b40      	cmp	r3, #64	; 0x40
 8006a5a:	d02e      	beq.n	8006aba <UART_SetConfig+0x8aa>
 8006a5c:	e031      	b.n	8006ac2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a5e:	f7fc fe41 	bl	80036e4 <HAL_RCC_GetPCLK1Freq>
 8006a62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006a64:	e033      	b.n	8006ace <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a66:	f7fc fe53 	bl	8003710 <HAL_RCC_GetPCLK2Freq>
 8006a6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006a6c:	e02f      	b.n	8006ace <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fe f882 	bl	8004b7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a7c:	e027      	b.n	8006ace <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a7e:	f107 0318 	add.w	r3, r7, #24
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fe f9ce 	bl	8004e24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a8c:	e01f      	b.n	8006ace <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a8e:	4b2d      	ldr	r3, [pc, #180]	; (8006b44 <UART_SetConfig+0x934>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0320 	and.w	r3, r3, #32
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d009      	beq.n	8006aae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a9a:	4b2a      	ldr	r3, [pc, #168]	; (8006b44 <UART_SetConfig+0x934>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	08db      	lsrs	r3, r3, #3
 8006aa0:	f003 0303 	and.w	r3, r3, #3
 8006aa4:	4a24      	ldr	r2, [pc, #144]	; (8006b38 <UART_SetConfig+0x928>)
 8006aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8006aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006aac:	e00f      	b.n	8006ace <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006aae:	4b22      	ldr	r3, [pc, #136]	; (8006b38 <UART_SetConfig+0x928>)
 8006ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ab2:	e00c      	b.n	8006ace <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ab4:	4b21      	ldr	r3, [pc, #132]	; (8006b3c <UART_SetConfig+0x92c>)
 8006ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ab8:	e009      	b.n	8006ace <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006abe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ac0:	e005      	b.n	8006ace <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006acc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 80e7 	beq.w	8006ca4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ada:	4a19      	ldr	r2, [pc, #100]	; (8006b40 <UART_SetConfig+0x930>)
 8006adc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ae4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ae8:	005a      	lsls	r2, r3, #1
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	085b      	lsrs	r3, r3, #1
 8006af0:	441a      	add	r2, r3
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006afa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afe:	2b0f      	cmp	r3, #15
 8006b00:	d916      	bls.n	8006b30 <UART_SetConfig+0x920>
 8006b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b08:	d212      	bcs.n	8006b30 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	f023 030f 	bic.w	r3, r3, #15
 8006b12:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b16:	085b      	lsrs	r3, r3, #1
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	f003 0307 	and.w	r3, r3, #7
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b22:	4313      	orrs	r3, r2
 8006b24:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006b2c:	60da      	str	r2, [r3, #12]
 8006b2e:	e0b9      	b.n	8006ca4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006b36:	e0b5      	b.n	8006ca4 <UART_SetConfig+0xa94>
 8006b38:	03d09000 	.word	0x03d09000
 8006b3c:	003d0900 	.word	0x003d0900
 8006b40:	0800932c 	.word	0x0800932c
 8006b44:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006b4c:	2b20      	cmp	r3, #32
 8006b4e:	dc49      	bgt.n	8006be4 <UART_SetConfig+0x9d4>
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	db7c      	blt.n	8006c4e <UART_SetConfig+0xa3e>
 8006b54:	2b20      	cmp	r3, #32
 8006b56:	d87a      	bhi.n	8006c4e <UART_SetConfig+0xa3e>
 8006b58:	a201      	add	r2, pc, #4	; (adr r2, 8006b60 <UART_SetConfig+0x950>)
 8006b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5e:	bf00      	nop
 8006b60:	08006beb 	.word	0x08006beb
 8006b64:	08006bf3 	.word	0x08006bf3
 8006b68:	08006c4f 	.word	0x08006c4f
 8006b6c:	08006c4f 	.word	0x08006c4f
 8006b70:	08006bfb 	.word	0x08006bfb
 8006b74:	08006c4f 	.word	0x08006c4f
 8006b78:	08006c4f 	.word	0x08006c4f
 8006b7c:	08006c4f 	.word	0x08006c4f
 8006b80:	08006c0b 	.word	0x08006c0b
 8006b84:	08006c4f 	.word	0x08006c4f
 8006b88:	08006c4f 	.word	0x08006c4f
 8006b8c:	08006c4f 	.word	0x08006c4f
 8006b90:	08006c4f 	.word	0x08006c4f
 8006b94:	08006c4f 	.word	0x08006c4f
 8006b98:	08006c4f 	.word	0x08006c4f
 8006b9c:	08006c4f 	.word	0x08006c4f
 8006ba0:	08006c1b 	.word	0x08006c1b
 8006ba4:	08006c4f 	.word	0x08006c4f
 8006ba8:	08006c4f 	.word	0x08006c4f
 8006bac:	08006c4f 	.word	0x08006c4f
 8006bb0:	08006c4f 	.word	0x08006c4f
 8006bb4:	08006c4f 	.word	0x08006c4f
 8006bb8:	08006c4f 	.word	0x08006c4f
 8006bbc:	08006c4f 	.word	0x08006c4f
 8006bc0:	08006c4f 	.word	0x08006c4f
 8006bc4:	08006c4f 	.word	0x08006c4f
 8006bc8:	08006c4f 	.word	0x08006c4f
 8006bcc:	08006c4f 	.word	0x08006c4f
 8006bd0:	08006c4f 	.word	0x08006c4f
 8006bd4:	08006c4f 	.word	0x08006c4f
 8006bd8:	08006c4f 	.word	0x08006c4f
 8006bdc:	08006c4f 	.word	0x08006c4f
 8006be0:	08006c41 	.word	0x08006c41
 8006be4:	2b40      	cmp	r3, #64	; 0x40
 8006be6:	d02e      	beq.n	8006c46 <UART_SetConfig+0xa36>
 8006be8:	e031      	b.n	8006c4e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bea:	f7fc fd7b 	bl	80036e4 <HAL_RCC_GetPCLK1Freq>
 8006bee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006bf0:	e033      	b.n	8006c5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bf2:	f7fc fd8d 	bl	8003710 <HAL_RCC_GetPCLK2Freq>
 8006bf6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006bf8:	e02f      	b.n	8006c5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fd ffbc 	bl	8004b7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c08:	e027      	b.n	8006c5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c0a:	f107 0318 	add.w	r3, r7, #24
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7fe f908 	bl	8004e24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c18:	e01f      	b.n	8006c5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c1a:	4b2d      	ldr	r3, [pc, #180]	; (8006cd0 <UART_SetConfig+0xac0>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0320 	and.w	r3, r3, #32
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d009      	beq.n	8006c3a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c26:	4b2a      	ldr	r3, [pc, #168]	; (8006cd0 <UART_SetConfig+0xac0>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	08db      	lsrs	r3, r3, #3
 8006c2c:	f003 0303 	and.w	r3, r3, #3
 8006c30:	4a28      	ldr	r2, [pc, #160]	; (8006cd4 <UART_SetConfig+0xac4>)
 8006c32:	fa22 f303 	lsr.w	r3, r2, r3
 8006c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c38:	e00f      	b.n	8006c5a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006c3a:	4b26      	ldr	r3, [pc, #152]	; (8006cd4 <UART_SetConfig+0xac4>)
 8006c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c3e:	e00c      	b.n	8006c5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c40:	4b25      	ldr	r3, [pc, #148]	; (8006cd8 <UART_SetConfig+0xac8>)
 8006c42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c44:	e009      	b.n	8006c5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c4c:	e005      	b.n	8006c5a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006c58:	bf00      	nop
    }

    if (pclk != 0U)
 8006c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d021      	beq.n	8006ca4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c64:	4a1d      	ldr	r2, [pc, #116]	; (8006cdc <UART_SetConfig+0xacc>)
 8006c66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	085b      	lsrs	r3, r3, #1
 8006c78:	441a      	add	r2, r3
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c82:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c86:	2b0f      	cmp	r3, #15
 8006c88:	d909      	bls.n	8006c9e <UART_SetConfig+0xa8e>
 8006c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c90:	d205      	bcs.n	8006c9e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	60da      	str	r2, [r3, #12]
 8006c9c:	e002      	b.n	8006ca4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006cc0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3748      	adds	r7, #72	; 0x48
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cce:	bf00      	nop
 8006cd0:	58024400 	.word	0x58024400
 8006cd4:	03d09000 	.word	0x03d09000
 8006cd8:	003d0900 	.word	0x003d0900
 8006cdc:	0800932c 	.word	0x0800932c

08006ce0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00a      	beq.n	8006d0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00a      	beq.n	8006d2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d30:	f003 0304 	and.w	r3, r3, #4
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00a      	beq.n	8006d4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d52:	f003 0308 	and.w	r3, r3, #8
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d74:	f003 0310 	and.w	r3, r3, #16
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d96:	f003 0320 	and.w	r3, r3, #32
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00a      	beq.n	8006db4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d01a      	beq.n	8006df6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dde:	d10a      	bne.n	8006df6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	430a      	orrs	r2, r1
 8006e16:	605a      	str	r2, [r3, #4]
  }
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b098      	sub	sp, #96	; 0x60
 8006e28:	af02      	add	r7, sp, #8
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e34:	f7fa fb90 	bl	8001558 <HAL_GetTick>
 8006e38:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0308 	and.w	r3, r3, #8
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d12f      	bne.n	8006ea8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e50:	2200      	movs	r2, #0
 8006e52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f88e 	bl	8006f78 <UART_WaitOnFlagUntilTimeout>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d022      	beq.n	8006ea8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6a:	e853 3f00 	ldrex	r3, [r3]
 8006e6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e76:	653b      	str	r3, [r7, #80]	; 0x50
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e80:	647b      	str	r3, [r7, #68]	; 0x44
 8006e82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e88:	e841 2300 	strex	r3, r2, [r1]
 8006e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e6      	bne.n	8006e62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2220      	movs	r2, #32
 8006e98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e063      	b.n	8006f70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0304 	and.w	r3, r3, #4
 8006eb2:	2b04      	cmp	r3, #4
 8006eb4:	d149      	bne.n	8006f4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eb6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f857 	bl	8006f78 <UART_WaitOnFlagUntilTimeout>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d03c      	beq.n	8006f4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed8:	e853 3f00 	ldrex	r3, [r3]
 8006edc:	623b      	str	r3, [r7, #32]
   return(result);
 8006ede:	6a3b      	ldr	r3, [r7, #32]
 8006ee0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eee:	633b      	str	r3, [r7, #48]	; 0x30
 8006ef0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e6      	bne.n	8006ed0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3308      	adds	r3, #8
 8006f08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	e853 3f00 	ldrex	r3, [r3]
 8006f10:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f023 0301 	bic.w	r3, r3, #1
 8006f18:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3308      	adds	r3, #8
 8006f20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f22:	61fa      	str	r2, [r7, #28]
 8006f24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f26:	69b9      	ldr	r1, [r7, #24]
 8006f28:	69fa      	ldr	r2, [r7, #28]
 8006f2a:	e841 2300 	strex	r3, r2, [r1]
 8006f2e:	617b      	str	r3, [r7, #20]
   return(result);
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1e5      	bne.n	8006f02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e012      	b.n	8006f70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2220      	movs	r2, #32
 8006f56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3758      	adds	r7, #88	; 0x58
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	603b      	str	r3, [r7, #0]
 8006f84:	4613      	mov	r3, r2
 8006f86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f88:	e049      	b.n	800701e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f90:	d045      	beq.n	800701e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f92:	f7fa fae1 	bl	8001558 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	69ba      	ldr	r2, [r7, #24]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d302      	bcc.n	8006fa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e048      	b.n	800703e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0304 	and.w	r3, r3, #4
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d031      	beq.n	800701e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	69db      	ldr	r3, [r3, #28]
 8006fc0:	f003 0308 	and.w	r3, r3, #8
 8006fc4:	2b08      	cmp	r3, #8
 8006fc6:	d110      	bne.n	8006fea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2208      	movs	r2, #8
 8006fce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f000 f95b 	bl	800728c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2208      	movs	r2, #8
 8006fda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e029      	b.n	800703e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ff8:	d111      	bne.n	800701e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007002:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 f941 	bl	800728c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2220      	movs	r2, #32
 800700e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e00f      	b.n	800703e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69da      	ldr	r2, [r3, #28]
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	4013      	ands	r3, r2
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	429a      	cmp	r2, r3
 800702c:	bf0c      	ite	eq
 800702e:	2301      	moveq	r3, #1
 8007030:	2300      	movne	r3, #0
 8007032:	b2db      	uxtb	r3, r3
 8007034:	461a      	mov	r2, r3
 8007036:	79fb      	ldrb	r3, [r7, #7]
 8007038:	429a      	cmp	r2, r3
 800703a:	d0a6      	beq.n	8006f8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
	...

08007048 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007048:	b480      	push	{r7}
 800704a:	b0a3      	sub	sp, #140	; 0x8c
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	4613      	mov	r3, r2
 8007054:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	88fa      	ldrh	r2, [r7, #6]
 8007060:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	88fa      	ldrh	r2, [r7, #6]
 8007068:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800707a:	d10e      	bne.n	800709a <UART_Start_Receive_IT+0x52>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d105      	bne.n	8007090 <UART_Start_Receive_IT+0x48>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f240 12ff 	movw	r2, #511	; 0x1ff
 800708a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800708e:	e02d      	b.n	80070ec <UART_Start_Receive_IT+0xa4>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	22ff      	movs	r2, #255	; 0xff
 8007094:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007098:	e028      	b.n	80070ec <UART_Start_Receive_IT+0xa4>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10d      	bne.n	80070be <UART_Start_Receive_IT+0x76>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d104      	bne.n	80070b4 <UART_Start_Receive_IT+0x6c>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	22ff      	movs	r2, #255	; 0xff
 80070ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80070b2:	e01b      	b.n	80070ec <UART_Start_Receive_IT+0xa4>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	227f      	movs	r2, #127	; 0x7f
 80070b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80070bc:	e016      	b.n	80070ec <UART_Start_Receive_IT+0xa4>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070c6:	d10d      	bne.n	80070e4 <UART_Start_Receive_IT+0x9c>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d104      	bne.n	80070da <UART_Start_Receive_IT+0x92>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	227f      	movs	r2, #127	; 0x7f
 80070d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80070d8:	e008      	b.n	80070ec <UART_Start_Receive_IT+0xa4>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	223f      	movs	r2, #63	; 0x3f
 80070de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80070e2:	e003      	b.n	80070ec <UART_Start_Receive_IT+0xa4>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2222      	movs	r2, #34	; 0x22
 80070f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3308      	adds	r3, #8
 8007102:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007106:	e853 3f00 	ldrex	r3, [r3]
 800710a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800710c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800710e:	f043 0301 	orr.w	r3, r3, #1
 8007112:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3308      	adds	r3, #8
 800711c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007120:	673a      	str	r2, [r7, #112]	; 0x70
 8007122:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007124:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007126:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007128:	e841 2300 	strex	r3, r2, [r1]
 800712c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800712e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1e3      	bne.n	80070fc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800713c:	d14f      	bne.n	80071de <UART_Start_Receive_IT+0x196>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007144:	88fa      	ldrh	r2, [r7, #6]
 8007146:	429a      	cmp	r2, r3
 8007148:	d349      	bcc.n	80071de <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007152:	d107      	bne.n	8007164 <UART_Start_Receive_IT+0x11c>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d103      	bne.n	8007164 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4a47      	ldr	r2, [pc, #284]	; (800727c <UART_Start_Receive_IT+0x234>)
 8007160:	675a      	str	r2, [r3, #116]	; 0x74
 8007162:	e002      	b.n	800716a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	4a46      	ldr	r2, [pc, #280]	; (8007280 <UART_Start_Receive_IT+0x238>)
 8007168:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d01a      	beq.n	80071a8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800717a:	e853 3f00 	ldrex	r3, [r3]
 800717e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007186:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	461a      	mov	r2, r3
 8007190:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007194:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007196:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007198:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800719a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800719c:	e841 2300 	strex	r3, r2, [r1]
 80071a0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80071a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1e4      	bne.n	8007172 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3308      	adds	r3, #8
 80071ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b2:	e853 3f00 	ldrex	r3, [r3]
 80071b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	3308      	adds	r3, #8
 80071c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80071c8:	64ba      	str	r2, [r7, #72]	; 0x48
 80071ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071d0:	e841 2300 	strex	r3, r2, [r1]
 80071d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e5      	bne.n	80071a8 <UART_Start_Receive_IT+0x160>
 80071dc:	e046      	b.n	800726c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e6:	d107      	bne.n	80071f8 <UART_Start_Receive_IT+0x1b0>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d103      	bne.n	80071f8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4a24      	ldr	r2, [pc, #144]	; (8007284 <UART_Start_Receive_IT+0x23c>)
 80071f4:	675a      	str	r2, [r3, #116]	; 0x74
 80071f6:	e002      	b.n	80071fe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	4a23      	ldr	r2, [pc, #140]	; (8007288 <UART_Start_Receive_IT+0x240>)
 80071fc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d019      	beq.n	800723a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720e:	e853 3f00 	ldrex	r3, [r3]
 8007212:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800721a:	677b      	str	r3, [r7, #116]	; 0x74
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	461a      	mov	r2, r3
 8007222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007224:	637b      	str	r3, [r7, #52]	; 0x34
 8007226:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007228:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800722a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800722c:	e841 2300 	strex	r3, r2, [r1]
 8007230:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1e6      	bne.n	8007206 <UART_Start_Receive_IT+0x1be>
 8007238:	e018      	b.n	800726c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	e853 3f00 	ldrex	r3, [r3]
 8007246:	613b      	str	r3, [r7, #16]
   return(result);
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f043 0320 	orr.w	r3, r3, #32
 800724e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	461a      	mov	r2, r3
 8007256:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007258:	623b      	str	r3, [r7, #32]
 800725a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725c:	69f9      	ldr	r1, [r7, #28]
 800725e:	6a3a      	ldr	r2, [r7, #32]
 8007260:	e841 2300 	strex	r3, r2, [r1]
 8007264:	61bb      	str	r3, [r7, #24]
   return(result);
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1e6      	bne.n	800723a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	378c      	adds	r7, #140	; 0x8c
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	08007aad 	.word	0x08007aad
 8007280:	0800774d 	.word	0x0800774d
 8007284:	08007595 	.word	0x08007595
 8007288:	080073dd 	.word	0x080073dd

0800728c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800728c:	b480      	push	{r7}
 800728e:	b095      	sub	sp, #84	; 0x54
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072b2:	643b      	str	r3, [r7, #64]	; 0x40
 80072b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e6      	bne.n	8007294 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3308      	adds	r3, #8
 80072cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	e853 3f00 	ldrex	r3, [r3]
 80072d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80072d6:	69fa      	ldr	r2, [r7, #28]
 80072d8:	4b1e      	ldr	r3, [pc, #120]	; (8007354 <UART_EndRxTransfer+0xc8>)
 80072da:	4013      	ands	r3, r2
 80072dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3308      	adds	r3, #8
 80072e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ee:	e841 2300 	strex	r3, r2, [r1]
 80072f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1e5      	bne.n	80072c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d118      	bne.n	8007334 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	e853 3f00 	ldrex	r3, [r3]
 800730e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	f023 0310 	bic.w	r3, r3, #16
 8007316:	647b      	str	r3, [r7, #68]	; 0x44
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	461a      	mov	r2, r3
 800731e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007320:	61bb      	str	r3, [r7, #24]
 8007322:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007324:	6979      	ldr	r1, [r7, #20]
 8007326:	69ba      	ldr	r2, [r7, #24]
 8007328:	e841 2300 	strex	r3, r2, [r1]
 800732c:	613b      	str	r3, [r7, #16]
   return(result);
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1e6      	bne.n	8007302 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2220      	movs	r2, #32
 8007338:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007348:	bf00      	nop
 800734a:	3754      	adds	r7, #84	; 0x54
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	effffffe 	.word	0xeffffffe

08007358 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007364:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f7fe ff40 	bl	80061fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800737c:	bf00      	nop
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b088      	sub	sp, #32
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	e853 3f00 	ldrex	r3, [r3]
 8007398:	60bb      	str	r3, [r7, #8]
   return(result);
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073a0:	61fb      	str	r3, [r7, #28]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	61bb      	str	r3, [r7, #24]
 80073ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	6979      	ldr	r1, [r7, #20]
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	613b      	str	r3, [r7, #16]
   return(result);
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e6      	bne.n	800738c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7fe ff01 	bl	80061d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073d2:	bf00      	nop
 80073d4:	3720      	adds	r7, #32
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
	...

080073dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b09c      	sub	sp, #112	; 0x70
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80073ea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073f4:	2b22      	cmp	r3, #34	; 0x22
 80073f6:	f040 80be 	bne.w	8007576 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007404:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007408:	b2d9      	uxtb	r1, r3
 800740a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800740e:	b2da      	uxtb	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007414:	400a      	ands	r2, r1
 8007416:	b2d2      	uxtb	r2, r2
 8007418:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741e:	1c5a      	adds	r2, r3, #1
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800742a:	b29b      	uxth	r3, r3
 800742c:	3b01      	subs	r3, #1
 800742e:	b29a      	uxth	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800743c:	b29b      	uxth	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	f040 80a1 	bne.w	8007586 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800744c:	e853 3f00 	ldrex	r3, [r3]
 8007450:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007454:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007458:	66bb      	str	r3, [r7, #104]	; 0x68
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	461a      	mov	r2, r3
 8007460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007462:	65bb      	str	r3, [r7, #88]	; 0x58
 8007464:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007468:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800746a:	e841 2300 	strex	r3, r2, [r1]
 800746e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1e6      	bne.n	8007444 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3308      	adds	r3, #8
 800747c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	e853 3f00 	ldrex	r3, [r3]
 8007484:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007488:	f023 0301 	bic.w	r3, r3, #1
 800748c:	667b      	str	r3, [r7, #100]	; 0x64
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3308      	adds	r3, #8
 8007494:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007496:	647a      	str	r2, [r7, #68]	; 0x44
 8007498:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800749c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e5      	bne.n	8007476 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2220      	movs	r2, #32
 80074ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a33      	ldr	r2, [pc, #204]	; (8007590 <UART_RxISR_8BIT+0x1b4>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d01f      	beq.n	8007508 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d018      	beq.n	8007508 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	e853 3f00 	ldrex	r3, [r3]
 80074e2:	623b      	str	r3, [r7, #32]
   return(result);
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074ea:	663b      	str	r3, [r7, #96]	; 0x60
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	461a      	mov	r2, r3
 80074f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074f4:	633b      	str	r3, [r7, #48]	; 0x30
 80074f6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074fc:	e841 2300 	strex	r3, r2, [r1]
 8007500:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1e6      	bne.n	80074d6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800750c:	2b01      	cmp	r3, #1
 800750e:	d12e      	bne.n	800756e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	e853 3f00 	ldrex	r3, [r3]
 8007522:	60fb      	str	r3, [r7, #12]
   return(result);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f023 0310 	bic.w	r3, r3, #16
 800752a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	461a      	mov	r2, r3
 8007532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007534:	61fb      	str	r3, [r7, #28]
 8007536:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007538:	69b9      	ldr	r1, [r7, #24]
 800753a:	69fa      	ldr	r2, [r7, #28]
 800753c:	e841 2300 	strex	r3, r2, [r1]
 8007540:	617b      	str	r3, [r7, #20]
   return(result);
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1e6      	bne.n	8007516 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	f003 0310 	and.w	r3, r3, #16
 8007552:	2b10      	cmp	r3, #16
 8007554:	d103      	bne.n	800755e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2210      	movs	r2, #16
 800755c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007564:	4619      	mov	r1, r3
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7f9 fc88 	bl	8000e7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800756c:	e00b      	b.n	8007586 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7fe fe3a 	bl	80061e8 <HAL_UART_RxCpltCallback>
}
 8007574:	e007      	b.n	8007586 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	699a      	ldr	r2, [r3, #24]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f042 0208 	orr.w	r2, r2, #8
 8007584:	619a      	str	r2, [r3, #24]
}
 8007586:	bf00      	nop
 8007588:	3770      	adds	r7, #112	; 0x70
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	58000c00 	.word	0x58000c00

08007594 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b09c      	sub	sp, #112	; 0x70
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80075a2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075ac:	2b22      	cmp	r3, #34	; 0x22
 80075ae:	f040 80be 	bne.w	800772e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80075c2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80075c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80075ca:	4013      	ands	r3, r2
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d6:	1c9a      	adds	r2, r3, #2
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	3b01      	subs	r3, #1
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f040 80a1 	bne.w	800773e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007604:	e853 3f00 	ldrex	r3, [r3]
 8007608:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800760a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800760c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007610:	667b      	str	r3, [r7, #100]	; 0x64
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	461a      	mov	r2, r3
 8007618:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800761a:	657b      	str	r3, [r7, #84]	; 0x54
 800761c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007620:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007622:	e841 2300 	strex	r3, r2, [r1]
 8007626:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1e6      	bne.n	80075fc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3308      	adds	r3, #8
 8007634:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007638:	e853 3f00 	ldrex	r3, [r3]
 800763c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	f023 0301 	bic.w	r3, r3, #1
 8007644:	663b      	str	r3, [r7, #96]	; 0x60
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3308      	adds	r3, #8
 800764c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800764e:	643a      	str	r2, [r7, #64]	; 0x40
 8007650:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007652:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007654:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007656:	e841 2300 	strex	r3, r2, [r1]
 800765a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800765c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1e5      	bne.n	800762e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2220      	movs	r2, #32
 8007666:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a33      	ldr	r2, [pc, #204]	; (8007748 <UART_RxISR_16BIT+0x1b4>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d01f      	beq.n	80076c0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d018      	beq.n	80076c0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007694:	6a3b      	ldr	r3, [r7, #32]
 8007696:	e853 3f00 	ldrex	r3, [r3]
 800769a:	61fb      	str	r3, [r7, #28]
   return(result);
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80076a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	461a      	mov	r2, r3
 80076aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076ae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076b4:	e841 2300 	strex	r3, r2, [r1]
 80076b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1e6      	bne.n	800768e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d12e      	bne.n	8007726 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	e853 3f00 	ldrex	r3, [r3]
 80076da:	60bb      	str	r3, [r7, #8]
   return(result);
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	f023 0310 	bic.w	r3, r3, #16
 80076e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	461a      	mov	r2, r3
 80076ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076ec:	61bb      	str	r3, [r7, #24]
 80076ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f0:	6979      	ldr	r1, [r7, #20]
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	e841 2300 	strex	r3, r2, [r1]
 80076f8:	613b      	str	r3, [r7, #16]
   return(result);
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1e6      	bne.n	80076ce <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	69db      	ldr	r3, [r3, #28]
 8007706:	f003 0310 	and.w	r3, r3, #16
 800770a:	2b10      	cmp	r3, #16
 800770c:	d103      	bne.n	8007716 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2210      	movs	r2, #16
 8007714:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7f9 fbac 	bl	8000e7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007724:	e00b      	b.n	800773e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7fe fd5e 	bl	80061e8 <HAL_UART_RxCpltCallback>
}
 800772c:	e007      	b.n	800773e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	699a      	ldr	r2, [r3, #24]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f042 0208 	orr.w	r2, r2, #8
 800773c:	619a      	str	r2, [r3, #24]
}
 800773e:	bf00      	nop
 8007740:	3770      	adds	r7, #112	; 0x70
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	58000c00 	.word	0x58000c00

0800774c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b0ac      	sub	sp, #176	; 0xb0
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800775a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007782:	2b22      	cmp	r3, #34	; 0x22
 8007784:	f040 8180 	bne.w	8007a88 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800778e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007792:	e123      	b.n	80079dc <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800779e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80077a2:	b2d9      	uxtb	r1, r3
 80077a4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ae:	400a      	ands	r2, r1
 80077b0:	b2d2      	uxtb	r2, r2
 80077b2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b8:	1c5a      	adds	r2, r3, #1
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	3b01      	subs	r3, #1
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80077da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077de:	f003 0307 	and.w	r3, r3, #7
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d053      	beq.n	800788e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d011      	beq.n	8007816 <UART_RxISR_8BIT_FIFOEN+0xca>
 80077f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80077f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00b      	beq.n	8007816 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2201      	movs	r2, #1
 8007804:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800780c:	f043 0201 	orr.w	r2, r3, #1
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007816:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800781a:	f003 0302 	and.w	r3, r3, #2
 800781e:	2b00      	cmp	r3, #0
 8007820:	d011      	beq.n	8007846 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00b      	beq.n	8007846 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2202      	movs	r2, #2
 8007834:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800783c:	f043 0204 	orr.w	r2, r3, #4
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007846:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800784a:	f003 0304 	and.w	r3, r3, #4
 800784e:	2b00      	cmp	r3, #0
 8007850:	d011      	beq.n	8007876 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007852:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00b      	beq.n	8007876 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2204      	movs	r2, #4
 8007864:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800786c:	f043 0202 	orr.w	r2, r3, #2
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800787c:	2b00      	cmp	r3, #0
 800787e:	d006      	beq.n	800788e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7fe fcbb 	bl	80061fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007894:	b29b      	uxth	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	f040 80a0 	bne.w	80079dc <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078a4:	e853 3f00 	ldrex	r3, [r3]
 80078a8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80078aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	461a      	mov	r2, r3
 80078ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80078c0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80078c4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80078cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e4      	bne.n	800789c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3308      	adds	r3, #8
 80078d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078dc:	e853 3f00 	ldrex	r3, [r3]
 80078e0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80078e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078e4:	4b6e      	ldr	r3, [pc, #440]	; (8007aa0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80078e6:	4013      	ands	r3, r2
 80078e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3308      	adds	r3, #8
 80078f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078f6:	66ba      	str	r2, [r7, #104]	; 0x68
 80078f8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80078fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078fe:	e841 2300 	strex	r3, r2, [r1]
 8007902:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007904:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1e3      	bne.n	80078d2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2220      	movs	r2, #32
 800790e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a60      	ldr	r2, [pc, #384]	; (8007aa4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d021      	beq.n	800796c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d01a      	beq.n	800796c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800793e:	e853 3f00 	ldrex	r3, [r3]
 8007942:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007946:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800794a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007958:	657b      	str	r3, [r7, #84]	; 0x54
 800795a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800795e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007960:	e841 2300 	strex	r3, r2, [r1]
 8007964:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1e4      	bne.n	8007936 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007970:	2b01      	cmp	r3, #1
 8007972:	d130      	bne.n	80079d6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798a:	f023 0310 	bic.w	r3, r3, #16
 800798e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	461a      	mov	r2, r3
 8007998:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800799c:	643b      	str	r3, [r7, #64]	; 0x40
 800799e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079a4:	e841 2300 	strex	r3, r2, [r1]
 80079a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e4      	bne.n	800797a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	69db      	ldr	r3, [r3, #28]
 80079b6:	f003 0310 	and.w	r3, r3, #16
 80079ba:	2b10      	cmp	r3, #16
 80079bc:	d103      	bne.n	80079c6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2210      	movs	r2, #16
 80079c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079cc:	4619      	mov	r1, r3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7f9 fa54 	bl	8000e7c <HAL_UARTEx_RxEventCallback>
 80079d4:	e002      	b.n	80079dc <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7fe fc06 	bl	80061e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079dc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d006      	beq.n	80079f2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80079e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079e8:	f003 0320 	and.w	r3, r3, #32
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f47f aed1 	bne.w	8007794 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079f8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80079fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d049      	beq.n	8007a98 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007a0a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d242      	bcs.n	8007a98 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3308      	adds	r3, #8
 8007a18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	e853 3f00 	ldrex	r3, [r3]
 8007a20:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3308      	adds	r3, #8
 8007a32:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007a36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a3e:	e841 2300 	strex	r3, r2, [r1]
 8007a42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1e3      	bne.n	8007a12 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a16      	ldr	r2, [pc, #88]	; (8007aa8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007a4e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	f043 0320 	orr.w	r3, r3, #32
 8007a64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a72:	61bb      	str	r3, [r7, #24]
 8007a74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	6979      	ldr	r1, [r7, #20]
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e4      	bne.n	8007a50 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a86:	e007      	b.n	8007a98 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	699a      	ldr	r2, [r3, #24]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f042 0208 	orr.w	r2, r2, #8
 8007a96:	619a      	str	r2, [r3, #24]
}
 8007a98:	bf00      	nop
 8007a9a:	37b0      	adds	r7, #176	; 0xb0
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	effffffe 	.word	0xeffffffe
 8007aa4:	58000c00 	.word	0x58000c00
 8007aa8:	080073dd 	.word	0x080073dd

08007aac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b0ae      	sub	sp, #184	; 0xb8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007aba:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	69db      	ldr	r3, [r3, #28]
 8007ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ae2:	2b22      	cmp	r3, #34	; 0x22
 8007ae4:	f040 8184 	bne.w	8007df0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007aee:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007af2:	e127      	b.n	8007d44 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afa:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007b06:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007b0a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007b0e:	4013      	ands	r3, r2
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b1c:	1c9a      	adds	r2, r3, #2
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	69db      	ldr	r3, [r3, #28]
 8007b3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007b3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b42:	f003 0307 	and.w	r3, r3, #7
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d053      	beq.n	8007bf2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d011      	beq.n	8007b7a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007b56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00b      	beq.n	8007b7a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2201      	movs	r2, #1
 8007b68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b70:	f043 0201 	orr.w	r2, r3, #1
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d011      	beq.n	8007baa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007b86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00b      	beq.n	8007baa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2202      	movs	r2, #2
 8007b98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ba0:	f043 0204 	orr.w	r2, r3, #4
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007baa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007bae:	f003 0304 	and.w	r3, r3, #4
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d011      	beq.n	8007bda <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007bb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00b      	beq.n	8007bda <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2204      	movs	r2, #4
 8007bc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd0:	f043 0202 	orr.w	r2, r3, #2
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d006      	beq.n	8007bf2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7fe fb09 	bl	80061fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f040 80a2 	bne.w	8007d44 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c08:	e853 3f00 	ldrex	r3, [r3]
 8007c0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c26:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c2e:	e841 2300 	strex	r3, r2, [r1]
 8007c32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1e2      	bne.n	8007c00 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	3308      	adds	r3, #8
 8007c40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c44:	e853 3f00 	ldrex	r3, [r3]
 8007c48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c4a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c4c:	4b6e      	ldr	r3, [pc, #440]	; (8007e08 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8007c4e:	4013      	ands	r3, r2
 8007c50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	3308      	adds	r3, #8
 8007c5a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007c5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c66:	e841 2300 	strex	r3, r2, [r1]
 8007c6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1e3      	bne.n	8007c3a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2220      	movs	r2, #32
 8007c76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a60      	ldr	r2, [pc, #384]	; (8007e0c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d021      	beq.n	8007cd4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d01a      	beq.n	8007cd4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca6:	e853 3f00 	ldrex	r3, [r3]
 8007caa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007cb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007cc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cc2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cc8:	e841 2300 	strex	r3, r2, [r1]
 8007ccc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1e4      	bne.n	8007c9e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d130      	bne.n	8007d3e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cea:	e853 3f00 	ldrex	r3, [r3]
 8007cee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf2:	f023 0310 	bic.w	r3, r3, #16
 8007cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	461a      	mov	r2, r3
 8007d00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d04:	647b      	str	r3, [r7, #68]	; 0x44
 8007d06:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d0c:	e841 2300 	strex	r3, r2, [r1]
 8007d10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1e4      	bne.n	8007ce2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	f003 0310 	and.w	r3, r3, #16
 8007d22:	2b10      	cmp	r3, #16
 8007d24:	d103      	bne.n	8007d2e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2210      	movs	r2, #16
 8007d2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7f9 f8a0 	bl	8000e7c <HAL_UARTEx_RxEventCallback>
 8007d3c:	e002      	b.n	8007d44 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7fe fa52 	bl	80061e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d44:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d006      	beq.n	8007d5a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8007d4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d50:	f003 0320 	and.w	r3, r3, #32
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f47f aecd 	bne.w	8007af4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d60:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007d64:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d049      	beq.n	8007e00 <UART_RxISR_16BIT_FIFOEN+0x354>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007d72:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d242      	bcs.n	8007e00 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	3308      	adds	r3, #8
 8007d80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d84:	e853 3f00 	ldrex	r3, [r3]
 8007d88:	623b      	str	r3, [r7, #32]
   return(result);
 8007d8a:	6a3b      	ldr	r3, [r7, #32]
 8007d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	3308      	adds	r3, #8
 8007d9a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007d9e:	633a      	str	r2, [r7, #48]	; 0x30
 8007da0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007da6:	e841 2300 	strex	r3, r2, [r1]
 8007daa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1e3      	bne.n	8007d7a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a16      	ldr	r2, [pc, #88]	; (8007e10 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007db6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	e853 3f00 	ldrex	r3, [r3]
 8007dc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f043 0320 	orr.w	r3, r3, #32
 8007dcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007dda:	61fb      	str	r3, [r7, #28]
 8007ddc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dde:	69b9      	ldr	r1, [r7, #24]
 8007de0:	69fa      	ldr	r2, [r7, #28]
 8007de2:	e841 2300 	strex	r3, r2, [r1]
 8007de6:	617b      	str	r3, [r7, #20]
   return(result);
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1e4      	bne.n	8007db8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007dee:	e007      	b.n	8007e00 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	699a      	ldr	r2, [r3, #24]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f042 0208 	orr.w	r2, r2, #8
 8007dfe:	619a      	str	r2, [r3, #24]
}
 8007e00:	bf00      	nop
 8007e02:	37b8      	adds	r7, #184	; 0xb8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	effffffe 	.word	0xeffffffe
 8007e0c:	58000c00 	.word	0x58000c00
 8007e10:	08007595 	.word	0x08007595

08007e14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d101      	bne.n	8007e66 <HAL_UARTEx_DisableFifoMode+0x16>
 8007e62:	2302      	movs	r3, #2
 8007e64:	e027      	b.n	8007eb6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2224      	movs	r2, #36	; 0x24
 8007e72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f022 0201 	bic.w	r2, r2, #1
 8007e8c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007e94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b084      	sub	sp, #16
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
 8007eca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d101      	bne.n	8007eda <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	e02d      	b.n	8007f36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2224      	movs	r2, #36	; 0x24
 8007ee6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f022 0201 	bic.w	r2, r2, #1
 8007f00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	683a      	ldr	r2, [r7, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f8a4 	bl	8008064 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2220      	movs	r2, #32
 8007f28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b084      	sub	sp, #16
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d101      	bne.n	8007f56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f52:	2302      	movs	r3, #2
 8007f54:	e02d      	b.n	8007fb2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2224      	movs	r2, #36	; 0x24
 8007f62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f022 0201 	bic.w	r2, r2, #1
 8007f7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f866 	bl	8008064 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2220      	movs	r2, #32
 8007fa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b08c      	sub	sp, #48	; 0x30
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	60f8      	str	r0, [r7, #12]
 8007fc2:	60b9      	str	r1, [r7, #8]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fce:	2b20      	cmp	r3, #32
 8007fd0:	d142      	bne.n	8008058 <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 8007fd8:	88fb      	ldrh	r3, [r7, #6]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d101      	bne.n	8007fe2 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e03b      	b.n	800805a <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8007fee:	88fb      	ldrh	r3, [r7, #6]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	68b9      	ldr	r1, [r7, #8]
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f7ff f827 	bl	8007048 <UART_Start_Receive_IT>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008000:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008004:	2b00      	cmp	r3, #0
 8008006:	d124      	bne.n	8008052 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800800c:	2b01      	cmp	r3, #1
 800800e:	d11d      	bne.n	800804c <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2210      	movs	r2, #16
 8008016:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	e853 3f00 	ldrex	r3, [r3]
 8008024:	617b      	str	r3, [r7, #20]
   return(result);
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	f043 0310 	orr.w	r3, r3, #16
 800802c:	62bb      	str	r3, [r7, #40]	; 0x28
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008036:	627b      	str	r3, [r7, #36]	; 0x24
 8008038:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803a:	6a39      	ldr	r1, [r7, #32]
 800803c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800803e:	e841 2300 	strex	r3, r2, [r1]
 8008042:	61fb      	str	r3, [r7, #28]
   return(result);
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1e6      	bne.n	8008018 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 800804a:	e002      	b.n	8008052 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008052:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008056:	e000      	b.n	800805a <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008058:	2302      	movs	r3, #2
  }
}
 800805a:	4618      	mov	r0, r3
 800805c:	3730      	adds	r7, #48	; 0x30
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
	...

08008064 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008070:	2b00      	cmp	r3, #0
 8008072:	d108      	bne.n	8008086 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008084:	e031      	b.n	80080ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008086:	2310      	movs	r3, #16
 8008088:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800808a:	2310      	movs	r3, #16
 800808c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	0e5b      	lsrs	r3, r3, #25
 8008096:	b2db      	uxtb	r3, r3
 8008098:	f003 0307 	and.w	r3, r3, #7
 800809c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	0f5b      	lsrs	r3, r3, #29
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	f003 0307 	and.w	r3, r3, #7
 80080ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080ae:	7bbb      	ldrb	r3, [r7, #14]
 80080b0:	7b3a      	ldrb	r2, [r7, #12]
 80080b2:	4911      	ldr	r1, [pc, #68]	; (80080f8 <UARTEx_SetNbDataToProcess+0x94>)
 80080b4:	5c8a      	ldrb	r2, [r1, r2]
 80080b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080ba:	7b3a      	ldrb	r2, [r7, #12]
 80080bc:	490f      	ldr	r1, [pc, #60]	; (80080fc <UARTEx_SetNbDataToProcess+0x98>)
 80080be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
 80080ce:	7b7a      	ldrb	r2, [r7, #13]
 80080d0:	4909      	ldr	r1, [pc, #36]	; (80080f8 <UARTEx_SetNbDataToProcess+0x94>)
 80080d2:	5c8a      	ldrb	r2, [r1, r2]
 80080d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080d8:	7b7a      	ldrb	r2, [r7, #13]
 80080da:	4908      	ldr	r1, [pc, #32]	; (80080fc <UARTEx_SetNbDataToProcess+0x98>)
 80080dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080de:	fb93 f3f2 	sdiv	r3, r3, r2
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80080ea:	bf00      	nop
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	08009344 	.word	0x08009344
 80080fc:	0800934c 	.word	0x0800934c

08008100 <__errno>:
 8008100:	4b01      	ldr	r3, [pc, #4]	; (8008108 <__errno+0x8>)
 8008102:	6818      	ldr	r0, [r3, #0]
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	24000010 	.word	0x24000010

0800810c <__libc_init_array>:
 800810c:	b570      	push	{r4, r5, r6, lr}
 800810e:	4d0d      	ldr	r5, [pc, #52]	; (8008144 <__libc_init_array+0x38>)
 8008110:	4c0d      	ldr	r4, [pc, #52]	; (8008148 <__libc_init_array+0x3c>)
 8008112:	1b64      	subs	r4, r4, r5
 8008114:	10a4      	asrs	r4, r4, #2
 8008116:	2600      	movs	r6, #0
 8008118:	42a6      	cmp	r6, r4
 800811a:	d109      	bne.n	8008130 <__libc_init_array+0x24>
 800811c:	4d0b      	ldr	r5, [pc, #44]	; (800814c <__libc_init_array+0x40>)
 800811e:	4c0c      	ldr	r4, [pc, #48]	; (8008150 <__libc_init_array+0x44>)
 8008120:	f001 f824 	bl	800916c <_init>
 8008124:	1b64      	subs	r4, r4, r5
 8008126:	10a4      	asrs	r4, r4, #2
 8008128:	2600      	movs	r6, #0
 800812a:	42a6      	cmp	r6, r4
 800812c:	d105      	bne.n	800813a <__libc_init_array+0x2e>
 800812e:	bd70      	pop	{r4, r5, r6, pc}
 8008130:	f855 3b04 	ldr.w	r3, [r5], #4
 8008134:	4798      	blx	r3
 8008136:	3601      	adds	r6, #1
 8008138:	e7ee      	b.n	8008118 <__libc_init_array+0xc>
 800813a:	f855 3b04 	ldr.w	r3, [r5], #4
 800813e:	4798      	blx	r3
 8008140:	3601      	adds	r6, #1
 8008142:	e7f2      	b.n	800812a <__libc_init_array+0x1e>
 8008144:	080093f4 	.word	0x080093f4
 8008148:	080093f4 	.word	0x080093f4
 800814c:	080093f4 	.word	0x080093f4
 8008150:	080093f8 	.word	0x080093f8

08008154 <memset>:
 8008154:	4402      	add	r2, r0
 8008156:	4603      	mov	r3, r0
 8008158:	4293      	cmp	r3, r2
 800815a:	d100      	bne.n	800815e <memset+0xa>
 800815c:	4770      	bx	lr
 800815e:	f803 1b01 	strb.w	r1, [r3], #1
 8008162:	e7f9      	b.n	8008158 <memset+0x4>

08008164 <iprintf>:
 8008164:	b40f      	push	{r0, r1, r2, r3}
 8008166:	4b0a      	ldr	r3, [pc, #40]	; (8008190 <iprintf+0x2c>)
 8008168:	b513      	push	{r0, r1, r4, lr}
 800816a:	681c      	ldr	r4, [r3, #0]
 800816c:	b124      	cbz	r4, 8008178 <iprintf+0x14>
 800816e:	69a3      	ldr	r3, [r4, #24]
 8008170:	b913      	cbnz	r3, 8008178 <iprintf+0x14>
 8008172:	4620      	mov	r0, r4
 8008174:	f000 fa5e 	bl	8008634 <__sinit>
 8008178:	ab05      	add	r3, sp, #20
 800817a:	9a04      	ldr	r2, [sp, #16]
 800817c:	68a1      	ldr	r1, [r4, #8]
 800817e:	9301      	str	r3, [sp, #4]
 8008180:	4620      	mov	r0, r4
 8008182:	f000 fc67 	bl	8008a54 <_vfiprintf_r>
 8008186:	b002      	add	sp, #8
 8008188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800818c:	b004      	add	sp, #16
 800818e:	4770      	bx	lr
 8008190:	24000010 	.word	0x24000010

08008194 <_puts_r>:
 8008194:	b570      	push	{r4, r5, r6, lr}
 8008196:	460e      	mov	r6, r1
 8008198:	4605      	mov	r5, r0
 800819a:	b118      	cbz	r0, 80081a4 <_puts_r+0x10>
 800819c:	6983      	ldr	r3, [r0, #24]
 800819e:	b90b      	cbnz	r3, 80081a4 <_puts_r+0x10>
 80081a0:	f000 fa48 	bl	8008634 <__sinit>
 80081a4:	69ab      	ldr	r3, [r5, #24]
 80081a6:	68ac      	ldr	r4, [r5, #8]
 80081a8:	b913      	cbnz	r3, 80081b0 <_puts_r+0x1c>
 80081aa:	4628      	mov	r0, r5
 80081ac:	f000 fa42 	bl	8008634 <__sinit>
 80081b0:	4b2c      	ldr	r3, [pc, #176]	; (8008264 <_puts_r+0xd0>)
 80081b2:	429c      	cmp	r4, r3
 80081b4:	d120      	bne.n	80081f8 <_puts_r+0x64>
 80081b6:	686c      	ldr	r4, [r5, #4]
 80081b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081ba:	07db      	lsls	r3, r3, #31
 80081bc:	d405      	bmi.n	80081ca <_puts_r+0x36>
 80081be:	89a3      	ldrh	r3, [r4, #12]
 80081c0:	0598      	lsls	r0, r3, #22
 80081c2:	d402      	bmi.n	80081ca <_puts_r+0x36>
 80081c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081c6:	f000 fad3 	bl	8008770 <__retarget_lock_acquire_recursive>
 80081ca:	89a3      	ldrh	r3, [r4, #12]
 80081cc:	0719      	lsls	r1, r3, #28
 80081ce:	d51d      	bpl.n	800820c <_puts_r+0x78>
 80081d0:	6923      	ldr	r3, [r4, #16]
 80081d2:	b1db      	cbz	r3, 800820c <_puts_r+0x78>
 80081d4:	3e01      	subs	r6, #1
 80081d6:	68a3      	ldr	r3, [r4, #8]
 80081d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80081dc:	3b01      	subs	r3, #1
 80081de:	60a3      	str	r3, [r4, #8]
 80081e0:	bb39      	cbnz	r1, 8008232 <_puts_r+0x9e>
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	da38      	bge.n	8008258 <_puts_r+0xc4>
 80081e6:	4622      	mov	r2, r4
 80081e8:	210a      	movs	r1, #10
 80081ea:	4628      	mov	r0, r5
 80081ec:	f000 f848 	bl	8008280 <__swbuf_r>
 80081f0:	3001      	adds	r0, #1
 80081f2:	d011      	beq.n	8008218 <_puts_r+0x84>
 80081f4:	250a      	movs	r5, #10
 80081f6:	e011      	b.n	800821c <_puts_r+0x88>
 80081f8:	4b1b      	ldr	r3, [pc, #108]	; (8008268 <_puts_r+0xd4>)
 80081fa:	429c      	cmp	r4, r3
 80081fc:	d101      	bne.n	8008202 <_puts_r+0x6e>
 80081fe:	68ac      	ldr	r4, [r5, #8]
 8008200:	e7da      	b.n	80081b8 <_puts_r+0x24>
 8008202:	4b1a      	ldr	r3, [pc, #104]	; (800826c <_puts_r+0xd8>)
 8008204:	429c      	cmp	r4, r3
 8008206:	bf08      	it	eq
 8008208:	68ec      	ldreq	r4, [r5, #12]
 800820a:	e7d5      	b.n	80081b8 <_puts_r+0x24>
 800820c:	4621      	mov	r1, r4
 800820e:	4628      	mov	r0, r5
 8008210:	f000 f888 	bl	8008324 <__swsetup_r>
 8008214:	2800      	cmp	r0, #0
 8008216:	d0dd      	beq.n	80081d4 <_puts_r+0x40>
 8008218:	f04f 35ff 	mov.w	r5, #4294967295
 800821c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800821e:	07da      	lsls	r2, r3, #31
 8008220:	d405      	bmi.n	800822e <_puts_r+0x9a>
 8008222:	89a3      	ldrh	r3, [r4, #12]
 8008224:	059b      	lsls	r3, r3, #22
 8008226:	d402      	bmi.n	800822e <_puts_r+0x9a>
 8008228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800822a:	f000 faa2 	bl	8008772 <__retarget_lock_release_recursive>
 800822e:	4628      	mov	r0, r5
 8008230:	bd70      	pop	{r4, r5, r6, pc}
 8008232:	2b00      	cmp	r3, #0
 8008234:	da04      	bge.n	8008240 <_puts_r+0xac>
 8008236:	69a2      	ldr	r2, [r4, #24]
 8008238:	429a      	cmp	r2, r3
 800823a:	dc06      	bgt.n	800824a <_puts_r+0xb6>
 800823c:	290a      	cmp	r1, #10
 800823e:	d004      	beq.n	800824a <_puts_r+0xb6>
 8008240:	6823      	ldr	r3, [r4, #0]
 8008242:	1c5a      	adds	r2, r3, #1
 8008244:	6022      	str	r2, [r4, #0]
 8008246:	7019      	strb	r1, [r3, #0]
 8008248:	e7c5      	b.n	80081d6 <_puts_r+0x42>
 800824a:	4622      	mov	r2, r4
 800824c:	4628      	mov	r0, r5
 800824e:	f000 f817 	bl	8008280 <__swbuf_r>
 8008252:	3001      	adds	r0, #1
 8008254:	d1bf      	bne.n	80081d6 <_puts_r+0x42>
 8008256:	e7df      	b.n	8008218 <_puts_r+0x84>
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	250a      	movs	r5, #10
 800825c:	1c5a      	adds	r2, r3, #1
 800825e:	6022      	str	r2, [r4, #0]
 8008260:	701d      	strb	r5, [r3, #0]
 8008262:	e7db      	b.n	800821c <_puts_r+0x88>
 8008264:	08009378 	.word	0x08009378
 8008268:	08009398 	.word	0x08009398
 800826c:	08009358 	.word	0x08009358

08008270 <puts>:
 8008270:	4b02      	ldr	r3, [pc, #8]	; (800827c <puts+0xc>)
 8008272:	4601      	mov	r1, r0
 8008274:	6818      	ldr	r0, [r3, #0]
 8008276:	f7ff bf8d 	b.w	8008194 <_puts_r>
 800827a:	bf00      	nop
 800827c:	24000010 	.word	0x24000010

08008280 <__swbuf_r>:
 8008280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008282:	460e      	mov	r6, r1
 8008284:	4614      	mov	r4, r2
 8008286:	4605      	mov	r5, r0
 8008288:	b118      	cbz	r0, 8008292 <__swbuf_r+0x12>
 800828a:	6983      	ldr	r3, [r0, #24]
 800828c:	b90b      	cbnz	r3, 8008292 <__swbuf_r+0x12>
 800828e:	f000 f9d1 	bl	8008634 <__sinit>
 8008292:	4b21      	ldr	r3, [pc, #132]	; (8008318 <__swbuf_r+0x98>)
 8008294:	429c      	cmp	r4, r3
 8008296:	d12b      	bne.n	80082f0 <__swbuf_r+0x70>
 8008298:	686c      	ldr	r4, [r5, #4]
 800829a:	69a3      	ldr	r3, [r4, #24]
 800829c:	60a3      	str	r3, [r4, #8]
 800829e:	89a3      	ldrh	r3, [r4, #12]
 80082a0:	071a      	lsls	r2, r3, #28
 80082a2:	d52f      	bpl.n	8008304 <__swbuf_r+0x84>
 80082a4:	6923      	ldr	r3, [r4, #16]
 80082a6:	b36b      	cbz	r3, 8008304 <__swbuf_r+0x84>
 80082a8:	6923      	ldr	r3, [r4, #16]
 80082aa:	6820      	ldr	r0, [r4, #0]
 80082ac:	1ac0      	subs	r0, r0, r3
 80082ae:	6963      	ldr	r3, [r4, #20]
 80082b0:	b2f6      	uxtb	r6, r6
 80082b2:	4283      	cmp	r3, r0
 80082b4:	4637      	mov	r7, r6
 80082b6:	dc04      	bgt.n	80082c2 <__swbuf_r+0x42>
 80082b8:	4621      	mov	r1, r4
 80082ba:	4628      	mov	r0, r5
 80082bc:	f000 f926 	bl	800850c <_fflush_r>
 80082c0:	bb30      	cbnz	r0, 8008310 <__swbuf_r+0x90>
 80082c2:	68a3      	ldr	r3, [r4, #8]
 80082c4:	3b01      	subs	r3, #1
 80082c6:	60a3      	str	r3, [r4, #8]
 80082c8:	6823      	ldr	r3, [r4, #0]
 80082ca:	1c5a      	adds	r2, r3, #1
 80082cc:	6022      	str	r2, [r4, #0]
 80082ce:	701e      	strb	r6, [r3, #0]
 80082d0:	6963      	ldr	r3, [r4, #20]
 80082d2:	3001      	adds	r0, #1
 80082d4:	4283      	cmp	r3, r0
 80082d6:	d004      	beq.n	80082e2 <__swbuf_r+0x62>
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	07db      	lsls	r3, r3, #31
 80082dc:	d506      	bpl.n	80082ec <__swbuf_r+0x6c>
 80082de:	2e0a      	cmp	r6, #10
 80082e0:	d104      	bne.n	80082ec <__swbuf_r+0x6c>
 80082e2:	4621      	mov	r1, r4
 80082e4:	4628      	mov	r0, r5
 80082e6:	f000 f911 	bl	800850c <_fflush_r>
 80082ea:	b988      	cbnz	r0, 8008310 <__swbuf_r+0x90>
 80082ec:	4638      	mov	r0, r7
 80082ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082f0:	4b0a      	ldr	r3, [pc, #40]	; (800831c <__swbuf_r+0x9c>)
 80082f2:	429c      	cmp	r4, r3
 80082f4:	d101      	bne.n	80082fa <__swbuf_r+0x7a>
 80082f6:	68ac      	ldr	r4, [r5, #8]
 80082f8:	e7cf      	b.n	800829a <__swbuf_r+0x1a>
 80082fa:	4b09      	ldr	r3, [pc, #36]	; (8008320 <__swbuf_r+0xa0>)
 80082fc:	429c      	cmp	r4, r3
 80082fe:	bf08      	it	eq
 8008300:	68ec      	ldreq	r4, [r5, #12]
 8008302:	e7ca      	b.n	800829a <__swbuf_r+0x1a>
 8008304:	4621      	mov	r1, r4
 8008306:	4628      	mov	r0, r5
 8008308:	f000 f80c 	bl	8008324 <__swsetup_r>
 800830c:	2800      	cmp	r0, #0
 800830e:	d0cb      	beq.n	80082a8 <__swbuf_r+0x28>
 8008310:	f04f 37ff 	mov.w	r7, #4294967295
 8008314:	e7ea      	b.n	80082ec <__swbuf_r+0x6c>
 8008316:	bf00      	nop
 8008318:	08009378 	.word	0x08009378
 800831c:	08009398 	.word	0x08009398
 8008320:	08009358 	.word	0x08009358

08008324 <__swsetup_r>:
 8008324:	4b32      	ldr	r3, [pc, #200]	; (80083f0 <__swsetup_r+0xcc>)
 8008326:	b570      	push	{r4, r5, r6, lr}
 8008328:	681d      	ldr	r5, [r3, #0]
 800832a:	4606      	mov	r6, r0
 800832c:	460c      	mov	r4, r1
 800832e:	b125      	cbz	r5, 800833a <__swsetup_r+0x16>
 8008330:	69ab      	ldr	r3, [r5, #24]
 8008332:	b913      	cbnz	r3, 800833a <__swsetup_r+0x16>
 8008334:	4628      	mov	r0, r5
 8008336:	f000 f97d 	bl	8008634 <__sinit>
 800833a:	4b2e      	ldr	r3, [pc, #184]	; (80083f4 <__swsetup_r+0xd0>)
 800833c:	429c      	cmp	r4, r3
 800833e:	d10f      	bne.n	8008360 <__swsetup_r+0x3c>
 8008340:	686c      	ldr	r4, [r5, #4]
 8008342:	89a3      	ldrh	r3, [r4, #12]
 8008344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008348:	0719      	lsls	r1, r3, #28
 800834a:	d42c      	bmi.n	80083a6 <__swsetup_r+0x82>
 800834c:	06dd      	lsls	r5, r3, #27
 800834e:	d411      	bmi.n	8008374 <__swsetup_r+0x50>
 8008350:	2309      	movs	r3, #9
 8008352:	6033      	str	r3, [r6, #0]
 8008354:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008358:	81a3      	strh	r3, [r4, #12]
 800835a:	f04f 30ff 	mov.w	r0, #4294967295
 800835e:	e03e      	b.n	80083de <__swsetup_r+0xba>
 8008360:	4b25      	ldr	r3, [pc, #148]	; (80083f8 <__swsetup_r+0xd4>)
 8008362:	429c      	cmp	r4, r3
 8008364:	d101      	bne.n	800836a <__swsetup_r+0x46>
 8008366:	68ac      	ldr	r4, [r5, #8]
 8008368:	e7eb      	b.n	8008342 <__swsetup_r+0x1e>
 800836a:	4b24      	ldr	r3, [pc, #144]	; (80083fc <__swsetup_r+0xd8>)
 800836c:	429c      	cmp	r4, r3
 800836e:	bf08      	it	eq
 8008370:	68ec      	ldreq	r4, [r5, #12]
 8008372:	e7e6      	b.n	8008342 <__swsetup_r+0x1e>
 8008374:	0758      	lsls	r0, r3, #29
 8008376:	d512      	bpl.n	800839e <__swsetup_r+0x7a>
 8008378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800837a:	b141      	cbz	r1, 800838e <__swsetup_r+0x6a>
 800837c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008380:	4299      	cmp	r1, r3
 8008382:	d002      	beq.n	800838a <__swsetup_r+0x66>
 8008384:	4630      	mov	r0, r6
 8008386:	f000 fa5b 	bl	8008840 <_free_r>
 800838a:	2300      	movs	r3, #0
 800838c:	6363      	str	r3, [r4, #52]	; 0x34
 800838e:	89a3      	ldrh	r3, [r4, #12]
 8008390:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008394:	81a3      	strh	r3, [r4, #12]
 8008396:	2300      	movs	r3, #0
 8008398:	6063      	str	r3, [r4, #4]
 800839a:	6923      	ldr	r3, [r4, #16]
 800839c:	6023      	str	r3, [r4, #0]
 800839e:	89a3      	ldrh	r3, [r4, #12]
 80083a0:	f043 0308 	orr.w	r3, r3, #8
 80083a4:	81a3      	strh	r3, [r4, #12]
 80083a6:	6923      	ldr	r3, [r4, #16]
 80083a8:	b94b      	cbnz	r3, 80083be <__swsetup_r+0x9a>
 80083aa:	89a3      	ldrh	r3, [r4, #12]
 80083ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083b4:	d003      	beq.n	80083be <__swsetup_r+0x9a>
 80083b6:	4621      	mov	r1, r4
 80083b8:	4630      	mov	r0, r6
 80083ba:	f000 fa01 	bl	80087c0 <__smakebuf_r>
 80083be:	89a0      	ldrh	r0, [r4, #12]
 80083c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083c4:	f010 0301 	ands.w	r3, r0, #1
 80083c8:	d00a      	beq.n	80083e0 <__swsetup_r+0xbc>
 80083ca:	2300      	movs	r3, #0
 80083cc:	60a3      	str	r3, [r4, #8]
 80083ce:	6963      	ldr	r3, [r4, #20]
 80083d0:	425b      	negs	r3, r3
 80083d2:	61a3      	str	r3, [r4, #24]
 80083d4:	6923      	ldr	r3, [r4, #16]
 80083d6:	b943      	cbnz	r3, 80083ea <__swsetup_r+0xc6>
 80083d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083dc:	d1ba      	bne.n	8008354 <__swsetup_r+0x30>
 80083de:	bd70      	pop	{r4, r5, r6, pc}
 80083e0:	0781      	lsls	r1, r0, #30
 80083e2:	bf58      	it	pl
 80083e4:	6963      	ldrpl	r3, [r4, #20]
 80083e6:	60a3      	str	r3, [r4, #8]
 80083e8:	e7f4      	b.n	80083d4 <__swsetup_r+0xb0>
 80083ea:	2000      	movs	r0, #0
 80083ec:	e7f7      	b.n	80083de <__swsetup_r+0xba>
 80083ee:	bf00      	nop
 80083f0:	24000010 	.word	0x24000010
 80083f4:	08009378 	.word	0x08009378
 80083f8:	08009398 	.word	0x08009398
 80083fc:	08009358 	.word	0x08009358

08008400 <__sflush_r>:
 8008400:	898a      	ldrh	r2, [r1, #12]
 8008402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008406:	4605      	mov	r5, r0
 8008408:	0710      	lsls	r0, r2, #28
 800840a:	460c      	mov	r4, r1
 800840c:	d458      	bmi.n	80084c0 <__sflush_r+0xc0>
 800840e:	684b      	ldr	r3, [r1, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	dc05      	bgt.n	8008420 <__sflush_r+0x20>
 8008414:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008416:	2b00      	cmp	r3, #0
 8008418:	dc02      	bgt.n	8008420 <__sflush_r+0x20>
 800841a:	2000      	movs	r0, #0
 800841c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008420:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008422:	2e00      	cmp	r6, #0
 8008424:	d0f9      	beq.n	800841a <__sflush_r+0x1a>
 8008426:	2300      	movs	r3, #0
 8008428:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800842c:	682f      	ldr	r7, [r5, #0]
 800842e:	602b      	str	r3, [r5, #0]
 8008430:	d032      	beq.n	8008498 <__sflush_r+0x98>
 8008432:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008434:	89a3      	ldrh	r3, [r4, #12]
 8008436:	075a      	lsls	r2, r3, #29
 8008438:	d505      	bpl.n	8008446 <__sflush_r+0x46>
 800843a:	6863      	ldr	r3, [r4, #4]
 800843c:	1ac0      	subs	r0, r0, r3
 800843e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008440:	b10b      	cbz	r3, 8008446 <__sflush_r+0x46>
 8008442:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008444:	1ac0      	subs	r0, r0, r3
 8008446:	2300      	movs	r3, #0
 8008448:	4602      	mov	r2, r0
 800844a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800844c:	6a21      	ldr	r1, [r4, #32]
 800844e:	4628      	mov	r0, r5
 8008450:	47b0      	blx	r6
 8008452:	1c43      	adds	r3, r0, #1
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	d106      	bne.n	8008466 <__sflush_r+0x66>
 8008458:	6829      	ldr	r1, [r5, #0]
 800845a:	291d      	cmp	r1, #29
 800845c:	d82c      	bhi.n	80084b8 <__sflush_r+0xb8>
 800845e:	4a2a      	ldr	r2, [pc, #168]	; (8008508 <__sflush_r+0x108>)
 8008460:	40ca      	lsrs	r2, r1
 8008462:	07d6      	lsls	r6, r2, #31
 8008464:	d528      	bpl.n	80084b8 <__sflush_r+0xb8>
 8008466:	2200      	movs	r2, #0
 8008468:	6062      	str	r2, [r4, #4]
 800846a:	04d9      	lsls	r1, r3, #19
 800846c:	6922      	ldr	r2, [r4, #16]
 800846e:	6022      	str	r2, [r4, #0]
 8008470:	d504      	bpl.n	800847c <__sflush_r+0x7c>
 8008472:	1c42      	adds	r2, r0, #1
 8008474:	d101      	bne.n	800847a <__sflush_r+0x7a>
 8008476:	682b      	ldr	r3, [r5, #0]
 8008478:	b903      	cbnz	r3, 800847c <__sflush_r+0x7c>
 800847a:	6560      	str	r0, [r4, #84]	; 0x54
 800847c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800847e:	602f      	str	r7, [r5, #0]
 8008480:	2900      	cmp	r1, #0
 8008482:	d0ca      	beq.n	800841a <__sflush_r+0x1a>
 8008484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008488:	4299      	cmp	r1, r3
 800848a:	d002      	beq.n	8008492 <__sflush_r+0x92>
 800848c:	4628      	mov	r0, r5
 800848e:	f000 f9d7 	bl	8008840 <_free_r>
 8008492:	2000      	movs	r0, #0
 8008494:	6360      	str	r0, [r4, #52]	; 0x34
 8008496:	e7c1      	b.n	800841c <__sflush_r+0x1c>
 8008498:	6a21      	ldr	r1, [r4, #32]
 800849a:	2301      	movs	r3, #1
 800849c:	4628      	mov	r0, r5
 800849e:	47b0      	blx	r6
 80084a0:	1c41      	adds	r1, r0, #1
 80084a2:	d1c7      	bne.n	8008434 <__sflush_r+0x34>
 80084a4:	682b      	ldr	r3, [r5, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d0c4      	beq.n	8008434 <__sflush_r+0x34>
 80084aa:	2b1d      	cmp	r3, #29
 80084ac:	d001      	beq.n	80084b2 <__sflush_r+0xb2>
 80084ae:	2b16      	cmp	r3, #22
 80084b0:	d101      	bne.n	80084b6 <__sflush_r+0xb6>
 80084b2:	602f      	str	r7, [r5, #0]
 80084b4:	e7b1      	b.n	800841a <__sflush_r+0x1a>
 80084b6:	89a3      	ldrh	r3, [r4, #12]
 80084b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084bc:	81a3      	strh	r3, [r4, #12]
 80084be:	e7ad      	b.n	800841c <__sflush_r+0x1c>
 80084c0:	690f      	ldr	r7, [r1, #16]
 80084c2:	2f00      	cmp	r7, #0
 80084c4:	d0a9      	beq.n	800841a <__sflush_r+0x1a>
 80084c6:	0793      	lsls	r3, r2, #30
 80084c8:	680e      	ldr	r6, [r1, #0]
 80084ca:	bf08      	it	eq
 80084cc:	694b      	ldreq	r3, [r1, #20]
 80084ce:	600f      	str	r7, [r1, #0]
 80084d0:	bf18      	it	ne
 80084d2:	2300      	movne	r3, #0
 80084d4:	eba6 0807 	sub.w	r8, r6, r7
 80084d8:	608b      	str	r3, [r1, #8]
 80084da:	f1b8 0f00 	cmp.w	r8, #0
 80084de:	dd9c      	ble.n	800841a <__sflush_r+0x1a>
 80084e0:	6a21      	ldr	r1, [r4, #32]
 80084e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084e4:	4643      	mov	r3, r8
 80084e6:	463a      	mov	r2, r7
 80084e8:	4628      	mov	r0, r5
 80084ea:	47b0      	blx	r6
 80084ec:	2800      	cmp	r0, #0
 80084ee:	dc06      	bgt.n	80084fe <__sflush_r+0xfe>
 80084f0:	89a3      	ldrh	r3, [r4, #12]
 80084f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084f6:	81a3      	strh	r3, [r4, #12]
 80084f8:	f04f 30ff 	mov.w	r0, #4294967295
 80084fc:	e78e      	b.n	800841c <__sflush_r+0x1c>
 80084fe:	4407      	add	r7, r0
 8008500:	eba8 0800 	sub.w	r8, r8, r0
 8008504:	e7e9      	b.n	80084da <__sflush_r+0xda>
 8008506:	bf00      	nop
 8008508:	20400001 	.word	0x20400001

0800850c <_fflush_r>:
 800850c:	b538      	push	{r3, r4, r5, lr}
 800850e:	690b      	ldr	r3, [r1, #16]
 8008510:	4605      	mov	r5, r0
 8008512:	460c      	mov	r4, r1
 8008514:	b913      	cbnz	r3, 800851c <_fflush_r+0x10>
 8008516:	2500      	movs	r5, #0
 8008518:	4628      	mov	r0, r5
 800851a:	bd38      	pop	{r3, r4, r5, pc}
 800851c:	b118      	cbz	r0, 8008526 <_fflush_r+0x1a>
 800851e:	6983      	ldr	r3, [r0, #24]
 8008520:	b90b      	cbnz	r3, 8008526 <_fflush_r+0x1a>
 8008522:	f000 f887 	bl	8008634 <__sinit>
 8008526:	4b14      	ldr	r3, [pc, #80]	; (8008578 <_fflush_r+0x6c>)
 8008528:	429c      	cmp	r4, r3
 800852a:	d11b      	bne.n	8008564 <_fflush_r+0x58>
 800852c:	686c      	ldr	r4, [r5, #4]
 800852e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d0ef      	beq.n	8008516 <_fflush_r+0xa>
 8008536:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008538:	07d0      	lsls	r0, r2, #31
 800853a:	d404      	bmi.n	8008546 <_fflush_r+0x3a>
 800853c:	0599      	lsls	r1, r3, #22
 800853e:	d402      	bmi.n	8008546 <_fflush_r+0x3a>
 8008540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008542:	f000 f915 	bl	8008770 <__retarget_lock_acquire_recursive>
 8008546:	4628      	mov	r0, r5
 8008548:	4621      	mov	r1, r4
 800854a:	f7ff ff59 	bl	8008400 <__sflush_r>
 800854e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008550:	07da      	lsls	r2, r3, #31
 8008552:	4605      	mov	r5, r0
 8008554:	d4e0      	bmi.n	8008518 <_fflush_r+0xc>
 8008556:	89a3      	ldrh	r3, [r4, #12]
 8008558:	059b      	lsls	r3, r3, #22
 800855a:	d4dd      	bmi.n	8008518 <_fflush_r+0xc>
 800855c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800855e:	f000 f908 	bl	8008772 <__retarget_lock_release_recursive>
 8008562:	e7d9      	b.n	8008518 <_fflush_r+0xc>
 8008564:	4b05      	ldr	r3, [pc, #20]	; (800857c <_fflush_r+0x70>)
 8008566:	429c      	cmp	r4, r3
 8008568:	d101      	bne.n	800856e <_fflush_r+0x62>
 800856a:	68ac      	ldr	r4, [r5, #8]
 800856c:	e7df      	b.n	800852e <_fflush_r+0x22>
 800856e:	4b04      	ldr	r3, [pc, #16]	; (8008580 <_fflush_r+0x74>)
 8008570:	429c      	cmp	r4, r3
 8008572:	bf08      	it	eq
 8008574:	68ec      	ldreq	r4, [r5, #12]
 8008576:	e7da      	b.n	800852e <_fflush_r+0x22>
 8008578:	08009378 	.word	0x08009378
 800857c:	08009398 	.word	0x08009398
 8008580:	08009358 	.word	0x08009358

08008584 <std>:
 8008584:	2300      	movs	r3, #0
 8008586:	b510      	push	{r4, lr}
 8008588:	4604      	mov	r4, r0
 800858a:	e9c0 3300 	strd	r3, r3, [r0]
 800858e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008592:	6083      	str	r3, [r0, #8]
 8008594:	8181      	strh	r1, [r0, #12]
 8008596:	6643      	str	r3, [r0, #100]	; 0x64
 8008598:	81c2      	strh	r2, [r0, #14]
 800859a:	6183      	str	r3, [r0, #24]
 800859c:	4619      	mov	r1, r3
 800859e:	2208      	movs	r2, #8
 80085a0:	305c      	adds	r0, #92	; 0x5c
 80085a2:	f7ff fdd7 	bl	8008154 <memset>
 80085a6:	4b05      	ldr	r3, [pc, #20]	; (80085bc <std+0x38>)
 80085a8:	6263      	str	r3, [r4, #36]	; 0x24
 80085aa:	4b05      	ldr	r3, [pc, #20]	; (80085c0 <std+0x3c>)
 80085ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80085ae:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <std+0x40>)
 80085b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085b2:	4b05      	ldr	r3, [pc, #20]	; (80085c8 <std+0x44>)
 80085b4:	6224      	str	r4, [r4, #32]
 80085b6:	6323      	str	r3, [r4, #48]	; 0x30
 80085b8:	bd10      	pop	{r4, pc}
 80085ba:	bf00      	nop
 80085bc:	08008ffd 	.word	0x08008ffd
 80085c0:	0800901f 	.word	0x0800901f
 80085c4:	08009057 	.word	0x08009057
 80085c8:	0800907b 	.word	0x0800907b

080085cc <_cleanup_r>:
 80085cc:	4901      	ldr	r1, [pc, #4]	; (80085d4 <_cleanup_r+0x8>)
 80085ce:	f000 b8af 	b.w	8008730 <_fwalk_reent>
 80085d2:	bf00      	nop
 80085d4:	0800850d 	.word	0x0800850d

080085d8 <__sfmoreglue>:
 80085d8:	b570      	push	{r4, r5, r6, lr}
 80085da:	2268      	movs	r2, #104	; 0x68
 80085dc:	1e4d      	subs	r5, r1, #1
 80085de:	4355      	muls	r5, r2
 80085e0:	460e      	mov	r6, r1
 80085e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085e6:	f000 f997 	bl	8008918 <_malloc_r>
 80085ea:	4604      	mov	r4, r0
 80085ec:	b140      	cbz	r0, 8008600 <__sfmoreglue+0x28>
 80085ee:	2100      	movs	r1, #0
 80085f0:	e9c0 1600 	strd	r1, r6, [r0]
 80085f4:	300c      	adds	r0, #12
 80085f6:	60a0      	str	r0, [r4, #8]
 80085f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085fc:	f7ff fdaa 	bl	8008154 <memset>
 8008600:	4620      	mov	r0, r4
 8008602:	bd70      	pop	{r4, r5, r6, pc}

08008604 <__sfp_lock_acquire>:
 8008604:	4801      	ldr	r0, [pc, #4]	; (800860c <__sfp_lock_acquire+0x8>)
 8008606:	f000 b8b3 	b.w	8008770 <__retarget_lock_acquire_recursive>
 800860a:	bf00      	nop
 800860c:	2407a335 	.word	0x2407a335

08008610 <__sfp_lock_release>:
 8008610:	4801      	ldr	r0, [pc, #4]	; (8008618 <__sfp_lock_release+0x8>)
 8008612:	f000 b8ae 	b.w	8008772 <__retarget_lock_release_recursive>
 8008616:	bf00      	nop
 8008618:	2407a335 	.word	0x2407a335

0800861c <__sinit_lock_acquire>:
 800861c:	4801      	ldr	r0, [pc, #4]	; (8008624 <__sinit_lock_acquire+0x8>)
 800861e:	f000 b8a7 	b.w	8008770 <__retarget_lock_acquire_recursive>
 8008622:	bf00      	nop
 8008624:	2407a336 	.word	0x2407a336

08008628 <__sinit_lock_release>:
 8008628:	4801      	ldr	r0, [pc, #4]	; (8008630 <__sinit_lock_release+0x8>)
 800862a:	f000 b8a2 	b.w	8008772 <__retarget_lock_release_recursive>
 800862e:	bf00      	nop
 8008630:	2407a336 	.word	0x2407a336

08008634 <__sinit>:
 8008634:	b510      	push	{r4, lr}
 8008636:	4604      	mov	r4, r0
 8008638:	f7ff fff0 	bl	800861c <__sinit_lock_acquire>
 800863c:	69a3      	ldr	r3, [r4, #24]
 800863e:	b11b      	cbz	r3, 8008648 <__sinit+0x14>
 8008640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008644:	f7ff bff0 	b.w	8008628 <__sinit_lock_release>
 8008648:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800864c:	6523      	str	r3, [r4, #80]	; 0x50
 800864e:	4b13      	ldr	r3, [pc, #76]	; (800869c <__sinit+0x68>)
 8008650:	4a13      	ldr	r2, [pc, #76]	; (80086a0 <__sinit+0x6c>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	62a2      	str	r2, [r4, #40]	; 0x28
 8008656:	42a3      	cmp	r3, r4
 8008658:	bf04      	itt	eq
 800865a:	2301      	moveq	r3, #1
 800865c:	61a3      	streq	r3, [r4, #24]
 800865e:	4620      	mov	r0, r4
 8008660:	f000 f820 	bl	80086a4 <__sfp>
 8008664:	6060      	str	r0, [r4, #4]
 8008666:	4620      	mov	r0, r4
 8008668:	f000 f81c 	bl	80086a4 <__sfp>
 800866c:	60a0      	str	r0, [r4, #8]
 800866e:	4620      	mov	r0, r4
 8008670:	f000 f818 	bl	80086a4 <__sfp>
 8008674:	2200      	movs	r2, #0
 8008676:	60e0      	str	r0, [r4, #12]
 8008678:	2104      	movs	r1, #4
 800867a:	6860      	ldr	r0, [r4, #4]
 800867c:	f7ff ff82 	bl	8008584 <std>
 8008680:	68a0      	ldr	r0, [r4, #8]
 8008682:	2201      	movs	r2, #1
 8008684:	2109      	movs	r1, #9
 8008686:	f7ff ff7d 	bl	8008584 <std>
 800868a:	68e0      	ldr	r0, [r4, #12]
 800868c:	2202      	movs	r2, #2
 800868e:	2112      	movs	r1, #18
 8008690:	f7ff ff78 	bl	8008584 <std>
 8008694:	2301      	movs	r3, #1
 8008696:	61a3      	str	r3, [r4, #24]
 8008698:	e7d2      	b.n	8008640 <__sinit+0xc>
 800869a:	bf00      	nop
 800869c:	08009354 	.word	0x08009354
 80086a0:	080085cd 	.word	0x080085cd

080086a4 <__sfp>:
 80086a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a6:	4607      	mov	r7, r0
 80086a8:	f7ff ffac 	bl	8008604 <__sfp_lock_acquire>
 80086ac:	4b1e      	ldr	r3, [pc, #120]	; (8008728 <__sfp+0x84>)
 80086ae:	681e      	ldr	r6, [r3, #0]
 80086b0:	69b3      	ldr	r3, [r6, #24]
 80086b2:	b913      	cbnz	r3, 80086ba <__sfp+0x16>
 80086b4:	4630      	mov	r0, r6
 80086b6:	f7ff ffbd 	bl	8008634 <__sinit>
 80086ba:	3648      	adds	r6, #72	; 0x48
 80086bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80086c0:	3b01      	subs	r3, #1
 80086c2:	d503      	bpl.n	80086cc <__sfp+0x28>
 80086c4:	6833      	ldr	r3, [r6, #0]
 80086c6:	b30b      	cbz	r3, 800870c <__sfp+0x68>
 80086c8:	6836      	ldr	r6, [r6, #0]
 80086ca:	e7f7      	b.n	80086bc <__sfp+0x18>
 80086cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086d0:	b9d5      	cbnz	r5, 8008708 <__sfp+0x64>
 80086d2:	4b16      	ldr	r3, [pc, #88]	; (800872c <__sfp+0x88>)
 80086d4:	60e3      	str	r3, [r4, #12]
 80086d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086da:	6665      	str	r5, [r4, #100]	; 0x64
 80086dc:	f000 f847 	bl	800876e <__retarget_lock_init_recursive>
 80086e0:	f7ff ff96 	bl	8008610 <__sfp_lock_release>
 80086e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086ec:	6025      	str	r5, [r4, #0]
 80086ee:	61a5      	str	r5, [r4, #24]
 80086f0:	2208      	movs	r2, #8
 80086f2:	4629      	mov	r1, r5
 80086f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086f8:	f7ff fd2c 	bl	8008154 <memset>
 80086fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008700:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008704:	4620      	mov	r0, r4
 8008706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008708:	3468      	adds	r4, #104	; 0x68
 800870a:	e7d9      	b.n	80086c0 <__sfp+0x1c>
 800870c:	2104      	movs	r1, #4
 800870e:	4638      	mov	r0, r7
 8008710:	f7ff ff62 	bl	80085d8 <__sfmoreglue>
 8008714:	4604      	mov	r4, r0
 8008716:	6030      	str	r0, [r6, #0]
 8008718:	2800      	cmp	r0, #0
 800871a:	d1d5      	bne.n	80086c8 <__sfp+0x24>
 800871c:	f7ff ff78 	bl	8008610 <__sfp_lock_release>
 8008720:	230c      	movs	r3, #12
 8008722:	603b      	str	r3, [r7, #0]
 8008724:	e7ee      	b.n	8008704 <__sfp+0x60>
 8008726:	bf00      	nop
 8008728:	08009354 	.word	0x08009354
 800872c:	ffff0001 	.word	0xffff0001

08008730 <_fwalk_reent>:
 8008730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008734:	4606      	mov	r6, r0
 8008736:	4688      	mov	r8, r1
 8008738:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800873c:	2700      	movs	r7, #0
 800873e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008742:	f1b9 0901 	subs.w	r9, r9, #1
 8008746:	d505      	bpl.n	8008754 <_fwalk_reent+0x24>
 8008748:	6824      	ldr	r4, [r4, #0]
 800874a:	2c00      	cmp	r4, #0
 800874c:	d1f7      	bne.n	800873e <_fwalk_reent+0xe>
 800874e:	4638      	mov	r0, r7
 8008750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008754:	89ab      	ldrh	r3, [r5, #12]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d907      	bls.n	800876a <_fwalk_reent+0x3a>
 800875a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800875e:	3301      	adds	r3, #1
 8008760:	d003      	beq.n	800876a <_fwalk_reent+0x3a>
 8008762:	4629      	mov	r1, r5
 8008764:	4630      	mov	r0, r6
 8008766:	47c0      	blx	r8
 8008768:	4307      	orrs	r7, r0
 800876a:	3568      	adds	r5, #104	; 0x68
 800876c:	e7e9      	b.n	8008742 <_fwalk_reent+0x12>

0800876e <__retarget_lock_init_recursive>:
 800876e:	4770      	bx	lr

08008770 <__retarget_lock_acquire_recursive>:
 8008770:	4770      	bx	lr

08008772 <__retarget_lock_release_recursive>:
 8008772:	4770      	bx	lr

08008774 <__swhatbuf_r>:
 8008774:	b570      	push	{r4, r5, r6, lr}
 8008776:	460e      	mov	r6, r1
 8008778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800877c:	2900      	cmp	r1, #0
 800877e:	b096      	sub	sp, #88	; 0x58
 8008780:	4614      	mov	r4, r2
 8008782:	461d      	mov	r5, r3
 8008784:	da08      	bge.n	8008798 <__swhatbuf_r+0x24>
 8008786:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	602a      	str	r2, [r5, #0]
 800878e:	061a      	lsls	r2, r3, #24
 8008790:	d410      	bmi.n	80087b4 <__swhatbuf_r+0x40>
 8008792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008796:	e00e      	b.n	80087b6 <__swhatbuf_r+0x42>
 8008798:	466a      	mov	r2, sp
 800879a:	f000 fc95 	bl	80090c8 <_fstat_r>
 800879e:	2800      	cmp	r0, #0
 80087a0:	dbf1      	blt.n	8008786 <__swhatbuf_r+0x12>
 80087a2:	9a01      	ldr	r2, [sp, #4]
 80087a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80087a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80087ac:	425a      	negs	r2, r3
 80087ae:	415a      	adcs	r2, r3
 80087b0:	602a      	str	r2, [r5, #0]
 80087b2:	e7ee      	b.n	8008792 <__swhatbuf_r+0x1e>
 80087b4:	2340      	movs	r3, #64	; 0x40
 80087b6:	2000      	movs	r0, #0
 80087b8:	6023      	str	r3, [r4, #0]
 80087ba:	b016      	add	sp, #88	; 0x58
 80087bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080087c0 <__smakebuf_r>:
 80087c0:	898b      	ldrh	r3, [r1, #12]
 80087c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087c4:	079d      	lsls	r5, r3, #30
 80087c6:	4606      	mov	r6, r0
 80087c8:	460c      	mov	r4, r1
 80087ca:	d507      	bpl.n	80087dc <__smakebuf_r+0x1c>
 80087cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	6123      	str	r3, [r4, #16]
 80087d4:	2301      	movs	r3, #1
 80087d6:	6163      	str	r3, [r4, #20]
 80087d8:	b002      	add	sp, #8
 80087da:	bd70      	pop	{r4, r5, r6, pc}
 80087dc:	ab01      	add	r3, sp, #4
 80087de:	466a      	mov	r2, sp
 80087e0:	f7ff ffc8 	bl	8008774 <__swhatbuf_r>
 80087e4:	9900      	ldr	r1, [sp, #0]
 80087e6:	4605      	mov	r5, r0
 80087e8:	4630      	mov	r0, r6
 80087ea:	f000 f895 	bl	8008918 <_malloc_r>
 80087ee:	b948      	cbnz	r0, 8008804 <__smakebuf_r+0x44>
 80087f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087f4:	059a      	lsls	r2, r3, #22
 80087f6:	d4ef      	bmi.n	80087d8 <__smakebuf_r+0x18>
 80087f8:	f023 0303 	bic.w	r3, r3, #3
 80087fc:	f043 0302 	orr.w	r3, r3, #2
 8008800:	81a3      	strh	r3, [r4, #12]
 8008802:	e7e3      	b.n	80087cc <__smakebuf_r+0xc>
 8008804:	4b0d      	ldr	r3, [pc, #52]	; (800883c <__smakebuf_r+0x7c>)
 8008806:	62b3      	str	r3, [r6, #40]	; 0x28
 8008808:	89a3      	ldrh	r3, [r4, #12]
 800880a:	6020      	str	r0, [r4, #0]
 800880c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008810:	81a3      	strh	r3, [r4, #12]
 8008812:	9b00      	ldr	r3, [sp, #0]
 8008814:	6163      	str	r3, [r4, #20]
 8008816:	9b01      	ldr	r3, [sp, #4]
 8008818:	6120      	str	r0, [r4, #16]
 800881a:	b15b      	cbz	r3, 8008834 <__smakebuf_r+0x74>
 800881c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008820:	4630      	mov	r0, r6
 8008822:	f000 fc63 	bl	80090ec <_isatty_r>
 8008826:	b128      	cbz	r0, 8008834 <__smakebuf_r+0x74>
 8008828:	89a3      	ldrh	r3, [r4, #12]
 800882a:	f023 0303 	bic.w	r3, r3, #3
 800882e:	f043 0301 	orr.w	r3, r3, #1
 8008832:	81a3      	strh	r3, [r4, #12]
 8008834:	89a0      	ldrh	r0, [r4, #12]
 8008836:	4305      	orrs	r5, r0
 8008838:	81a5      	strh	r5, [r4, #12]
 800883a:	e7cd      	b.n	80087d8 <__smakebuf_r+0x18>
 800883c:	080085cd 	.word	0x080085cd

08008840 <_free_r>:
 8008840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008842:	2900      	cmp	r1, #0
 8008844:	d044      	beq.n	80088d0 <_free_r+0x90>
 8008846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800884a:	9001      	str	r0, [sp, #4]
 800884c:	2b00      	cmp	r3, #0
 800884e:	f1a1 0404 	sub.w	r4, r1, #4
 8008852:	bfb8      	it	lt
 8008854:	18e4      	addlt	r4, r4, r3
 8008856:	f000 fc6b 	bl	8009130 <__malloc_lock>
 800885a:	4a1e      	ldr	r2, [pc, #120]	; (80088d4 <_free_r+0x94>)
 800885c:	9801      	ldr	r0, [sp, #4]
 800885e:	6813      	ldr	r3, [r2, #0]
 8008860:	b933      	cbnz	r3, 8008870 <_free_r+0x30>
 8008862:	6063      	str	r3, [r4, #4]
 8008864:	6014      	str	r4, [r2, #0]
 8008866:	b003      	add	sp, #12
 8008868:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800886c:	f000 bc66 	b.w	800913c <__malloc_unlock>
 8008870:	42a3      	cmp	r3, r4
 8008872:	d908      	bls.n	8008886 <_free_r+0x46>
 8008874:	6825      	ldr	r5, [r4, #0]
 8008876:	1961      	adds	r1, r4, r5
 8008878:	428b      	cmp	r3, r1
 800887a:	bf01      	itttt	eq
 800887c:	6819      	ldreq	r1, [r3, #0]
 800887e:	685b      	ldreq	r3, [r3, #4]
 8008880:	1949      	addeq	r1, r1, r5
 8008882:	6021      	streq	r1, [r4, #0]
 8008884:	e7ed      	b.n	8008862 <_free_r+0x22>
 8008886:	461a      	mov	r2, r3
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	b10b      	cbz	r3, 8008890 <_free_r+0x50>
 800888c:	42a3      	cmp	r3, r4
 800888e:	d9fa      	bls.n	8008886 <_free_r+0x46>
 8008890:	6811      	ldr	r1, [r2, #0]
 8008892:	1855      	adds	r5, r2, r1
 8008894:	42a5      	cmp	r5, r4
 8008896:	d10b      	bne.n	80088b0 <_free_r+0x70>
 8008898:	6824      	ldr	r4, [r4, #0]
 800889a:	4421      	add	r1, r4
 800889c:	1854      	adds	r4, r2, r1
 800889e:	42a3      	cmp	r3, r4
 80088a0:	6011      	str	r1, [r2, #0]
 80088a2:	d1e0      	bne.n	8008866 <_free_r+0x26>
 80088a4:	681c      	ldr	r4, [r3, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	6053      	str	r3, [r2, #4]
 80088aa:	4421      	add	r1, r4
 80088ac:	6011      	str	r1, [r2, #0]
 80088ae:	e7da      	b.n	8008866 <_free_r+0x26>
 80088b0:	d902      	bls.n	80088b8 <_free_r+0x78>
 80088b2:	230c      	movs	r3, #12
 80088b4:	6003      	str	r3, [r0, #0]
 80088b6:	e7d6      	b.n	8008866 <_free_r+0x26>
 80088b8:	6825      	ldr	r5, [r4, #0]
 80088ba:	1961      	adds	r1, r4, r5
 80088bc:	428b      	cmp	r3, r1
 80088be:	bf04      	itt	eq
 80088c0:	6819      	ldreq	r1, [r3, #0]
 80088c2:	685b      	ldreq	r3, [r3, #4]
 80088c4:	6063      	str	r3, [r4, #4]
 80088c6:	bf04      	itt	eq
 80088c8:	1949      	addeq	r1, r1, r5
 80088ca:	6021      	streq	r1, [r4, #0]
 80088cc:	6054      	str	r4, [r2, #4]
 80088ce:	e7ca      	b.n	8008866 <_free_r+0x26>
 80088d0:	b003      	add	sp, #12
 80088d2:	bd30      	pop	{r4, r5, pc}
 80088d4:	2407a338 	.word	0x2407a338

080088d8 <sbrk_aligned>:
 80088d8:	b570      	push	{r4, r5, r6, lr}
 80088da:	4e0e      	ldr	r6, [pc, #56]	; (8008914 <sbrk_aligned+0x3c>)
 80088dc:	460c      	mov	r4, r1
 80088de:	6831      	ldr	r1, [r6, #0]
 80088e0:	4605      	mov	r5, r0
 80088e2:	b911      	cbnz	r1, 80088ea <sbrk_aligned+0x12>
 80088e4:	f000 fb7a 	bl	8008fdc <_sbrk_r>
 80088e8:	6030      	str	r0, [r6, #0]
 80088ea:	4621      	mov	r1, r4
 80088ec:	4628      	mov	r0, r5
 80088ee:	f000 fb75 	bl	8008fdc <_sbrk_r>
 80088f2:	1c43      	adds	r3, r0, #1
 80088f4:	d00a      	beq.n	800890c <sbrk_aligned+0x34>
 80088f6:	1cc4      	adds	r4, r0, #3
 80088f8:	f024 0403 	bic.w	r4, r4, #3
 80088fc:	42a0      	cmp	r0, r4
 80088fe:	d007      	beq.n	8008910 <sbrk_aligned+0x38>
 8008900:	1a21      	subs	r1, r4, r0
 8008902:	4628      	mov	r0, r5
 8008904:	f000 fb6a 	bl	8008fdc <_sbrk_r>
 8008908:	3001      	adds	r0, #1
 800890a:	d101      	bne.n	8008910 <sbrk_aligned+0x38>
 800890c:	f04f 34ff 	mov.w	r4, #4294967295
 8008910:	4620      	mov	r0, r4
 8008912:	bd70      	pop	{r4, r5, r6, pc}
 8008914:	2407a33c 	.word	0x2407a33c

08008918 <_malloc_r>:
 8008918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800891c:	1ccd      	adds	r5, r1, #3
 800891e:	f025 0503 	bic.w	r5, r5, #3
 8008922:	3508      	adds	r5, #8
 8008924:	2d0c      	cmp	r5, #12
 8008926:	bf38      	it	cc
 8008928:	250c      	movcc	r5, #12
 800892a:	2d00      	cmp	r5, #0
 800892c:	4607      	mov	r7, r0
 800892e:	db01      	blt.n	8008934 <_malloc_r+0x1c>
 8008930:	42a9      	cmp	r1, r5
 8008932:	d905      	bls.n	8008940 <_malloc_r+0x28>
 8008934:	230c      	movs	r3, #12
 8008936:	603b      	str	r3, [r7, #0]
 8008938:	2600      	movs	r6, #0
 800893a:	4630      	mov	r0, r6
 800893c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008940:	4e2e      	ldr	r6, [pc, #184]	; (80089fc <_malloc_r+0xe4>)
 8008942:	f000 fbf5 	bl	8009130 <__malloc_lock>
 8008946:	6833      	ldr	r3, [r6, #0]
 8008948:	461c      	mov	r4, r3
 800894a:	bb34      	cbnz	r4, 800899a <_malloc_r+0x82>
 800894c:	4629      	mov	r1, r5
 800894e:	4638      	mov	r0, r7
 8008950:	f7ff ffc2 	bl	80088d8 <sbrk_aligned>
 8008954:	1c43      	adds	r3, r0, #1
 8008956:	4604      	mov	r4, r0
 8008958:	d14d      	bne.n	80089f6 <_malloc_r+0xde>
 800895a:	6834      	ldr	r4, [r6, #0]
 800895c:	4626      	mov	r6, r4
 800895e:	2e00      	cmp	r6, #0
 8008960:	d140      	bne.n	80089e4 <_malloc_r+0xcc>
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	4631      	mov	r1, r6
 8008966:	4638      	mov	r0, r7
 8008968:	eb04 0803 	add.w	r8, r4, r3
 800896c:	f000 fb36 	bl	8008fdc <_sbrk_r>
 8008970:	4580      	cmp	r8, r0
 8008972:	d13a      	bne.n	80089ea <_malloc_r+0xd2>
 8008974:	6821      	ldr	r1, [r4, #0]
 8008976:	3503      	adds	r5, #3
 8008978:	1a6d      	subs	r5, r5, r1
 800897a:	f025 0503 	bic.w	r5, r5, #3
 800897e:	3508      	adds	r5, #8
 8008980:	2d0c      	cmp	r5, #12
 8008982:	bf38      	it	cc
 8008984:	250c      	movcc	r5, #12
 8008986:	4629      	mov	r1, r5
 8008988:	4638      	mov	r0, r7
 800898a:	f7ff ffa5 	bl	80088d8 <sbrk_aligned>
 800898e:	3001      	adds	r0, #1
 8008990:	d02b      	beq.n	80089ea <_malloc_r+0xd2>
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	442b      	add	r3, r5
 8008996:	6023      	str	r3, [r4, #0]
 8008998:	e00e      	b.n	80089b8 <_malloc_r+0xa0>
 800899a:	6822      	ldr	r2, [r4, #0]
 800899c:	1b52      	subs	r2, r2, r5
 800899e:	d41e      	bmi.n	80089de <_malloc_r+0xc6>
 80089a0:	2a0b      	cmp	r2, #11
 80089a2:	d916      	bls.n	80089d2 <_malloc_r+0xba>
 80089a4:	1961      	adds	r1, r4, r5
 80089a6:	42a3      	cmp	r3, r4
 80089a8:	6025      	str	r5, [r4, #0]
 80089aa:	bf18      	it	ne
 80089ac:	6059      	strne	r1, [r3, #4]
 80089ae:	6863      	ldr	r3, [r4, #4]
 80089b0:	bf08      	it	eq
 80089b2:	6031      	streq	r1, [r6, #0]
 80089b4:	5162      	str	r2, [r4, r5]
 80089b6:	604b      	str	r3, [r1, #4]
 80089b8:	4638      	mov	r0, r7
 80089ba:	f104 060b 	add.w	r6, r4, #11
 80089be:	f000 fbbd 	bl	800913c <__malloc_unlock>
 80089c2:	f026 0607 	bic.w	r6, r6, #7
 80089c6:	1d23      	adds	r3, r4, #4
 80089c8:	1af2      	subs	r2, r6, r3
 80089ca:	d0b6      	beq.n	800893a <_malloc_r+0x22>
 80089cc:	1b9b      	subs	r3, r3, r6
 80089ce:	50a3      	str	r3, [r4, r2]
 80089d0:	e7b3      	b.n	800893a <_malloc_r+0x22>
 80089d2:	6862      	ldr	r2, [r4, #4]
 80089d4:	42a3      	cmp	r3, r4
 80089d6:	bf0c      	ite	eq
 80089d8:	6032      	streq	r2, [r6, #0]
 80089da:	605a      	strne	r2, [r3, #4]
 80089dc:	e7ec      	b.n	80089b8 <_malloc_r+0xa0>
 80089de:	4623      	mov	r3, r4
 80089e0:	6864      	ldr	r4, [r4, #4]
 80089e2:	e7b2      	b.n	800894a <_malloc_r+0x32>
 80089e4:	4634      	mov	r4, r6
 80089e6:	6876      	ldr	r6, [r6, #4]
 80089e8:	e7b9      	b.n	800895e <_malloc_r+0x46>
 80089ea:	230c      	movs	r3, #12
 80089ec:	603b      	str	r3, [r7, #0]
 80089ee:	4638      	mov	r0, r7
 80089f0:	f000 fba4 	bl	800913c <__malloc_unlock>
 80089f4:	e7a1      	b.n	800893a <_malloc_r+0x22>
 80089f6:	6025      	str	r5, [r4, #0]
 80089f8:	e7de      	b.n	80089b8 <_malloc_r+0xa0>
 80089fa:	bf00      	nop
 80089fc:	2407a338 	.word	0x2407a338

08008a00 <__sfputc_r>:
 8008a00:	6893      	ldr	r3, [r2, #8]
 8008a02:	3b01      	subs	r3, #1
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	b410      	push	{r4}
 8008a08:	6093      	str	r3, [r2, #8]
 8008a0a:	da08      	bge.n	8008a1e <__sfputc_r+0x1e>
 8008a0c:	6994      	ldr	r4, [r2, #24]
 8008a0e:	42a3      	cmp	r3, r4
 8008a10:	db01      	blt.n	8008a16 <__sfputc_r+0x16>
 8008a12:	290a      	cmp	r1, #10
 8008a14:	d103      	bne.n	8008a1e <__sfputc_r+0x1e>
 8008a16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a1a:	f7ff bc31 	b.w	8008280 <__swbuf_r>
 8008a1e:	6813      	ldr	r3, [r2, #0]
 8008a20:	1c58      	adds	r0, r3, #1
 8008a22:	6010      	str	r0, [r2, #0]
 8008a24:	7019      	strb	r1, [r3, #0]
 8008a26:	4608      	mov	r0, r1
 8008a28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <__sfputs_r>:
 8008a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a30:	4606      	mov	r6, r0
 8008a32:	460f      	mov	r7, r1
 8008a34:	4614      	mov	r4, r2
 8008a36:	18d5      	adds	r5, r2, r3
 8008a38:	42ac      	cmp	r4, r5
 8008a3a:	d101      	bne.n	8008a40 <__sfputs_r+0x12>
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	e007      	b.n	8008a50 <__sfputs_r+0x22>
 8008a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a44:	463a      	mov	r2, r7
 8008a46:	4630      	mov	r0, r6
 8008a48:	f7ff ffda 	bl	8008a00 <__sfputc_r>
 8008a4c:	1c43      	adds	r3, r0, #1
 8008a4e:	d1f3      	bne.n	8008a38 <__sfputs_r+0xa>
 8008a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a54 <_vfiprintf_r>:
 8008a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a58:	460d      	mov	r5, r1
 8008a5a:	b09d      	sub	sp, #116	; 0x74
 8008a5c:	4614      	mov	r4, r2
 8008a5e:	4698      	mov	r8, r3
 8008a60:	4606      	mov	r6, r0
 8008a62:	b118      	cbz	r0, 8008a6c <_vfiprintf_r+0x18>
 8008a64:	6983      	ldr	r3, [r0, #24]
 8008a66:	b90b      	cbnz	r3, 8008a6c <_vfiprintf_r+0x18>
 8008a68:	f7ff fde4 	bl	8008634 <__sinit>
 8008a6c:	4b89      	ldr	r3, [pc, #548]	; (8008c94 <_vfiprintf_r+0x240>)
 8008a6e:	429d      	cmp	r5, r3
 8008a70:	d11b      	bne.n	8008aaa <_vfiprintf_r+0x56>
 8008a72:	6875      	ldr	r5, [r6, #4]
 8008a74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a76:	07d9      	lsls	r1, r3, #31
 8008a78:	d405      	bmi.n	8008a86 <_vfiprintf_r+0x32>
 8008a7a:	89ab      	ldrh	r3, [r5, #12]
 8008a7c:	059a      	lsls	r2, r3, #22
 8008a7e:	d402      	bmi.n	8008a86 <_vfiprintf_r+0x32>
 8008a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a82:	f7ff fe75 	bl	8008770 <__retarget_lock_acquire_recursive>
 8008a86:	89ab      	ldrh	r3, [r5, #12]
 8008a88:	071b      	lsls	r3, r3, #28
 8008a8a:	d501      	bpl.n	8008a90 <_vfiprintf_r+0x3c>
 8008a8c:	692b      	ldr	r3, [r5, #16]
 8008a8e:	b9eb      	cbnz	r3, 8008acc <_vfiprintf_r+0x78>
 8008a90:	4629      	mov	r1, r5
 8008a92:	4630      	mov	r0, r6
 8008a94:	f7ff fc46 	bl	8008324 <__swsetup_r>
 8008a98:	b1c0      	cbz	r0, 8008acc <_vfiprintf_r+0x78>
 8008a9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a9c:	07dc      	lsls	r4, r3, #31
 8008a9e:	d50e      	bpl.n	8008abe <_vfiprintf_r+0x6a>
 8008aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa4:	b01d      	add	sp, #116	; 0x74
 8008aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aaa:	4b7b      	ldr	r3, [pc, #492]	; (8008c98 <_vfiprintf_r+0x244>)
 8008aac:	429d      	cmp	r5, r3
 8008aae:	d101      	bne.n	8008ab4 <_vfiprintf_r+0x60>
 8008ab0:	68b5      	ldr	r5, [r6, #8]
 8008ab2:	e7df      	b.n	8008a74 <_vfiprintf_r+0x20>
 8008ab4:	4b79      	ldr	r3, [pc, #484]	; (8008c9c <_vfiprintf_r+0x248>)
 8008ab6:	429d      	cmp	r5, r3
 8008ab8:	bf08      	it	eq
 8008aba:	68f5      	ldreq	r5, [r6, #12]
 8008abc:	e7da      	b.n	8008a74 <_vfiprintf_r+0x20>
 8008abe:	89ab      	ldrh	r3, [r5, #12]
 8008ac0:	0598      	lsls	r0, r3, #22
 8008ac2:	d4ed      	bmi.n	8008aa0 <_vfiprintf_r+0x4c>
 8008ac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ac6:	f7ff fe54 	bl	8008772 <__retarget_lock_release_recursive>
 8008aca:	e7e9      	b.n	8008aa0 <_vfiprintf_r+0x4c>
 8008acc:	2300      	movs	r3, #0
 8008ace:	9309      	str	r3, [sp, #36]	; 0x24
 8008ad0:	2320      	movs	r3, #32
 8008ad2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ad6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ada:	2330      	movs	r3, #48	; 0x30
 8008adc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008ca0 <_vfiprintf_r+0x24c>
 8008ae0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ae4:	f04f 0901 	mov.w	r9, #1
 8008ae8:	4623      	mov	r3, r4
 8008aea:	469a      	mov	sl, r3
 8008aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008af0:	b10a      	cbz	r2, 8008af6 <_vfiprintf_r+0xa2>
 8008af2:	2a25      	cmp	r2, #37	; 0x25
 8008af4:	d1f9      	bne.n	8008aea <_vfiprintf_r+0x96>
 8008af6:	ebba 0b04 	subs.w	fp, sl, r4
 8008afa:	d00b      	beq.n	8008b14 <_vfiprintf_r+0xc0>
 8008afc:	465b      	mov	r3, fp
 8008afe:	4622      	mov	r2, r4
 8008b00:	4629      	mov	r1, r5
 8008b02:	4630      	mov	r0, r6
 8008b04:	f7ff ff93 	bl	8008a2e <__sfputs_r>
 8008b08:	3001      	adds	r0, #1
 8008b0a:	f000 80aa 	beq.w	8008c62 <_vfiprintf_r+0x20e>
 8008b0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b10:	445a      	add	r2, fp
 8008b12:	9209      	str	r2, [sp, #36]	; 0x24
 8008b14:	f89a 3000 	ldrb.w	r3, [sl]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f000 80a2 	beq.w	8008c62 <_vfiprintf_r+0x20e>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	f04f 32ff 	mov.w	r2, #4294967295
 8008b24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b28:	f10a 0a01 	add.w	sl, sl, #1
 8008b2c:	9304      	str	r3, [sp, #16]
 8008b2e:	9307      	str	r3, [sp, #28]
 8008b30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b34:	931a      	str	r3, [sp, #104]	; 0x68
 8008b36:	4654      	mov	r4, sl
 8008b38:	2205      	movs	r2, #5
 8008b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b3e:	4858      	ldr	r0, [pc, #352]	; (8008ca0 <_vfiprintf_r+0x24c>)
 8008b40:	f7f7 fbce 	bl	80002e0 <memchr>
 8008b44:	9a04      	ldr	r2, [sp, #16]
 8008b46:	b9d8      	cbnz	r0, 8008b80 <_vfiprintf_r+0x12c>
 8008b48:	06d1      	lsls	r1, r2, #27
 8008b4a:	bf44      	itt	mi
 8008b4c:	2320      	movmi	r3, #32
 8008b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b52:	0713      	lsls	r3, r2, #28
 8008b54:	bf44      	itt	mi
 8008b56:	232b      	movmi	r3, #43	; 0x2b
 8008b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b60:	2b2a      	cmp	r3, #42	; 0x2a
 8008b62:	d015      	beq.n	8008b90 <_vfiprintf_r+0x13c>
 8008b64:	9a07      	ldr	r2, [sp, #28]
 8008b66:	4654      	mov	r4, sl
 8008b68:	2000      	movs	r0, #0
 8008b6a:	f04f 0c0a 	mov.w	ip, #10
 8008b6e:	4621      	mov	r1, r4
 8008b70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b74:	3b30      	subs	r3, #48	; 0x30
 8008b76:	2b09      	cmp	r3, #9
 8008b78:	d94e      	bls.n	8008c18 <_vfiprintf_r+0x1c4>
 8008b7a:	b1b0      	cbz	r0, 8008baa <_vfiprintf_r+0x156>
 8008b7c:	9207      	str	r2, [sp, #28]
 8008b7e:	e014      	b.n	8008baa <_vfiprintf_r+0x156>
 8008b80:	eba0 0308 	sub.w	r3, r0, r8
 8008b84:	fa09 f303 	lsl.w	r3, r9, r3
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	9304      	str	r3, [sp, #16]
 8008b8c:	46a2      	mov	sl, r4
 8008b8e:	e7d2      	b.n	8008b36 <_vfiprintf_r+0xe2>
 8008b90:	9b03      	ldr	r3, [sp, #12]
 8008b92:	1d19      	adds	r1, r3, #4
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	9103      	str	r1, [sp, #12]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	bfbb      	ittet	lt
 8008b9c:	425b      	neglt	r3, r3
 8008b9e:	f042 0202 	orrlt.w	r2, r2, #2
 8008ba2:	9307      	strge	r3, [sp, #28]
 8008ba4:	9307      	strlt	r3, [sp, #28]
 8008ba6:	bfb8      	it	lt
 8008ba8:	9204      	strlt	r2, [sp, #16]
 8008baa:	7823      	ldrb	r3, [r4, #0]
 8008bac:	2b2e      	cmp	r3, #46	; 0x2e
 8008bae:	d10c      	bne.n	8008bca <_vfiprintf_r+0x176>
 8008bb0:	7863      	ldrb	r3, [r4, #1]
 8008bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8008bb4:	d135      	bne.n	8008c22 <_vfiprintf_r+0x1ce>
 8008bb6:	9b03      	ldr	r3, [sp, #12]
 8008bb8:	1d1a      	adds	r2, r3, #4
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	9203      	str	r2, [sp, #12]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	bfb8      	it	lt
 8008bc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bc6:	3402      	adds	r4, #2
 8008bc8:	9305      	str	r3, [sp, #20]
 8008bca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008cb0 <_vfiprintf_r+0x25c>
 8008bce:	7821      	ldrb	r1, [r4, #0]
 8008bd0:	2203      	movs	r2, #3
 8008bd2:	4650      	mov	r0, sl
 8008bd4:	f7f7 fb84 	bl	80002e0 <memchr>
 8008bd8:	b140      	cbz	r0, 8008bec <_vfiprintf_r+0x198>
 8008bda:	2340      	movs	r3, #64	; 0x40
 8008bdc:	eba0 000a 	sub.w	r0, r0, sl
 8008be0:	fa03 f000 	lsl.w	r0, r3, r0
 8008be4:	9b04      	ldr	r3, [sp, #16]
 8008be6:	4303      	orrs	r3, r0
 8008be8:	3401      	adds	r4, #1
 8008bea:	9304      	str	r3, [sp, #16]
 8008bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bf0:	482c      	ldr	r0, [pc, #176]	; (8008ca4 <_vfiprintf_r+0x250>)
 8008bf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bf6:	2206      	movs	r2, #6
 8008bf8:	f7f7 fb72 	bl	80002e0 <memchr>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	d03f      	beq.n	8008c80 <_vfiprintf_r+0x22c>
 8008c00:	4b29      	ldr	r3, [pc, #164]	; (8008ca8 <_vfiprintf_r+0x254>)
 8008c02:	bb1b      	cbnz	r3, 8008c4c <_vfiprintf_r+0x1f8>
 8008c04:	9b03      	ldr	r3, [sp, #12]
 8008c06:	3307      	adds	r3, #7
 8008c08:	f023 0307 	bic.w	r3, r3, #7
 8008c0c:	3308      	adds	r3, #8
 8008c0e:	9303      	str	r3, [sp, #12]
 8008c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c12:	443b      	add	r3, r7
 8008c14:	9309      	str	r3, [sp, #36]	; 0x24
 8008c16:	e767      	b.n	8008ae8 <_vfiprintf_r+0x94>
 8008c18:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c1c:	460c      	mov	r4, r1
 8008c1e:	2001      	movs	r0, #1
 8008c20:	e7a5      	b.n	8008b6e <_vfiprintf_r+0x11a>
 8008c22:	2300      	movs	r3, #0
 8008c24:	3401      	adds	r4, #1
 8008c26:	9305      	str	r3, [sp, #20]
 8008c28:	4619      	mov	r1, r3
 8008c2a:	f04f 0c0a 	mov.w	ip, #10
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c34:	3a30      	subs	r2, #48	; 0x30
 8008c36:	2a09      	cmp	r2, #9
 8008c38:	d903      	bls.n	8008c42 <_vfiprintf_r+0x1ee>
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d0c5      	beq.n	8008bca <_vfiprintf_r+0x176>
 8008c3e:	9105      	str	r1, [sp, #20]
 8008c40:	e7c3      	b.n	8008bca <_vfiprintf_r+0x176>
 8008c42:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c46:	4604      	mov	r4, r0
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e7f0      	b.n	8008c2e <_vfiprintf_r+0x1da>
 8008c4c:	ab03      	add	r3, sp, #12
 8008c4e:	9300      	str	r3, [sp, #0]
 8008c50:	462a      	mov	r2, r5
 8008c52:	4b16      	ldr	r3, [pc, #88]	; (8008cac <_vfiprintf_r+0x258>)
 8008c54:	a904      	add	r1, sp, #16
 8008c56:	4630      	mov	r0, r6
 8008c58:	f3af 8000 	nop.w
 8008c5c:	4607      	mov	r7, r0
 8008c5e:	1c78      	adds	r0, r7, #1
 8008c60:	d1d6      	bne.n	8008c10 <_vfiprintf_r+0x1bc>
 8008c62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c64:	07d9      	lsls	r1, r3, #31
 8008c66:	d405      	bmi.n	8008c74 <_vfiprintf_r+0x220>
 8008c68:	89ab      	ldrh	r3, [r5, #12]
 8008c6a:	059a      	lsls	r2, r3, #22
 8008c6c:	d402      	bmi.n	8008c74 <_vfiprintf_r+0x220>
 8008c6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c70:	f7ff fd7f 	bl	8008772 <__retarget_lock_release_recursive>
 8008c74:	89ab      	ldrh	r3, [r5, #12]
 8008c76:	065b      	lsls	r3, r3, #25
 8008c78:	f53f af12 	bmi.w	8008aa0 <_vfiprintf_r+0x4c>
 8008c7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c7e:	e711      	b.n	8008aa4 <_vfiprintf_r+0x50>
 8008c80:	ab03      	add	r3, sp, #12
 8008c82:	9300      	str	r3, [sp, #0]
 8008c84:	462a      	mov	r2, r5
 8008c86:	4b09      	ldr	r3, [pc, #36]	; (8008cac <_vfiprintf_r+0x258>)
 8008c88:	a904      	add	r1, sp, #16
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	f000 f880 	bl	8008d90 <_printf_i>
 8008c90:	e7e4      	b.n	8008c5c <_vfiprintf_r+0x208>
 8008c92:	bf00      	nop
 8008c94:	08009378 	.word	0x08009378
 8008c98:	08009398 	.word	0x08009398
 8008c9c:	08009358 	.word	0x08009358
 8008ca0:	080093b8 	.word	0x080093b8
 8008ca4:	080093c2 	.word	0x080093c2
 8008ca8:	00000000 	.word	0x00000000
 8008cac:	08008a2f 	.word	0x08008a2f
 8008cb0:	080093be 	.word	0x080093be

08008cb4 <_printf_common>:
 8008cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb8:	4616      	mov	r6, r2
 8008cba:	4699      	mov	r9, r3
 8008cbc:	688a      	ldr	r2, [r1, #8]
 8008cbe:	690b      	ldr	r3, [r1, #16]
 8008cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	bfb8      	it	lt
 8008cc8:	4613      	movlt	r3, r2
 8008cca:	6033      	str	r3, [r6, #0]
 8008ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008cd0:	4607      	mov	r7, r0
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	b10a      	cbz	r2, 8008cda <_printf_common+0x26>
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	6033      	str	r3, [r6, #0]
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	0699      	lsls	r1, r3, #26
 8008cde:	bf42      	ittt	mi
 8008ce0:	6833      	ldrmi	r3, [r6, #0]
 8008ce2:	3302      	addmi	r3, #2
 8008ce4:	6033      	strmi	r3, [r6, #0]
 8008ce6:	6825      	ldr	r5, [r4, #0]
 8008ce8:	f015 0506 	ands.w	r5, r5, #6
 8008cec:	d106      	bne.n	8008cfc <_printf_common+0x48>
 8008cee:	f104 0a19 	add.w	sl, r4, #25
 8008cf2:	68e3      	ldr	r3, [r4, #12]
 8008cf4:	6832      	ldr	r2, [r6, #0]
 8008cf6:	1a9b      	subs	r3, r3, r2
 8008cf8:	42ab      	cmp	r3, r5
 8008cfa:	dc26      	bgt.n	8008d4a <_printf_common+0x96>
 8008cfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d00:	1e13      	subs	r3, r2, #0
 8008d02:	6822      	ldr	r2, [r4, #0]
 8008d04:	bf18      	it	ne
 8008d06:	2301      	movne	r3, #1
 8008d08:	0692      	lsls	r2, r2, #26
 8008d0a:	d42b      	bmi.n	8008d64 <_printf_common+0xb0>
 8008d0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d10:	4649      	mov	r1, r9
 8008d12:	4638      	mov	r0, r7
 8008d14:	47c0      	blx	r8
 8008d16:	3001      	adds	r0, #1
 8008d18:	d01e      	beq.n	8008d58 <_printf_common+0xa4>
 8008d1a:	6823      	ldr	r3, [r4, #0]
 8008d1c:	68e5      	ldr	r5, [r4, #12]
 8008d1e:	6832      	ldr	r2, [r6, #0]
 8008d20:	f003 0306 	and.w	r3, r3, #6
 8008d24:	2b04      	cmp	r3, #4
 8008d26:	bf08      	it	eq
 8008d28:	1aad      	subeq	r5, r5, r2
 8008d2a:	68a3      	ldr	r3, [r4, #8]
 8008d2c:	6922      	ldr	r2, [r4, #16]
 8008d2e:	bf0c      	ite	eq
 8008d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d34:	2500      	movne	r5, #0
 8008d36:	4293      	cmp	r3, r2
 8008d38:	bfc4      	itt	gt
 8008d3a:	1a9b      	subgt	r3, r3, r2
 8008d3c:	18ed      	addgt	r5, r5, r3
 8008d3e:	2600      	movs	r6, #0
 8008d40:	341a      	adds	r4, #26
 8008d42:	42b5      	cmp	r5, r6
 8008d44:	d11a      	bne.n	8008d7c <_printf_common+0xc8>
 8008d46:	2000      	movs	r0, #0
 8008d48:	e008      	b.n	8008d5c <_printf_common+0xa8>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	4652      	mov	r2, sl
 8008d4e:	4649      	mov	r1, r9
 8008d50:	4638      	mov	r0, r7
 8008d52:	47c0      	blx	r8
 8008d54:	3001      	adds	r0, #1
 8008d56:	d103      	bne.n	8008d60 <_printf_common+0xac>
 8008d58:	f04f 30ff 	mov.w	r0, #4294967295
 8008d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d60:	3501      	adds	r5, #1
 8008d62:	e7c6      	b.n	8008cf2 <_printf_common+0x3e>
 8008d64:	18e1      	adds	r1, r4, r3
 8008d66:	1c5a      	adds	r2, r3, #1
 8008d68:	2030      	movs	r0, #48	; 0x30
 8008d6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d6e:	4422      	add	r2, r4
 8008d70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d78:	3302      	adds	r3, #2
 8008d7a:	e7c7      	b.n	8008d0c <_printf_common+0x58>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	4622      	mov	r2, r4
 8008d80:	4649      	mov	r1, r9
 8008d82:	4638      	mov	r0, r7
 8008d84:	47c0      	blx	r8
 8008d86:	3001      	adds	r0, #1
 8008d88:	d0e6      	beq.n	8008d58 <_printf_common+0xa4>
 8008d8a:	3601      	adds	r6, #1
 8008d8c:	e7d9      	b.n	8008d42 <_printf_common+0x8e>
	...

08008d90 <_printf_i>:
 8008d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d94:	7e0f      	ldrb	r7, [r1, #24]
 8008d96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d98:	2f78      	cmp	r7, #120	; 0x78
 8008d9a:	4691      	mov	r9, r2
 8008d9c:	4680      	mov	r8, r0
 8008d9e:	460c      	mov	r4, r1
 8008da0:	469a      	mov	sl, r3
 8008da2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008da6:	d807      	bhi.n	8008db8 <_printf_i+0x28>
 8008da8:	2f62      	cmp	r7, #98	; 0x62
 8008daa:	d80a      	bhi.n	8008dc2 <_printf_i+0x32>
 8008dac:	2f00      	cmp	r7, #0
 8008dae:	f000 80d8 	beq.w	8008f62 <_printf_i+0x1d2>
 8008db2:	2f58      	cmp	r7, #88	; 0x58
 8008db4:	f000 80a3 	beq.w	8008efe <_printf_i+0x16e>
 8008db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008dc0:	e03a      	b.n	8008e38 <_printf_i+0xa8>
 8008dc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008dc6:	2b15      	cmp	r3, #21
 8008dc8:	d8f6      	bhi.n	8008db8 <_printf_i+0x28>
 8008dca:	a101      	add	r1, pc, #4	; (adr r1, 8008dd0 <_printf_i+0x40>)
 8008dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008dd0:	08008e29 	.word	0x08008e29
 8008dd4:	08008e3d 	.word	0x08008e3d
 8008dd8:	08008db9 	.word	0x08008db9
 8008ddc:	08008db9 	.word	0x08008db9
 8008de0:	08008db9 	.word	0x08008db9
 8008de4:	08008db9 	.word	0x08008db9
 8008de8:	08008e3d 	.word	0x08008e3d
 8008dec:	08008db9 	.word	0x08008db9
 8008df0:	08008db9 	.word	0x08008db9
 8008df4:	08008db9 	.word	0x08008db9
 8008df8:	08008db9 	.word	0x08008db9
 8008dfc:	08008f49 	.word	0x08008f49
 8008e00:	08008e6d 	.word	0x08008e6d
 8008e04:	08008f2b 	.word	0x08008f2b
 8008e08:	08008db9 	.word	0x08008db9
 8008e0c:	08008db9 	.word	0x08008db9
 8008e10:	08008f6b 	.word	0x08008f6b
 8008e14:	08008db9 	.word	0x08008db9
 8008e18:	08008e6d 	.word	0x08008e6d
 8008e1c:	08008db9 	.word	0x08008db9
 8008e20:	08008db9 	.word	0x08008db9
 8008e24:	08008f33 	.word	0x08008f33
 8008e28:	682b      	ldr	r3, [r5, #0]
 8008e2a:	1d1a      	adds	r2, r3, #4
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	602a      	str	r2, [r5, #0]
 8008e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e0a3      	b.n	8008f84 <_printf_i+0x1f4>
 8008e3c:	6820      	ldr	r0, [r4, #0]
 8008e3e:	6829      	ldr	r1, [r5, #0]
 8008e40:	0606      	lsls	r6, r0, #24
 8008e42:	f101 0304 	add.w	r3, r1, #4
 8008e46:	d50a      	bpl.n	8008e5e <_printf_i+0xce>
 8008e48:	680e      	ldr	r6, [r1, #0]
 8008e4a:	602b      	str	r3, [r5, #0]
 8008e4c:	2e00      	cmp	r6, #0
 8008e4e:	da03      	bge.n	8008e58 <_printf_i+0xc8>
 8008e50:	232d      	movs	r3, #45	; 0x2d
 8008e52:	4276      	negs	r6, r6
 8008e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e58:	485e      	ldr	r0, [pc, #376]	; (8008fd4 <_printf_i+0x244>)
 8008e5a:	230a      	movs	r3, #10
 8008e5c:	e019      	b.n	8008e92 <_printf_i+0x102>
 8008e5e:	680e      	ldr	r6, [r1, #0]
 8008e60:	602b      	str	r3, [r5, #0]
 8008e62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e66:	bf18      	it	ne
 8008e68:	b236      	sxthne	r6, r6
 8008e6a:	e7ef      	b.n	8008e4c <_printf_i+0xbc>
 8008e6c:	682b      	ldr	r3, [r5, #0]
 8008e6e:	6820      	ldr	r0, [r4, #0]
 8008e70:	1d19      	adds	r1, r3, #4
 8008e72:	6029      	str	r1, [r5, #0]
 8008e74:	0601      	lsls	r1, r0, #24
 8008e76:	d501      	bpl.n	8008e7c <_printf_i+0xec>
 8008e78:	681e      	ldr	r6, [r3, #0]
 8008e7a:	e002      	b.n	8008e82 <_printf_i+0xf2>
 8008e7c:	0646      	lsls	r6, r0, #25
 8008e7e:	d5fb      	bpl.n	8008e78 <_printf_i+0xe8>
 8008e80:	881e      	ldrh	r6, [r3, #0]
 8008e82:	4854      	ldr	r0, [pc, #336]	; (8008fd4 <_printf_i+0x244>)
 8008e84:	2f6f      	cmp	r7, #111	; 0x6f
 8008e86:	bf0c      	ite	eq
 8008e88:	2308      	moveq	r3, #8
 8008e8a:	230a      	movne	r3, #10
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e92:	6865      	ldr	r5, [r4, #4]
 8008e94:	60a5      	str	r5, [r4, #8]
 8008e96:	2d00      	cmp	r5, #0
 8008e98:	bfa2      	ittt	ge
 8008e9a:	6821      	ldrge	r1, [r4, #0]
 8008e9c:	f021 0104 	bicge.w	r1, r1, #4
 8008ea0:	6021      	strge	r1, [r4, #0]
 8008ea2:	b90e      	cbnz	r6, 8008ea8 <_printf_i+0x118>
 8008ea4:	2d00      	cmp	r5, #0
 8008ea6:	d04d      	beq.n	8008f44 <_printf_i+0x1b4>
 8008ea8:	4615      	mov	r5, r2
 8008eaa:	fbb6 f1f3 	udiv	r1, r6, r3
 8008eae:	fb03 6711 	mls	r7, r3, r1, r6
 8008eb2:	5dc7      	ldrb	r7, [r0, r7]
 8008eb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008eb8:	4637      	mov	r7, r6
 8008eba:	42bb      	cmp	r3, r7
 8008ebc:	460e      	mov	r6, r1
 8008ebe:	d9f4      	bls.n	8008eaa <_printf_i+0x11a>
 8008ec0:	2b08      	cmp	r3, #8
 8008ec2:	d10b      	bne.n	8008edc <_printf_i+0x14c>
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	07de      	lsls	r6, r3, #31
 8008ec8:	d508      	bpl.n	8008edc <_printf_i+0x14c>
 8008eca:	6923      	ldr	r3, [r4, #16]
 8008ecc:	6861      	ldr	r1, [r4, #4]
 8008ece:	4299      	cmp	r1, r3
 8008ed0:	bfde      	ittt	le
 8008ed2:	2330      	movle	r3, #48	; 0x30
 8008ed4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ed8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008edc:	1b52      	subs	r2, r2, r5
 8008ede:	6122      	str	r2, [r4, #16]
 8008ee0:	f8cd a000 	str.w	sl, [sp]
 8008ee4:	464b      	mov	r3, r9
 8008ee6:	aa03      	add	r2, sp, #12
 8008ee8:	4621      	mov	r1, r4
 8008eea:	4640      	mov	r0, r8
 8008eec:	f7ff fee2 	bl	8008cb4 <_printf_common>
 8008ef0:	3001      	adds	r0, #1
 8008ef2:	d14c      	bne.n	8008f8e <_printf_i+0x1fe>
 8008ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef8:	b004      	add	sp, #16
 8008efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008efe:	4835      	ldr	r0, [pc, #212]	; (8008fd4 <_printf_i+0x244>)
 8008f00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008f04:	6829      	ldr	r1, [r5, #0]
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f0c:	6029      	str	r1, [r5, #0]
 8008f0e:	061d      	lsls	r5, r3, #24
 8008f10:	d514      	bpl.n	8008f3c <_printf_i+0x1ac>
 8008f12:	07df      	lsls	r7, r3, #31
 8008f14:	bf44      	itt	mi
 8008f16:	f043 0320 	orrmi.w	r3, r3, #32
 8008f1a:	6023      	strmi	r3, [r4, #0]
 8008f1c:	b91e      	cbnz	r6, 8008f26 <_printf_i+0x196>
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	f023 0320 	bic.w	r3, r3, #32
 8008f24:	6023      	str	r3, [r4, #0]
 8008f26:	2310      	movs	r3, #16
 8008f28:	e7b0      	b.n	8008e8c <_printf_i+0xfc>
 8008f2a:	6823      	ldr	r3, [r4, #0]
 8008f2c:	f043 0320 	orr.w	r3, r3, #32
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	2378      	movs	r3, #120	; 0x78
 8008f34:	4828      	ldr	r0, [pc, #160]	; (8008fd8 <_printf_i+0x248>)
 8008f36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f3a:	e7e3      	b.n	8008f04 <_printf_i+0x174>
 8008f3c:	0659      	lsls	r1, r3, #25
 8008f3e:	bf48      	it	mi
 8008f40:	b2b6      	uxthmi	r6, r6
 8008f42:	e7e6      	b.n	8008f12 <_printf_i+0x182>
 8008f44:	4615      	mov	r5, r2
 8008f46:	e7bb      	b.n	8008ec0 <_printf_i+0x130>
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	6826      	ldr	r6, [r4, #0]
 8008f4c:	6961      	ldr	r1, [r4, #20]
 8008f4e:	1d18      	adds	r0, r3, #4
 8008f50:	6028      	str	r0, [r5, #0]
 8008f52:	0635      	lsls	r5, r6, #24
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	d501      	bpl.n	8008f5c <_printf_i+0x1cc>
 8008f58:	6019      	str	r1, [r3, #0]
 8008f5a:	e002      	b.n	8008f62 <_printf_i+0x1d2>
 8008f5c:	0670      	lsls	r0, r6, #25
 8008f5e:	d5fb      	bpl.n	8008f58 <_printf_i+0x1c8>
 8008f60:	8019      	strh	r1, [r3, #0]
 8008f62:	2300      	movs	r3, #0
 8008f64:	6123      	str	r3, [r4, #16]
 8008f66:	4615      	mov	r5, r2
 8008f68:	e7ba      	b.n	8008ee0 <_printf_i+0x150>
 8008f6a:	682b      	ldr	r3, [r5, #0]
 8008f6c:	1d1a      	adds	r2, r3, #4
 8008f6e:	602a      	str	r2, [r5, #0]
 8008f70:	681d      	ldr	r5, [r3, #0]
 8008f72:	6862      	ldr	r2, [r4, #4]
 8008f74:	2100      	movs	r1, #0
 8008f76:	4628      	mov	r0, r5
 8008f78:	f7f7 f9b2 	bl	80002e0 <memchr>
 8008f7c:	b108      	cbz	r0, 8008f82 <_printf_i+0x1f2>
 8008f7e:	1b40      	subs	r0, r0, r5
 8008f80:	6060      	str	r0, [r4, #4]
 8008f82:	6863      	ldr	r3, [r4, #4]
 8008f84:	6123      	str	r3, [r4, #16]
 8008f86:	2300      	movs	r3, #0
 8008f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f8c:	e7a8      	b.n	8008ee0 <_printf_i+0x150>
 8008f8e:	6923      	ldr	r3, [r4, #16]
 8008f90:	462a      	mov	r2, r5
 8008f92:	4649      	mov	r1, r9
 8008f94:	4640      	mov	r0, r8
 8008f96:	47d0      	blx	sl
 8008f98:	3001      	adds	r0, #1
 8008f9a:	d0ab      	beq.n	8008ef4 <_printf_i+0x164>
 8008f9c:	6823      	ldr	r3, [r4, #0]
 8008f9e:	079b      	lsls	r3, r3, #30
 8008fa0:	d413      	bmi.n	8008fca <_printf_i+0x23a>
 8008fa2:	68e0      	ldr	r0, [r4, #12]
 8008fa4:	9b03      	ldr	r3, [sp, #12]
 8008fa6:	4298      	cmp	r0, r3
 8008fa8:	bfb8      	it	lt
 8008faa:	4618      	movlt	r0, r3
 8008fac:	e7a4      	b.n	8008ef8 <_printf_i+0x168>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	4632      	mov	r2, r6
 8008fb2:	4649      	mov	r1, r9
 8008fb4:	4640      	mov	r0, r8
 8008fb6:	47d0      	blx	sl
 8008fb8:	3001      	adds	r0, #1
 8008fba:	d09b      	beq.n	8008ef4 <_printf_i+0x164>
 8008fbc:	3501      	adds	r5, #1
 8008fbe:	68e3      	ldr	r3, [r4, #12]
 8008fc0:	9903      	ldr	r1, [sp, #12]
 8008fc2:	1a5b      	subs	r3, r3, r1
 8008fc4:	42ab      	cmp	r3, r5
 8008fc6:	dcf2      	bgt.n	8008fae <_printf_i+0x21e>
 8008fc8:	e7eb      	b.n	8008fa2 <_printf_i+0x212>
 8008fca:	2500      	movs	r5, #0
 8008fcc:	f104 0619 	add.w	r6, r4, #25
 8008fd0:	e7f5      	b.n	8008fbe <_printf_i+0x22e>
 8008fd2:	bf00      	nop
 8008fd4:	080093c9 	.word	0x080093c9
 8008fd8:	080093da 	.word	0x080093da

08008fdc <_sbrk_r>:
 8008fdc:	b538      	push	{r3, r4, r5, lr}
 8008fde:	4d06      	ldr	r5, [pc, #24]	; (8008ff8 <_sbrk_r+0x1c>)
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	4608      	mov	r0, r1
 8008fe6:	602b      	str	r3, [r5, #0]
 8008fe8:	f7f8 f948 	bl	800127c <_sbrk>
 8008fec:	1c43      	adds	r3, r0, #1
 8008fee:	d102      	bne.n	8008ff6 <_sbrk_r+0x1a>
 8008ff0:	682b      	ldr	r3, [r5, #0]
 8008ff2:	b103      	cbz	r3, 8008ff6 <_sbrk_r+0x1a>
 8008ff4:	6023      	str	r3, [r4, #0]
 8008ff6:	bd38      	pop	{r3, r4, r5, pc}
 8008ff8:	2407a340 	.word	0x2407a340

08008ffc <__sread>:
 8008ffc:	b510      	push	{r4, lr}
 8008ffe:	460c      	mov	r4, r1
 8009000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009004:	f000 f8a0 	bl	8009148 <_read_r>
 8009008:	2800      	cmp	r0, #0
 800900a:	bfab      	itete	ge
 800900c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800900e:	89a3      	ldrhlt	r3, [r4, #12]
 8009010:	181b      	addge	r3, r3, r0
 8009012:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009016:	bfac      	ite	ge
 8009018:	6563      	strge	r3, [r4, #84]	; 0x54
 800901a:	81a3      	strhlt	r3, [r4, #12]
 800901c:	bd10      	pop	{r4, pc}

0800901e <__swrite>:
 800901e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009022:	461f      	mov	r7, r3
 8009024:	898b      	ldrh	r3, [r1, #12]
 8009026:	05db      	lsls	r3, r3, #23
 8009028:	4605      	mov	r5, r0
 800902a:	460c      	mov	r4, r1
 800902c:	4616      	mov	r6, r2
 800902e:	d505      	bpl.n	800903c <__swrite+0x1e>
 8009030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009034:	2302      	movs	r3, #2
 8009036:	2200      	movs	r2, #0
 8009038:	f000 f868 	bl	800910c <_lseek_r>
 800903c:	89a3      	ldrh	r3, [r4, #12]
 800903e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009042:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009046:	81a3      	strh	r3, [r4, #12]
 8009048:	4632      	mov	r2, r6
 800904a:	463b      	mov	r3, r7
 800904c:	4628      	mov	r0, r5
 800904e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009052:	f000 b817 	b.w	8009084 <_write_r>

08009056 <__sseek>:
 8009056:	b510      	push	{r4, lr}
 8009058:	460c      	mov	r4, r1
 800905a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800905e:	f000 f855 	bl	800910c <_lseek_r>
 8009062:	1c43      	adds	r3, r0, #1
 8009064:	89a3      	ldrh	r3, [r4, #12]
 8009066:	bf15      	itete	ne
 8009068:	6560      	strne	r0, [r4, #84]	; 0x54
 800906a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800906e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009072:	81a3      	strheq	r3, [r4, #12]
 8009074:	bf18      	it	ne
 8009076:	81a3      	strhne	r3, [r4, #12]
 8009078:	bd10      	pop	{r4, pc}

0800907a <__sclose>:
 800907a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800907e:	f000 b813 	b.w	80090a8 <_close_r>
	...

08009084 <_write_r>:
 8009084:	b538      	push	{r3, r4, r5, lr}
 8009086:	4d07      	ldr	r5, [pc, #28]	; (80090a4 <_write_r+0x20>)
 8009088:	4604      	mov	r4, r0
 800908a:	4608      	mov	r0, r1
 800908c:	4611      	mov	r1, r2
 800908e:	2200      	movs	r2, #0
 8009090:	602a      	str	r2, [r5, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	f7f7 fb9f 	bl	80007d6 <_write>
 8009098:	1c43      	adds	r3, r0, #1
 800909a:	d102      	bne.n	80090a2 <_write_r+0x1e>
 800909c:	682b      	ldr	r3, [r5, #0]
 800909e:	b103      	cbz	r3, 80090a2 <_write_r+0x1e>
 80090a0:	6023      	str	r3, [r4, #0]
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	2407a340 	.word	0x2407a340

080090a8 <_close_r>:
 80090a8:	b538      	push	{r3, r4, r5, lr}
 80090aa:	4d06      	ldr	r5, [pc, #24]	; (80090c4 <_close_r+0x1c>)
 80090ac:	2300      	movs	r3, #0
 80090ae:	4604      	mov	r4, r0
 80090b0:	4608      	mov	r0, r1
 80090b2:	602b      	str	r3, [r5, #0]
 80090b4:	f7f8 f8ad 	bl	8001212 <_close>
 80090b8:	1c43      	adds	r3, r0, #1
 80090ba:	d102      	bne.n	80090c2 <_close_r+0x1a>
 80090bc:	682b      	ldr	r3, [r5, #0]
 80090be:	b103      	cbz	r3, 80090c2 <_close_r+0x1a>
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	bd38      	pop	{r3, r4, r5, pc}
 80090c4:	2407a340 	.word	0x2407a340

080090c8 <_fstat_r>:
 80090c8:	b538      	push	{r3, r4, r5, lr}
 80090ca:	4d07      	ldr	r5, [pc, #28]	; (80090e8 <_fstat_r+0x20>)
 80090cc:	2300      	movs	r3, #0
 80090ce:	4604      	mov	r4, r0
 80090d0:	4608      	mov	r0, r1
 80090d2:	4611      	mov	r1, r2
 80090d4:	602b      	str	r3, [r5, #0]
 80090d6:	f7f8 f8a8 	bl	800122a <_fstat>
 80090da:	1c43      	adds	r3, r0, #1
 80090dc:	d102      	bne.n	80090e4 <_fstat_r+0x1c>
 80090de:	682b      	ldr	r3, [r5, #0]
 80090e0:	b103      	cbz	r3, 80090e4 <_fstat_r+0x1c>
 80090e2:	6023      	str	r3, [r4, #0]
 80090e4:	bd38      	pop	{r3, r4, r5, pc}
 80090e6:	bf00      	nop
 80090e8:	2407a340 	.word	0x2407a340

080090ec <_isatty_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	4d06      	ldr	r5, [pc, #24]	; (8009108 <_isatty_r+0x1c>)
 80090f0:	2300      	movs	r3, #0
 80090f2:	4604      	mov	r4, r0
 80090f4:	4608      	mov	r0, r1
 80090f6:	602b      	str	r3, [r5, #0]
 80090f8:	f7f8 f8a7 	bl	800124a <_isatty>
 80090fc:	1c43      	adds	r3, r0, #1
 80090fe:	d102      	bne.n	8009106 <_isatty_r+0x1a>
 8009100:	682b      	ldr	r3, [r5, #0]
 8009102:	b103      	cbz	r3, 8009106 <_isatty_r+0x1a>
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	bd38      	pop	{r3, r4, r5, pc}
 8009108:	2407a340 	.word	0x2407a340

0800910c <_lseek_r>:
 800910c:	b538      	push	{r3, r4, r5, lr}
 800910e:	4d07      	ldr	r5, [pc, #28]	; (800912c <_lseek_r+0x20>)
 8009110:	4604      	mov	r4, r0
 8009112:	4608      	mov	r0, r1
 8009114:	4611      	mov	r1, r2
 8009116:	2200      	movs	r2, #0
 8009118:	602a      	str	r2, [r5, #0]
 800911a:	461a      	mov	r2, r3
 800911c:	f7f8 f8a0 	bl	8001260 <_lseek>
 8009120:	1c43      	adds	r3, r0, #1
 8009122:	d102      	bne.n	800912a <_lseek_r+0x1e>
 8009124:	682b      	ldr	r3, [r5, #0]
 8009126:	b103      	cbz	r3, 800912a <_lseek_r+0x1e>
 8009128:	6023      	str	r3, [r4, #0]
 800912a:	bd38      	pop	{r3, r4, r5, pc}
 800912c:	2407a340 	.word	0x2407a340

08009130 <__malloc_lock>:
 8009130:	4801      	ldr	r0, [pc, #4]	; (8009138 <__malloc_lock+0x8>)
 8009132:	f7ff bb1d 	b.w	8008770 <__retarget_lock_acquire_recursive>
 8009136:	bf00      	nop
 8009138:	2407a334 	.word	0x2407a334

0800913c <__malloc_unlock>:
 800913c:	4801      	ldr	r0, [pc, #4]	; (8009144 <__malloc_unlock+0x8>)
 800913e:	f7ff bb18 	b.w	8008772 <__retarget_lock_release_recursive>
 8009142:	bf00      	nop
 8009144:	2407a334 	.word	0x2407a334

08009148 <_read_r>:
 8009148:	b538      	push	{r3, r4, r5, lr}
 800914a:	4d07      	ldr	r5, [pc, #28]	; (8009168 <_read_r+0x20>)
 800914c:	4604      	mov	r4, r0
 800914e:	4608      	mov	r0, r1
 8009150:	4611      	mov	r1, r2
 8009152:	2200      	movs	r2, #0
 8009154:	602a      	str	r2, [r5, #0]
 8009156:	461a      	mov	r2, r3
 8009158:	f7f8 f83e 	bl	80011d8 <_read>
 800915c:	1c43      	adds	r3, r0, #1
 800915e:	d102      	bne.n	8009166 <_read_r+0x1e>
 8009160:	682b      	ldr	r3, [r5, #0]
 8009162:	b103      	cbz	r3, 8009166 <_read_r+0x1e>
 8009164:	6023      	str	r3, [r4, #0]
 8009166:	bd38      	pop	{r3, r4, r5, pc}
 8009168:	2407a340 	.word	0x2407a340

0800916c <_init>:
 800916c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916e:	bf00      	nop
 8009170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009172:	bc08      	pop	{r3}
 8009174:	469e      	mov	lr, r3
 8009176:	4770      	bx	lr

08009178 <_fini>:
 8009178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800917a:	bf00      	nop
 800917c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800917e:	bc08      	pop	{r3}
 8009180:	469e      	mov	lr, r3
 8009182:	4770      	bx	lr
